Program.Sub.ScreenSU.Start
Gui.f_Main..Create
Gui.f_Main..Caption("Order Entry")
Gui.f_Main..Size(15000,10110)
Gui.f_Main..MinX(0)
Gui.f_Main..MinY(0)
Gui.f_Main..Position(0,0)
Gui.f_Main..BackColor(-2147483633)
Gui.f_Main..MousePointer(0)
Gui.f_Main..Event(UnLoad,f_Main_UnLoad)
Gui.f_Main.GsGcMain.Create(GsGridControl)
Gui.f_Main.GsGcMain.Size(14610,7425)
Gui.f_Main.GsGcMain.Position(90,1680)
Gui.f_Main.GsGcMain.Event(RowCellClick,GsGcMain_RowCellClick)
Gui.f_Main.GsGcMain.Event(CellValueChanged,GsGcMain_CellValueChanged)
Gui.f_Main.frmNotes.Create(Frame)
Gui.f_Main.frmNotes.Size(5145,765)
Gui.f_Main.frmNotes.Position(9540,765)
Gui.f_Main.lblBatch.Create(Label,"Batch Notes:",True,1935,255,0,90,180,True,0,"Arial",8,-2147483633,0)
Gui.f_Main.lblBatch.Parent("frmNotes")
Gui.f_Main.txtBatch.Create(TextBox,"",True,4965,300,0,90,390,True,0,"Arial",8,-2147483643,1)
Gui.f_Main.txtBatch.Parent("frmNotes")
Gui.f_Main.cmdWeight.Create(Button)
Gui.f_Main.cmdWeight.Size(1770,540)
Gui.f_Main.cmdWeight.Position(7665,990)
Gui.f_Main.cmdWeight.Caption("Weight and Square Footage")
Gui.f_Main.cmdWeight.Event(Click,cmdWeight_Click)
Gui.f_Main.picGSSLogo.Create(PictureBox)
Gui.f_Main.picGSSLogo.Size(4125,960)
Gui.f_Main.picGSSLogo.Position(5340,0)
Gui.f_Main.cmdSave.Create(Button)
Gui.f_Main.cmdSave.Size(1125,540)
Gui.f_Main.cmdSave.Position(120,9225)
Gui.f_Main.cmdSave.Caption("Save")
Gui.f_Main.cmdSave.Event(Click,cmdSave_Click)
Gui.f_Main.cmdFinish.Create(Button)
Gui.f_Main.cmdFinish.Size(1125,525)
Gui.f_Main.cmdFinish.Position(13575,9315)
Gui.f_Main.cmdFinish.Caption("Send To Production")
Gui.f_Main.cmdFinish.Event(Click,cmdFinish_Click)
Gui.f_Main.cmdUpload.Create(Button)
Gui.f_Main.cmdUpload.Size(1125,525)
Gui.f_Main.cmdUpload.Position(12345,9315)
Gui.f_Main.cmdUpload.Caption("Upload Lines")
Gui.f_Main.cmdUpload.Event(Click,cmdUpload_Click)
Gui.f_Main.frameLegend.Create(Frame)
Gui.f_Main.frameLegend.Size(2130,675)
Gui.f_Main.frameLegend.Position(90,9300)
Gui.f_Main.frameLegend.Caption("Legend")
Gui.f_Main.txtSTP.Create(TextBox,"Sent to Production",True,1785,300,0,150,255,True,2,"Arial",8,65535,1)
Gui.f_Main.txtSTP.Parent("frameLegend")
Gui.f_Main.txtSTP.FontStyle(True,False,False,False,False)
Gui.f_Main.txtSTP2.Create(TextBox,"",True,345,300,0,2865,9150,True,2,"Arial",8,255,1)
Gui.f_Main.lbl1.Create(Label,"Denotes Invalid Data",True,2130,255,0,3315,9240,True,0,"Arial",8,-2147483633,0)
Gui.f_Macro..Create
Gui.f_Macro..Caption("Cut Rite Macros")
Gui.f_Macro..Size(4815,6750)
Gui.f_Macro..MinX(0)
Gui.f_Macro..MinY(0)
Gui.f_Macro..Position(0,0)
Gui.f_Macro..BackColor(-2147483633)
Gui.f_Macro..MousePointer(0)
Gui.f_Macro..Event(UnLoad,f_Macro_UnLoad)
Gui.f_Macro..AlwaysOnTop(True)
Gui.f_Macro..MaxButton(False)
Gui.f_Macro..Sizeable(False)
Gui.f_Macro.GsGcMacro.Create(GsGridControl)
Gui.f_Macro.GsGcMacro.Size(4485,5655)
Gui.f_Macro.GsGcMacro.Position(30,15)
Gui.f_Macro.cmdMacroSave.Create(Button)
Gui.f_Macro.cmdMacroSave.Size(900,375)
Gui.f_Macro.cmdMacroSave.Position(3615,5835)
Gui.f_Macro.cmdMacroSave.Caption("Save")
Gui.f_Macro.cmdMacroSave.Event(Click,cmdMacroSave_Click)
Gui.frmFlexSch..Create
Gui.frmFlexSch..Caption("Flex Schedule Preview")
Gui.frmFlexSch..Size(12615,8550)
Gui.frmFlexSch..MinX(0)
Gui.frmFlexSch..MinY(0)
Gui.frmFlexSch..Position(0,0)
Gui.frmFlexSch..BackColor(-2147483633)
Gui.frmFlexSch..MaxButton(False)
Gui.frmFlexSch..MinButton(False)
Gui.frmFlexSch..MousePointer(0)
'Gui.frmFlexSch..Event(UnLoad,frmFlexSch_UnLoad)
Gui.frmFlexSch.GsGrid.Create(GsGridControl)
Gui.frmFlexSch.GsGrid.Size(12030,7500)
Gui.frmFlexSch.GsGrid.Position(120,300)
Program.Sub.ScreenSU.End

Program.Sub.Preflight.Start
Variable.Global.fPriceCatDisc.Declare(Float)
Variable.Global.dDateDue.Declare(Date)
Program.Sub.Preflight.End

Program.Sub.Main.Start
F.Intrinsic.Control.SetErrorHandler("Main_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.sGssLogo.Declare
V.Local.sIcon.Declare
V.Local.sLine.Declare
V.Local.sOrder.Declare
V.Local.sRet.Declare
V.Local.sRet1.Declare
V.Local.sSQL.Declare
V.Global.bPrice.declare

v.Local.sFilePath.Declare
V.Local.sFieldNames.Declare
V.Local.sTypes.Declare

F.ODBC.Connection!con.OpenConnection(V.Ambient.PDSN,V.Ambient.PUser,V.Ambient.PPass)

F.Intrinsic.Control.SelectCase(V.Caller.Hook)

	F.Intrinsic.Control.Case(12445)
		f.Intrinsic.String.Build("{0}@{1}@{2}@{3}",Variable.Passed.000071,Variable.Passed.000072,Variable.Passed.000074,Variable.Passed.000001,v.Local.sRet)
		v.Passed.Global.Set(v.Local.sRet)

		F.ODBC.Connection!con.Close
		F.Intrinsic.Control.End
		
	F.Intrinsic.Control.Case(12440)
	'POPULATE
		Variable.Passed.000162.Set("OE Form")
		v.Passed.Global.Set("")
		
		V.Passed.GAB-LBL-1.Set("Order Status")
		F.Intrinsic.UI.ChangeCallerProperty(V.Passed.GAB-LBL-1,"HIDE",0)
		F.Intrinsic.UI.ChangeCallerProperty(V.Passed.GAB-LBL-1,"LOCK",0)
		F.Intrinsic.Variable.SetProperty("GAB-LBL-1","PL",395)
		F.Intrinsic.Variable.SetProperty("GAB-LBL-1","PT",142)
		F.Intrinsic.Variable.SetProperty("GAB-LBL-1","PW",65)
		
		F.Intrinsic.String.LPad(V.Passed.000005,"0",7,V.Local.sOrder)
		F.Intrinsic.String.Build("Select Status From GCG_5364_Ord_Status Where Order_No = '{0}'",V.Local.sOrder,V.Local.sRet)
		F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sRet,V.Local.sRet)
		
		F.Intrinsic.Control.If(V.Local.sRet,<>,"")
			V.Passed.GAB-TEXT-1.Set(V.Local.sRet.Trim)
		F.Intrinsic.Control.Else
			V.Passed.GAB-TEXT-1.Set("Started")
		F.Intrinsic.Control.EndIf
		
		F.Intrinsic.UI.ChangeCallerProperty(V.Passed.GAB-TEXT-1,"HIDE",0)
		F.Intrinsic.UI.ChangeCallerProperty(V.Passed.GAB-TEXT-1,"LOCK",1)
		F.Intrinsic.Variable.SetProperty("GAB-TEXT-1","PL",395)
		F.Intrinsic.Variable.SetProperty("GAB-TEXT-1","PT",160)
		F.Intrinsic.Variable.SetProperty("GAB-TEXT-1","PW",105)
		
		V.Passed.GAB-BTN-1.Set("^")
		F.Intrinsic.UI.ChangeCallerProperty(V.Passed.GAB-BTN-1,"HIDE",0)
		F.Intrinsic.UI.ChangeCallerProperty(V.Passed.GAB-BTN-1,"LOCK",0)
		F.Intrinsic.Variable.SetProperty("GAB-BTN-1","PL",508)
		F.Intrinsic.Variable.SetProperty("GAB-BTN-1","PT",157)
		F.Intrinsic.Variable.SetProperty("GAB-BTN-1","PW",25)
		
		F.ODBC.Connection!con.Close
		F.Intrinsic.Control.End
		
	'SCRIPT 1
	F.Intrinsic.Control.Case(12620)
		F.Data.DataTable.Create("SORTCODEFIN",True)
		F.Data.DataTable.AddColumn("SORTCODEFIN","SortCode",String)
		F.Data.DataTable.AddColumn("SORTCODEFIN","SortCodeIn",String)
		F.Data.DataTable.AddRow("SORTCODEFIN","SortCode","ARTISAN","SortCodeIn","'MELA'")
		F.Data.DataTable.AddRow("SORTCODEFIN","SortCode","CRAFTSMAN","SortCodeIn","'STICK'")
		F.Data.DataTable.AddRow("SORTCODEFIN","SortCode","MOLDING","SortCodeIn","'VINYL'")
		F.Data.DataTable.AddRow("SORTCODEFIN","SortCode","DOOR","SortCodeIn","'VINYL'")
		F.Data.DataTable.AddRow("SORTCODEFIN","SortCode","COMPONENT","SortCodeIn","'MELA'")
		
		F.Data.DataTable.Create("SORTCODEMAT",True)
		F.Data.DataTable.AddColumn("SORTCODEMAT","SortCode",String)
		F.Data.DataTable.AddColumn("SORTCODEMAT","SortCodeIn",String)
		F.Data.DataTable.AddRow("SORTCODEMAT","SortCode","ARTISAN","SortCodeIn","'MELA','PANEL'")
		F.Data.DataTable.AddRow("SORTCODEMAT","SortCode","CRAFTSMAN","SortCodeIn","'PANEL'")
		F.Data.DataTable.AddRow("SORTCODEMAT","SortCode","MOLDING","SortCodeIn","'MOLDING'")
		F.Data.DataTable.AddRow("SORTCODEMAT","SortCode","DOOR","SortCodeIn","'MDF','PANEL'")
		F.Data.DataTable.AddRow("SORTCODEMAT","SortCode","COMPONENT","SortCodeIn","'MELA'")
		
		f.Intrinsic.Control.CallSub(LoadData)
		GUI.f_Main..Show
		Gui.f_Main..AlwaysOnTop(True)
		Gui.f_Main..AlwaysOnTop(False)
		GUI.f_Main..WindowState(2)

	F.Intrinsic.Control.Case(12511)
	'POST SAVE
'			f.Intrinsic.Control.If(v.Passed.Global.Trim,<>,"")
'				f.Intrinsic.String.Split(v.Passed.Global,"@",V.Local.sRet)
'				f.Intrinsic.Control.If(V.Local.sRet(0),<>,Variable.Passed.000071)
'					v.Passed.Global.Set("")
'					'parts changed 
'					f.Intrinsic.Control.CallSub(LoadData)
'					GUI.f_Main..Show
'					GUI.f_Main..WindowState(2)
'				f.Intrinsic.Control.elseIf(V.Local.sRet(1),<>,Variable.Passed.000072)
'					v.Passed.Global.Set("")
'					f.Intrinsic.Control.CallSub(LoadData)
'					GUI.f_Main..Show
'					GUI.f_Main..WindowState(2)
'				f.Intrinsic.Control.elseIf(V.Local.sRet(2),<>,Variable.Passed.000074)
'					v.Passed.Global.Set("")
'					f.Intrinsic.Control.CallSub(LoadData)
'					GUI.f_Main..Show
'					GUI.f_Main..WindowState(2)
'				f.Intrinsic.Control.elseIf(V.Local.sRet(3).long,<>,Variable.Passed.000001.long)
'					v.Passed.Global.Set("")
'					'call wrappper update
'					f.Intrinsic.Control.CallSub(upd_Callwrapper)
'				f.Intrinsic.Control.EndIf
'			f.Intrinsic.Control.endif
		f.Intrinsic.String.Split(v.Passed.Global,"@",V.Local.sRet)
		V.Local.sRet.RedimPreserve(0,3)
		F.Intrinsic.Control.If(V.Local.sRet(3).Long,>,0)
			f.Intrinsic.Control.If(V.Local.sRet(3).long,<>,Variable.Passed.000001.long)
				v.Passed.Global.Set("")
				'call wrappper update
				f.Intrinsic.Control.CallSub(upd_Callwrapper)
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf
		
		F.ODBC.Connection!con.Close
		F.Intrinsic.Control.End
		
	F.Intrinsic.Control.Case(12522)
	'delete
		'V.PASSED.000051 - LINE INTEGER
		'V.PASSED.000060 - ORDER INTEGER
		F.Intrinsic.String.LPad(V.Passed.000013,"0",3,V.Local.sLine)
		F.Intrinsic.String.RPad(V.Local.sLine,"0",4,V.Local.sLine)
		
		F.Intrinsic.String.Format(V.Passed.000005,"0000000",V.Local.sOrder)
		F.Intrinsic.String.Build("delete from GCG_5364_OE_LINES where ORDER_NO = '{0}' and record_no = '{1}'",V.Local.sOrder,V.Local.sLine,V.Local.sSQL)
		F.ODBC.Connection!con.Execute(V.Local.sSQL)
		F.ODBC.Connection!con.Close
		F.Intrinsic.Control.End
		
	F.Intrinsic.Control.Case(12600)

F.Intrinsic.Control.EndSelect

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("Main_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
		F.ODBC.Connection!con.Close
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.End
Function.Intrinsic.Control.EndIf
Program.Sub.Main.End

Program.Sub.LoadDataTable.Start
F.Intrinsic.Control.SetErrorHandler("LoadDataTable_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.sDay.Declare
V.Local.sLine.Declare
V.Local.sMonth.Declare
V.Local.sOrder.Declare
V.Local.sSQL.Declare
V.Local.sYear.Declare

F.Intrinsic.String.LPad(V.Passed.000005,"0",7,V.Local.sOrder)
'' Due Date is in format YYYYMMDD in V.Passed.000024

F.Intrinsic.String.Build("select Det.ORDER_NO,Det.Record_no,DET.Date_Item_PROM as DATE_PROMISE,MATL,MATL_DESC,MATL_BROWSE,Det.Part as PART_CODE,PC_BROWSE,Det.QTY_ORDERED as QTY_ORDER,UM_ORDER as 'UOM',ACTLength,ACTWidth,CASE WHEN ConvertUOM IS NULL THEN 'IN' else ConvertUOM  END as ConvertUOM,LENGTH,WIDTH,rtrim(Det.DESCRIPTION) DESCRIPTION ,CASE WHEN EXPORT IS NULL THEN CONVERT(0,SQL_BIT) else CONVERT(EXPORT,SQL_BIT)  END AS EXPORT,rtrim(FINISH) as Finish,FIN_DESC,FN_BROWSE,CASE WHEN WGRAIN IS NULL THEN CONVERT(0,SQL_BIT) else CONVERT(WGRAIN,SQL_BIT)  END AS WGRAIN,PRICE_SF,LIN.COST,det.DISCOUNT,CASE WHEN MANUAL_PRICE IS NULL THEN CONVERT(0,SQL_BIT) else CONVERT(MANUAL_PRICE,SQL_BIT)  END AS 'MANUAL_PRICE',TAXABLE,DRILL_CODE,DC_BROWSE,CASE WHEN DRILL_PRICE IS NULL THEN 0 else DRILL_PRICE  END as DRILL_PRICE ,rtrim(NOTES) as Notes,Batch_Notes,NT_LOOKUP,MCCODE,CASE WHEN ATTN_ID IS NULL THEN CONVERT(0,SQL_BIT) else CONVERT(ATTN_ID,SQL_BIT)  END AS ATTN_ID,ADD_ROW,DELETE_ROW,CR_MACRO,PRICE_MATL,PRICE_PART,PRICE_FINISH,PRICE_SF_CALC,SQUARE_FT,SF_COST,TOTAL_COST,WEIGHT_MATL,UPLOADED,Det.PART,JHdr.job + '-' + JHdr.suffix as WO,DET.Product_Line as 'PL',INSERT_1,Insert_PN,Insert_PC  from V_ORDER_LINES DET left join GCG_5364_OE_LINES LIN on DET.ORDER_NO = LIN.ORDER_NO and Det.Record_no = Lin.Record_no left join v_Job_Header JHdr on Sales_Order =  LIN.order_no and left(LIN.record_no,3) = sales_Order_line  where DET.ORDER_NO = '{0}' order by Det.Record_no",V.Local.sOrder,V.Local.sSQL)

'F.ODBC.Connection!con.OpenLocalRecordsetRO("rstSel",V.Local.sSQL)
'F.Intrinsic.Control.If(V.ODBC.con!rstSel.EOF,=,True)
	'prompting the user to save a line before he oe form can be launched
'	F.Intrinsic.UI.CloseWaitDialog
'	F.Intrinsic.UI.Msgbox("No Sales Orders Lines have been saved.  Click Save to save the Line before launching the OE Form.","Attention")
'	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
'		F.ODBC.Connection!con.Close
'	F.Intrinsic.Control.EndIf
'	F.Intrinsic.Control.End
'	F.Data.DataTable.Create("dtMain",TRUE)
'	F.Data.DataTable.AddColumn("dtMain","ORDER_NO","STRING")
'	F.Data.DataTable.AddColumn("dtMain","Record_no","STRING")
'	F.Data.DataTable.AddColumn("dtMain","DATE_PROMISE","DATE")
'	F.Data.DataTable.AddColumn("dtMain","MATL","STRING")
'	F.Data.DataTable.AddColumn("dtMain","MATL_BROWSE","STRING")
'	F.Data.DataTable.AddColumn("dtMain","PART_CODE","STRING")
'	F.Data.DataTable.AddColumn("dtMain","PC_BROWSE","STRING")
'	F.Data.DataTable.AddColumn("dtMain","QTY_ORDER","FLOAT")
'	F.Data.DataTable.AddColumn("dtMain","LENGTH","FLOAT")
'	F.Data.DataTable.AddColumn("dtMain","WIDTH","FLOAT")
'	F.Data.DataTable.AddColumn("dtMain","ConvertUOM","STRING")
'	'PART CODE DESCRIPTION
'	F.Data.DataTable.AddColumn("dtMain","DESCRIPTION","STRING")
'	'DOESN'T GO INTO PRODUCTION
'	F.Data.DataTable.AddColumn("dtMain","EXPORT","Boolean")
'	F.Data.DataTable.AddColumn("dtMain","FINISH","STRING")
'	F.Data.DataTable.AddColumn("dtMain","FN_BROWSE","STRING")
'	F.Data.DataTable.AddColumn("dtMain","WGRAIN","Boolean")
'	F.Data.DataTable.AddColumn("dtMain","PRICE_SF","FLOAT")
'	F.Data.DataTable.AddColumn("dtMain","COST","FLOAT")
'	F.Data.DataTable.AddColumn("dtMain","DISCOUNT","FLOAT")
'	F.Data.DataTable.AddColumn("dtMain","EXTENSION","FLOAT")
'	F.Data.DataTable.AddColumn("dtMain","MANUAL_PRICE","Boolean")
'	F.Data.DataTable.AddColumn("dtMain","TAXABLE","Boolean")
'	F.Data.DataTable.AddColumn("dtMain","DRILL_CODE","STRING")
'	F.Data.DataTable.AddColumn("dtMain","DC_BROWSE","STRING")
'	F.Data.DataTable.AddColumn("dtMain","DRILL_PRICE","FLOAT")
'	'LOOKUP FOR LABEL - TEXT CODES
'	F.Data.DataTable.AddColumn("dtMain","NOTES","STRING")
'	F.Data.DataTable.AddColumn("dtMain","NT_LOOKUP","STRING")
'	'DROP DOWN LIST OF WORK CENTERS IN THE MACH DEPARTMENT - INCLUDING WORK GROUPS
'	F.Data.DataTable.AddColumn("dtMain","MCCODE","STRING")
'	F.Data.DataTable.AddColumn("dtMain","ATTN_ID","Boolean")
'	F.Data.DataTable.AddColumn("dtMain","ADD_ROW","STRING")
'	F.Data.DataTable.AddColumn("dtMain","DELETE_ROW","STRING")
'	F.Data.DataTable.AddColumn("dtMain","CR_MACRO","STRING")
'	F.Data.DataTable.AddColumn("dtMain","PRICE_MATL","FLOAT")
'	F.Data.DataTable.AddColumn("dtMain","PRICE_PART","FLOAT")
'	F.Data.DataTable.AddColumn("dtMain","PRICE_FINISH","FLOAT")
'	F.Data.DataTable.AddColumn("dtMain","PRICE_SF_CALC","FLOAT")
'	F.Data.DataTable.AddColumn("dtMain","SQUARE_FT","FLOAT")
'	F.Data.DataTable.AddColumn("dtMain","SF_COST","FLOAT")
'	F.Data.DataTable.AddColumn("dtMain","TOTAL_COST","FLOAT")
'	F.Data.DataTable.AddColumn("dtMain","WEIGHT_MATL","FLOAT")
'	F.Data.DataTable.AddColumn("dtMain","UPLOADED","BOOLEAN")
'	F.Data.DataTable.AddColumn("dtMain","PART","STRING")
'	F.Data.DataTable.AddColumn("dtMain","WO","STRING")
'	F.Data.DataTable.AddColumn("dtMain","INSERT","STRING")
'	F.Data.DataTable.AddColumn("dtMain","INSERT_PN","STRING")
'	F.Data.DataTable.AddColumn("dtMain","INSERT_PC","STRING")
'	F.Data.DataTable.AddColumn("dtMain","PL","STRING")
'	
'	'ADD A BLANK ROW
'	V.Local.sLine.Set("001")
'	F.Intrinsic.String.Build("select * from V_ORDER_LINES where ORDER_NO = '{0}' and RECORD_NO = '{1}0'",V.Local.sOrder,V.Local.sLine,V.Local.sSQL)
'	F.ODBC.Connection!con.OpenLocalRecordsetRO("rstLine",V.Local.sSQL)
'	F.Intrinsic.Control.DoUntil(V.ODBC.con!rstLine.EOF,=,TRUE)
'		F.ODBC.con!rstLine.Close
'		F.Intrinsic.Math.Add(V.Local.sLine,1,V.Local.sLine)
'		F.Intrinsic.String.LPad(V.Local.sLine,"0",3,V.Local.sLine)
'		F.Intrinsic.String.Build("select * from V_ORDER_LINES where ORDER_NO = '{0}' and RECORD_NO = '{1}0'",V.Local.sOrder,V.Local.sLine,V.Local.sSQL)
'		F.ODBC.Connection!con.OpenLocalRecordsetRO("rstLine",V.Local.sSQL)
'	F.Intrinsic.Control.Loop
'	F.ODBC.con!rstLine.Close

'F.Intrinsic.Control.Else
	F.Data.DataTable.CreateFromSQL("dtMain","con",V.Local.sSQL,True)
	
	'Discount dont get applied to drill code price
	f.Data.DataTable.AddExpressionColumn("dtMain","CalcDiscount","float","Cost - DRILL_PRICE")
	f.Data.DataTable.AddExpressionColumn("dtMain","ActCost","float","iif(MANUAL_PRICE=False,(CalcDiscount-(CalcDiscount*discount)+Drill_Price),COST)")
	
	f.Data.DataTable.AddExpressionColumn("dtMain","Extension","float","ActCost*QTY_ORDER")
	F.Data.DataTable.AddExpressionColumn("dtMain","Tot_SF","float","QTY_ORDER*SQUARE_FT")

'f.Intrinsic.Control.EndIf

'F.ODBC.con!rstSel.Close

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("LoadDataTable_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
		F.ODBC.Connection!con.Close
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.End
Function.Intrinsic.Control.EndIf
Program.Sub.LoadDataTable.End

Program.Sub.LoadGrid.Start
F.Intrinsic.Control.SetErrorHandler("LoadGrid_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.iColumn.Declare
V.Local.iFor.Declare
V.Local.iIndex.Declare
V.Local.sColor.Declare
V.Local.sInsert.Declare
V.Local.sMatlCode.Declare
V.Local.sMCCode.Declare
V.Local.sPartCode.Declare
V.Local.sProperty.Declare
V.Local.sRet.Declare
V.Local.sSel.Declare
V.Local.sSQL.Declare
V.Local.sSerialize.Declare


F.Data.DataView.Create("dtMain","dvMain")

GUI.f_Main.GsGcMain.AddGridviewFromDataview("gvMAIN","dtMain","dvMain")
'GUI.f_Main.GsGcMain.BestFitColumns("gvMAIN")
'	
'GUI.f_Main.GsGcMain.SetGridviewProperty("gvMAIN","AllowAddRows",False)
'GUI.f_Main.GsGcMain.SetGridviewProperty("gvMAIN","AllowDeleteRows",False)
'GUI.f_Main.GsGcMain.SetGridviewProperty("gvMAIN","Editable",True)
Gui.f_Main.GsGcMain.SetGridviewProperty("gvMAIN","OptionsViewColumnAutoWidth",False)


GUI.f_Main.frmNotes.Visible(False)
GUI.f_Main.cmdWeight.Visible(False)
GUI.f_Main.frameLegend.Visible(False)
GUI.f_Main.cmdUpload.Visible(False)
GUI.f_Main.cmdFinish.Visible(False)


Function.Data.DataTable.AddRowChangedEventHandler("dtMain", "DataRowChanged")

GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DESCRIPTION","MaxLength",30)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","Notes","MaxLength",64)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","Batch_Notes","MaxLength",200)

GUI.f_Main.GsGcMain.SetGridViewProperty("gvMAIN", "ColumnPanelRowHeight", "40")
GUI.f_Main.GsGcMain.SetGridviewProperty("gvMAIN","OptionsViewRowAutoHeight",True)
GUI.f_Main.GsGcMain.SetGridviewProperty("gvMAIN","AllowColumnResizing",True)
GUI.f_Main.GsGcMain.SetGridviewProperty("gvMAIN","AllowSort",False)
GUI.f_Main.GsGcMain.SetGridviewProperty("gvMAIN","AllowFilter",False)

GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ConvertUOM","HeaderWordWrap","wrap")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","LENGTH","HeaderWordWrap","wrap")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","WIDTH","HeaderWordWrap","wrap")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","UOM","HeaderWordWrap","wrap")

'ALLOW EDIT
V.Local.sProperty.Set("AllowEdit")

GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ORDER_NO",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","Record_no",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DATE_PROMISE",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","MATL",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","MATL_DESC",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","MATL_BROWSE",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","PART_CODE",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","PC_BROWSE",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","QTY_ORDER",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ACTLENGTH",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ACTWIDTH",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","LENGTH",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","WIDTH",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","UOM",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ConvertUOM",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DESCRIPTION",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","EXPORT",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","FINISH",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","FIN_DESC",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","FN_BROWSE",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","WGRAIN",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","PRICE_SF",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","COST",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DISCOUNT",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","CalcDiscount",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","EXTENSION",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","MANUAL_PRICE",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","TAXABLE",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DRILL_CODE",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DC_BROWSE",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DRILL_PRICE",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","NOTES",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","Batch_NOTES",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","NT_LOOKUP",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","MCCODE",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ATTN_ID",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ADD_ROW",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DELETE_ROW",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","CR_MACRO",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMain","INSERT_1",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMain","INSERT_PN",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMain","WO",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMain","Square_Ft",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMain","Weight_Matl",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMain","Tot_SF",V.Local.sProperty,False)

'READ ONLY
V.Local.sProperty.Set("ReadOnly")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ORDER_NO",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","Record_no",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DATE_PROMISE",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","MATL",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","MATL_DESC",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","MATL_BROWSE",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","PART_CODE",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","PC_BROWSE",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","QTY_ORDER",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ACTLENGTH",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ACTWIDTH",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","LENGTH",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","WIDTH",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","UOM",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ConvertUOM",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DESCRIPTION",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","EXPORT",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","FINISH",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","FIN_DESC",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","FN_BROWSE",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","WGRAIN",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","PRICE_SF",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","COST",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DISCOUNT",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ACTCOST",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","CalcDiscount",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","EXTENSION",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","MANUAL_PRICE",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","TAXABLE",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DRILL_CODE",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DC_BROWSE",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DRILL_PRICE",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","Batch_Notes",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","NOTES",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","NT_LOOKUP",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","MCCODE",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ATTN_ID",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ADD_ROW",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DELETE_ROW",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","CR_MACRO",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMain","INSERT_1",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMain","INSERT_PN",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","WO",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMain","Square_Ft",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMain","Weight_Matl",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMain","Tot_SF",V.Local.sProperty,True)

'HEADER FONT BOLD
V.Local.sProperty.Set("HeaderFontBold")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ORDER_NO",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","Record_no",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DATE_PROMISE",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","MATL",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","MATL_DESC",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","MATL_BROWSE",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","PART_CODE",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","PC_BROWSE",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","QTY_ORDER",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ACTLENGTH",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ACTWIDTH",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","LENGTH",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","WIDTH",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","UOM",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ConvertUOM",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DESCRIPTION",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","EXPORT",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","FINISH",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","FIN_DESC",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","FN_BROWSE",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","WGRAIN",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","PRICE_SF",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","COST",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","CalcDiscount",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DISCOUNT",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ACTCost",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","EXTENSION",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","MANUAL_PRICE",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","TAXABLE",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DRILL_CODE",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DC_BROWSE",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DRILL_PRICE",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","NOTES",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","Batch_Notes",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","NT_LOOKUP",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","MCCODE",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ATTN_ID",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ADD_ROW",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DELETE_ROW",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMain","INSERT_1",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMain","INSERT_PN",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMain","WO",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMain","Square_Ft",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMain","Weight_Matl",V.Local.sProperty,True)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMain","Tot_SF",V.Local.sProperty,True)

'HEADER BACK COLOR
V.Local.sProperty.Set("HeaderBackColor")
V.Local.sColor.Set("MediumSeaGreen")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ORDER_NO",V.Local.sProperty,V.Local.sColor)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","Record_no",V.Local.sProperty,V.Local.sColor)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DATE_PROMISE",V.Local.sProperty,V.Local.sColor)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","MATL",V.Local.sProperty,V.Local.sColor)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","MATL_DESC",V.Local.sProperty,V.Local.sColor)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","MATL_BROWSE",V.Local.sProperty,V.Local.sColor)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","PART_CODE",V.Local.sProperty,V.Local.sColor)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","PC_BROWSE",V.Local.sProperty,V.Local.sColor)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","QTY_ORDER",V.Local.sProperty,V.Local.sColor)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ACTLENGTH",V.Local.sProperty,V.Local.sColor)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ACTWIDTH",V.Local.sProperty,V.Local.sColor)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","LENGTH",V.Local.sProperty,V.Local.sColor)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","WIDTH",V.Local.sProperty,V.Local.sColor)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","UOM",V.Local.sProperty,V.Local.sColor)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ConvertUOM",V.Local.sProperty,V.Local.sColor)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DESCRIPTION",V.Local.sProperty,V.Local.sColor)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","EXPORT",V.Local.sProperty,V.Local.sColor)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","FINISH",V.Local.sProperty,V.Local.sColor)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","FIN_DESC",V.Local.sProperty,V.Local.sColor)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","FN_BROWSE",V.Local.sProperty,V.Local.sColor)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","WGRAIN",V.Local.sProperty,V.Local.sColor)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","PRICE_SF",V.Local.sProperty,V.Local.sColor)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","COST",V.Local.sProperty,V.Local.sColor)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","CalcDiscount",V.Local.sProperty,V.Local.sColor)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DISCOUNT",V.Local.sProperty,V.Local.sColor)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ACTCost",V.Local.sProperty,V.Local.sColor)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","EXTENSION",V.Local.sProperty,V.Local.sColor)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","MANUAL_PRICE",V.Local.sProperty,V.Local.sColor)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","TAXABLE",V.Local.sProperty,V.Local.sColor)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DRILL_CODE",V.Local.sProperty,V.Local.sColor)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DC_BROWSE",V.Local.sProperty,V.Local.sColor)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DRILL_PRICE",V.Local.sProperty,V.Local.sColor)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","NOTES",V.Local.sProperty,V.Local.sColor)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","Batch_NOTES",V.Local.sProperty,V.Local.sColor)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","NT_LOOKUP",V.Local.sProperty,V.Local.sColor)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","MCCODE",V.Local.sProperty,V.Local.sColor)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ATTN_ID",V.Local.sProperty,V.Local.sColor)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ADD_ROW",V.Local.sProperty,V.Local.sColor)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DELETE_ROW",V.Local.sProperty,V.Local.sColor)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","CR_MACRO",V.Local.sProperty,V.Local.sColor)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMain","INSERT_1",V.Local.sProperty,V.Local.sColor)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMain","INSERT_PN",V.Local.sProperty,V.Local.sColor)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMain","WO",V.Local.sProperty,V.Local.sColor)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMain","Square_Ft",V.Local.sProperty,V.Local.sColor)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMain","Weight_Matl",V.Local.sProperty,V.Local.sColor)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMain","Tot_SF",V.Local.sProperty,V.Local.sColor)

gui.f_Main.GsGcMain.AddSummaryItem("gvMain","EXTENSION","EXTENSION_Sum","Sum","","","n4")
'gui.f_Main.GsGcMain.AddSummaryItem("gvMain","Square_Ft","Square_Ft_Sum","Sum","","","n4")
gui.f_Main.GsGcMain.AddSummaryItem("gvMain","Weight_Matl","Weight_Matl_Sum","Sum","","","n4")
gui.f_Main.GsGcMain.AddSummaryItem("gvMain","Tot_SF","Tot_SF_Sum","Sum","","","n4")

'VISIBLE INDEX
V.Local.sProperty.Set("VisibleIndex")
V.Local.iIndex.Set(0)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ORDER_NO",V.Local.sProperty,V.Local.iIndex)
V.Local.iIndex.Set(V.Local.iIndex.++)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","Record_no",V.Local.sProperty,V.Local.iIndex)
V.Local.iIndex.Set(V.Local.iIndex.++)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DATE_PROMISE",V.Local.sProperty,V.Local.iIndex)
V.Local.iIndex.Set(V.Local.iIndex.++)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","MATL",V.Local.sProperty,V.Local.iIndex)
V.Local.iIndex.Set(V.Local.iIndex.++)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","MATL_DESC",V.Local.sProperty,V.Local.iIndex)
V.Local.iIndex.Set(V.Local.iIndex.++)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","MATL_BROWSE",V.Local.sProperty,V.Local.iIndex)
V.Local.iIndex.Set(V.Local.iIndex.++)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","PART_CODE",V.Local.sProperty,V.Local.iIndex)
V.Local.iIndex.Set(V.Local.iIndex.++)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","PC_BROWSE",V.Local.sProperty,V.Local.iIndex)
V.Local.iIndex.Set(V.Local.iIndex.++)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","QTY_ORDER",V.Local.sProperty,V.Local.iIndex)
V.Local.iIndex.Set(V.Local.iIndex.++)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","UOM",V.Local.sProperty,V.Local.iIndex)
V.Local.iIndex.Set(V.Local.iIndex.++)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ACTWIDTH",V.Local.sProperty,V.Local.iIndex)
V.Local.iIndex.Set(V.Local.iIndex.++)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ACTLENGTH",V.Local.sProperty,V.Local.iIndex)
V.Local.iIndex.Set(V.Local.iIndex.++)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ConvertUOM",V.Local.sProperty,V.Local.iIndex)
V.Local.iIndex.Set(V.Local.iIndex.++)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","WIDTH",V.Local.sProperty,V.Local.iIndex)
V.Local.iIndex.Set(V.Local.iIndex.++)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","LENGTH",V.Local.sProperty,V.Local.iIndex)
V.Local.iIndex.Set(V.Local.iIndex.++)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DESCRIPTION",V.Local.sProperty,V.Local.iIndex)
V.Local.iIndex.Set(V.Local.iIndex.++)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","EXPORT",V.Local.sProperty,V.Local.iIndex)
V.Local.iIndex.Set(V.Local.iIndex.++)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","FINISH",V.Local.sProperty,V.Local.iIndex)
V.Local.iIndex.Set(V.Local.iIndex.++)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","FIN_DESC",V.Local.sProperty,V.Local.iIndex)
V.Local.iIndex.Set(V.Local.iIndex.++)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","FN_BROWSE",V.Local.sProperty,V.Local.iIndex)
V.Local.iIndex.Set(V.Local.iIndex.++)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","WGRAIN",V.Local.sProperty,V.Local.iIndex)
V.Local.iIndex.Set(V.Local.iIndex.++)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","PRICE_SF",V.Local.sProperty,V.Local.iIndex)
V.Local.iIndex.Set(V.Local.iIndex.++)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DRILL_CODE",V.Local.sProperty,V.Local.iIndex)
V.Local.iIndex.Set(V.Local.iIndex.++)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DC_BROWSE",V.Local.sProperty,V.Local.iIndex)
V.Local.iIndex.Set(V.Local.iIndex.++)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DRILL_PRICE",V.Local.sProperty,V.Local.iIndex)
V.Local.iIndex.Set(V.Local.iIndex.++)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","COST",V.Local.sProperty,V.Local.iIndex)
V.Local.iIndex.Set(V.Local.iIndex.++)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DISCOUNT",V.Local.sProperty,V.Local.iIndex)
V.Local.iIndex.Set(V.Local.iIndex.++)

GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","CalcDiscount",V.Local.sProperty,V.Local.iIndex)
V.Local.iIndex.Set(V.Local.iIndex.++)

GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ACTCost",V.Local.sProperty,V.Local.iIndex)
V.Local.iIndex.Set(V.Local.iIndex.++)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","EXTENSION",V.Local.sProperty,V.Local.iIndex)
V.Local.iIndex.Set(V.Local.iIndex.++)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","MANUAL_PRICE",V.Local.sProperty,V.Local.iIndex)
V.Local.iIndex.Set(V.Local.iIndex.++)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","TAXABLE",V.Local.sProperty,V.Local.iIndex)
V.Local.iIndex.Set(V.Local.iIndex.++)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","NOTES",V.Local.sProperty,V.Local.iIndex)
V.Local.iIndex.Set(V.Local.iIndex.++)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","NT_LOOKUP",V.Local.sProperty,V.Local.iIndex)
V.Local.iIndex.Set(V.Local.iIndex.++)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","Batch_NOTES",V.Local.sProperty,V.Local.iIndex)
V.Local.iIndex.Set(V.Local.iIndex.++)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMain","INSERT_1",V.Local.sProperty,V.Local.iIndex)
V.Local.iIndex.Set(V.Local.iIndex.++)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","MCCODE",V.Local.sProperty,V.Local.iIndex)
V.Local.iIndex.Set(V.Local.iIndex.++)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ATTN_ID",V.Local.sProperty,V.Local.iIndex)
V.Local.iIndex.Set(V.Local.iIndex.++)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","CR_MACRO",V.Local.sProperty,V.Local.iIndex)
V.Local.iIndex.Set(V.Local.iIndex.++)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ADD_ROW",V.Local.sProperty,V.Local.iIndex)
V.Local.iIndex.Set(V.Local.iIndex.++)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DELETE_ROW",V.Local.sProperty,V.Local.iIndex)
V.Local.iIndex.Set(V.Local.iIndex.++)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","WO",V.Local.sProperty,V.Local.iIndex)
V.Local.iIndex.Set(V.Local.iIndex.++)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","Tot_SF",V.Local.sProperty,V.Local.iIndex)
V.Local.iIndex.Set(V.Local.iIndex.++)

'TAB STOP
V.Local.sProperty.Set("TabStop")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ORDER_NO",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","Record_no",V.Local.sProperty,False)

GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DISCOUNT",V.Local.sProperty,False)

GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DELETE_ROW",V.Local.sProperty,False)

GUI.f_Main.GsGcMain.SetColumnProperty("gvMain","INSERT_1",V.Local.sProperty,False)

'CAPTION
V.Local.sProperty.Set("Caption")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ORDER_NO",V.Local.sProperty,"OrderNo")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","Record_no",V.Local.sProperty,"Line")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DATE_PROMISE",V.Local.sProperty,"Promise Date")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","MATL",V.Local.sProperty,"Material")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","MATL_DESC",V.Local.sProperty,"Material Desc")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","MATL_BROWSE",V.Local.sProperty," ")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","PART_CODE",V.Local.sProperty,"Part Code")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","PC_BROWSE",V.Local.sProperty," ")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","QTY_ORDER",V.Local.sProperty,"Order Qty.")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ACTLENGTH",V.Local.sProperty,"Length")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ACTWIDTH",V.Local.sProperty,"Width")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","LENGTH",V.Local.sProperty,"Converted Length")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","WIDTH",V.Local.sProperty,"Converted Width")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","UOM",V.Local.sProperty,"UOM")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ConvertUOM",V.Local.sProperty,"Converted UOM")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DESCRIPTION",V.Local.sProperty,"Description")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","EXPORT",V.Local.sProperty,"Export")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","FINISH",V.Local.sProperty,"Finish")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","FIN_DESC",V.Local.sProperty,"Finish Desc")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","FN_BROWSE",V.Local.sProperty," ")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","WGRAIN",V.Local.sProperty,"Woodgrain")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","PRICE_SF",V.Local.sProperty,"Price/SF")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","COST",V.Local.sProperty,"Cost")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DISCOUNT",V.Local.sProperty,"Discount")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","EXTENSION",V.Local.sProperty,"Extension")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","MANUAL_PRICE",V.Local.sProperty,"Manual Price")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","TAXABLE",V.Local.sProperty,"Taxable")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DRILL_CODE",V.Local.sProperty,"Drill Code")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DC_BROWSE",V.Local.sProperty," ")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DRILL_PRICE",V.Local.sProperty,"Drill Price")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","NOTES",V.Local.sProperty,"Label Notes")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","Batch_NOTES",V.Local.sProperty,"Batch Notes")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","NT_LOOKUP",V.Local.sProperty," ")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","MCCODE",V.Local.sProperty,"MC Code")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ATTN_ID",V.Local.sProperty,"Attention ID")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ADD_ROW",V.Local.sProperty," ")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DELETE_ROW",V.Local.sProperty," ")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","CR_MACRO",V.Local.sProperty," ")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMain","INSERT_1",V.Local.sProperty,"Insert")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMain","Tot_SF",V.Local.sProperty,"Total SF")

''MIN WIDTH
'V.Local.sProperty.Set("MinWidth")
V.Local.sProperty.Set("Width")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ORDER_NO",V.Local.sProperty,"60")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","Record_no",V.Local.sProperty,"40")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DATE_PROMISE",V.Local.sProperty,"90")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","MATL",V.Local.sProperty,"150")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","MATL_DESC",V.Local.sProperty,"150")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","MATL_BROWSE",V.Local.sProperty,"30")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","PART_CODE",V.Local.sProperty,"150")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","PC_BROWSE",V.Local.sProperty,"30")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","QTY_ORDER",V.Local.sProperty,"70")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ACTLENGTH",V.Local.sProperty,"50")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ACTWIDTH",V.Local.sProperty,"50")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","LENGTH",V.Local.sProperty,"70")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","WIDTH",V.Local.sProperty,"70")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","UOM",V.Local.sProperty,"40")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ConvertUOM",V.Local.sProperty,"70")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DESCRIPTION",V.Local.sProperty,"200")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","EXPORT",V.Local.sProperty,"50")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","FINISH",V.Local.sProperty,"150")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","FIN_DESC",V.Local.sProperty,"150")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","FN_BROWSE",V.Local.sProperty,"30")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","WGRAIN",V.Local.sProperty,"70")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","PRICE_SF",V.Local.sProperty,"60")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DRILL_CODE",V.Local.sProperty,"100")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DC_BROWSE",V.Local.sProperty,"30")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DRILL_PRICE",V.Local.sProperty,"60")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","COST",V.Local.sProperty,"50")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","CalcDiscount",V.Local.sProperty,"50")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DISCOUNT",V.Local.sProperty,"60")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ACTCOST",V.Local.sProperty,"60")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","EXTENSION",V.Local.sProperty,"70")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","MANUAL_PRICE",V.Local.sProperty,"80")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","TAXABLE",V.Local.sProperty,"60")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","NOTES",V.Local.sProperty,"200")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","Batch_NOTES",V.Local.sProperty,"200")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","NT_LOOKUP",V.Local.sProperty,"30")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","MCCODE",V.Local.sProperty,"60")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ATTN_ID",V.Local.sProperty,"80")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ADD_ROW",V.Local.sProperty,"20")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DELETE_ROW",V.Local.sProperty,"20")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","CR_MACRO",V.Local.sProperty,"50")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMain","INSERT_1",V.Local.sProperty,"120")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","WO",V.Local.sProperty,"70")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","Tot_SF",V.Local.sProperty,"70")

'CELL H ALIGNMENT
V.Local.sProperty.Set("CellHAlignment")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","MATL_BROWSE",V.Local.sProperty,"Center")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","PC_BROWSE",V.Local.sProperty,"Center")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","FN_BROWSE",V.Local.sProperty,"Center")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DC_BROWSE",V.Local.sProperty,"Center")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","NT_LOOKUP",V.Local.sProperty,"Center")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ADD_ROW",V.Local.sProperty,"Center")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DELETE_ROW",V.Local.sProperty,"Center")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","CR_MACRO",V.Local.sProperty,"Center")

'CELL FONT BOLD
V.Local.sProperty.Set("CellFontBold")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","CR_MACRO",V.Local.sProperty,True)

'CELL BACK COLOR
V.Local.sProperty.Set("CellBackColor")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ADD_ROW",V.Local.sProperty,"Lime")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DELETE_ROW",V.Local.sProperty,"Red")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","CR_MACRO",V.Local.sProperty,"Gray")

'DISPLAY CUSTOM NUMERIC
V.Local.sProperty.Set("DisplayCustomNumeric")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DRILL_PRICE",V.Local.sProperty,"$0.00")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","PRICE_SF",V.Local.sProperty,"$0.00")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","COST",V.Local.sProperty,"$0.00")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","EXTENSION",V.Local.sProperty,"$0.00")

'VISIBLE
V.Local.sProperty.Set("Visible")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","PRICE_MATL",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","PRICE_PART",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","PC_BROWSE",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","PRICE_FINISH",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","PRICE_SF_CALC",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","SQUARE_FT",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","SF_COST",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","TOTAL_COST",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","WEIGHT_MATL",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","UPLOADED",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","PART",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMain","INSERT_PN",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMain","INSERT_PC",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMain","PL",V.Local.sProperty,False)

GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ADD_ROW",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DELETE_ROW",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","CR_MACRO",V.Local.sProperty,False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DATE_PROMISE",V.Local.sProperty,False)

'DATE FORMAT FOR PROMISE DATE
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DATE_PROMISE","DisplayCustomDateTime","d")

'COLUMN EDIT FOR UOM DROP DOWN LIST
GUI.f_Main.GsGcMain.ColumnEdit("gvMAIN","ConvertUOM","DropDownList","IN*!*MM")

'COLUMN EDIT FOR INSERT DROP DOWN LIST
'adding blank to dropdown list 6/22/2020 RLK
'F.Intrinsic.Control.For(V.Local.iFor,0,V.DataTable.dtInsertPur.RowCount--,1)
''	F.Intrinsic.Control.If(V.Local.sInsert.Trim,=,"")
''		V.Local.sInsert.Set(V.DataTable.dtInsertPur(V.Local.iFor).DESCRIPTION!FieldValTrim)
''	F.Intrinsic.Control.Else
'		F.Intrinsic.String.Concat(V.Local.sInsert,"*!*",V.DataTable.dtInsertPur(V.Local.iFor).DESCRIPTION!FieldValTrim,V.Local.sInsert)
''	F.Intrinsic.Control.EndIf
'F.Intrinsic.Control.Next(V.Local.iFor)
'F.Intrinsic.Control.For(V.Local.iFor,0,V.DataTable.dtInsertMFG.RowCount--,1)
'	F.Intrinsic.Control.If(V.Local.sInsert.Trim,=,"")
'		V.Local.sInsert.Set(V.DataTable.dtInsertMFG(V.Local.iFor).DESCRIPTION!FieldValTrim)
'	F.Intrinsic.Control.Else
'		F.Intrinsic.String.Concat(V.Local.sInsert,"*!*",V.DataTable.dtInsertMFG(V.Local.iFor).DESCRIPTION!FieldValTrim,V.Local.sInsert)
'	F.Intrinsic.Control.EndIf
'F.Intrinsic.Control.Next(V.Local.iFor)
GUI.f_Main.GsGcMain.ColumnEdit("gvMAIN","INSERT_1","DropDownList","*!*GLASS")

'ADD BROWSER ICONS
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","MATL_BROWSE","Icon","^")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","PC_BROWSE","Icon","^")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","FN_BROWSE","Icon","^")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DC_BROWSE","Icon","^")
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","NT_LOOKUP","Icon","^")

F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"GAB_5364_ORDER_ENTRY.g2u",5364,1,6,"",V.Local.sSerialize)
F.Intrinsic.Control.If(V.Local.sSerialize.Trim,<>,"")
	F.Intrinsic.Control.Try
		Gui.f_Main.GsGcMain.Deserialize(V.Local.sSerialize)
	F.Intrinsic.Control.Catch
	
	F.Intrinsic.Control.EndTry
F.Intrinsic.Control.EndIf

GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","ADD_ROW","AllowShowHide",False)
GUI.f_Main.GsGcMain.SetColumnProperty("gvMAIN","DELETE_ROW","AllowShowHide",False)

GUI.f_Main.GsGcMain.MainView("gvMAIN")

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("LoadGrid_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
		F.ODBC.Connection!con.Close
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.End
Function.Intrinsic.Control.EndIf
Program.Sub.LoadGrid.End

Program.Sub.SetAnchors.Start
F.Intrinsic.Control.SetErrorHandler("SetAnchors_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)

GUI.f_Main.GsGcMain.Anchor(15)
GUI.f_Main.frmNotes.Anchor(9)
GUI.f_Main.cmdWeight.Anchor(9)
GUI.f_Main.picGSSLogo.Anchor(1)
GUI.f_Main.cmdSave.Anchor(6)
Gui.f_Main.cmdFinish.Anchor(10)
GUI.f_Main.cmdUpload.Anchor(10)
Gui.f_Main.frameLegend.Anchor(6)
Gui.f_Main.txtSTP2.Anchor(6)
Gui.f_Main.lbl1.Anchor(6)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("SetAnchors_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
		F.ODBC.Connection!con.Close
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.End
Function.Intrinsic.Control.EndIf
Program.Sub.SetAnchors.End

Program.Sub.f_Main_UnLoad.Start
F.Intrinsic.Control.SetErrorHandler("f_Main_UnLoad_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
v.Local.iFlag.Declare
V.Local.sSerialize.Declare
V.Local.sSql.Declare
V.Local.iUser.Declare

f.Intrinsic.Control.If(V.Global.bPrice,=,True)
	Function.Intrinsic.UI.MsgBox ("Do you want to save changes?", "Save",3,v.Local.iFlag)
	f.Intrinsic.Control.If(v.Local.iFlag,=,6)
		f.Intrinsic.Control.CallSub(cmdSave_Click)
	f.Intrinsic.Control.Elseif(v.Local.iFlag,=,2)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.endif
f.Intrinsic.Control.endif

F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"GAB_5364_ORDER_ENTRY.g2u",5364,1,6,"",V.Local.sSerialize)
F.Global.Security.GetUserId(V.Caller.User,V.Caller.CompanyCode,V.Local.iUser)
F.Intrinsic.Control.If(V.Local.sSerialize.Trim,<>,"")
	F.ODBC.Connection!Common.OpenCommonConnection
	F.Intrinsic.String.Build("Delete From Gs_Registry Where User_ID = {0} and Company = '{1}' and ucase(Program) = 'GAB_5364_ORDER_ENTRY.G2U' and Reg_ID = 5364 And Seq = 1;",V.Local.iUser,V.Caller.CompanyCode,V.Local.sSql)
	F.ODBC.Connection!common.Execute(V.Local.sSql)
	F.ODBC.Connection!common.Close
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Try
	Gui.f_Main.GsGcMain.Serialize("gvMain",V.Local.sSerialize)
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"GAB_5364_ORDER_ENTRY.G2U",5364,1,False,"Serialize",False,0,-999.0,1/1/1980,12:00:00 AM,V.Local.sSerialize)
F.Intrinsic.Control.Catch
F.Intrinsic.Control.EndTry

F.ODBC.Connection!con.Close

F.Intrinsic.Control.End

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("f_Main_UnLoad_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
		F.ODBC.Connection!con.Close
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.End
Function.Intrinsic.Control.EndIf
Program.Sub.f_Main_UnLoad.End

Program.Sub.AddRow.Start
F.Intrinsic.Control.SetErrorHandler("AddRow_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.iIndex.Declare
V.Local.iRow.Declare
V.Local.sOrder.Declare
V.Local.sLine.Declare
V.Local.sSQL.Declare

F.Intrinsic.String.LPad(V.Passed.000003,"0",7,V.Local.sOrder)

V.Local.iRow.Set(V.DataTable.dtMain.rowcount--)

F.Intrinsic.Math.Add(V.DataTable.dtMain(V.Local.iRow).LINE!FieldValTrim,1,V.Local.sLine)
F.Intrinsic.String.LPad(V.Local.sLine,"0",3,V.Local.sLine)
F.Intrinsic.String.Build("select * from V_ORDER_LINES where ORDER_NO = '{0}' and RECORD_NO = '{1}0'",V.Local.sOrder,V.Local.sLine,V.Local.sSQL)
F.ODBC.Connection!con.OpenLocalRecordsetRO("rstLine",V.Local.sSQL)
F.Intrinsic.Control.DoUntil(V.ODBC.con!rstLine.EOF,=,TRUE)
	F.ODBC.con!rstLine.Close
	F.Intrinsic.Math.Add(V.Local.sLine,1,V.Local.sLine)
	F.Intrinsic.String.LPad(V.Local.sLine,"0",3,V.Local.sLine)
	F.Intrinsic.String.Build("select * from V_ORDER_LINES where ORDER_NO = '{0}' and RECORD_NO = '{1}0'",V.Local.sOrder,V.Local.sLine,V.Local.sSQL)
	F.ODBC.Connection!con.OpenLocalRecordsetRO("rstLine",V.Local.sSQL)
F.Intrinsic.Control.Loop
F.ODBC.con!rstLine.Close

'ADD A NEW ROW COPYING MATERIAL AND FINISH
F.Data.DataTable.AddRow("dtMain","ORDER_NO",V.Local.sOrder,"LINE",V.Local.sLine,"DATE_PROMISE",V.Global.dDateDue,"MATL",V.DataTable.dtMain(V.Args.iRowID).MATL!FieldValTrim,"UOM","IN","EXPORT",V.DataTable.dtMain(V.Args.iRowID).EXPORT!FieldVal,"FINISH",V.DataTable.dtMain(V.Args.iRowID).FINISH!FieldValTrim,"WGRAIN",V.DataTable.dtMain(V.Args.iRowID).WGRAIN!FieldVal,"MCCODE",V.DataTable.dtMain(V.Args.iRowID).MCCODE!FieldValTrim,"DISCOUNT",V.Global.fPriceCatDisc,"MANUAL_PRICE",False,"TAXABLE",False,"ATTN_ID",False,"ADD_ROW","+","DELETE_ROW","-","CR_MACRO","Macro","PRICE_MATL",V.DataTable.dtMain(V.Args.iRowID).PRICE_MATL!FieldValFloat,"PRICE_FINISH",V.DataTable.dtMain(V.Args.iRowID).PRICE_FINISH!FieldValFloat,"WEIGHT_MATL",V.DataTable.dtMain(V.Args.iRowID).WEIGHT_MATL!FieldValFloat)
GUI.f_Main.GsGcMain.GetColumnIndexByName("gvMain","MATL_BROWSE",V.Local.iIndex)
GUI.f_Main.GsGcMain.SetCellAppearance("gvMAIN",V.Local.iIndex,V.DataTable.dtMain.ROWCOUNT--,"Icon","^")
GUI.f_Main.GsGcMain.GetColumnIndexByName("gvMain","PC_BROWSE",V.Local.iIndex)
GUI.f_Main.GsGcMain.SetCellAppearance("gvMAIN",V.Local.iIndex,V.DataTable.dtMain.ROWCOUNT--,"Icon","^")
GUI.f_Main.GsGcMain.GetColumnIndexByName("gvMain","FN_BROWSE",V.Local.iIndex)
GUI.f_Main.GsGcMain.SetCellAppearance("gvMAIN",V.Local.iIndex,V.DataTable.dtMain.ROWCOUNT--,"Icon","^")
GUI.f_Main.GsGcMain.GetColumnIndexByName("gvMain","DC_BROWSE",V.Local.iIndex)
GUI.f_Main.GsGcMain.SetCellAppearance("gvMAIN",V.Local.iIndex,V.DataTable.dtMain.ROWCOUNT--,"Icon","^")
GUI.f_Main.GsGcMain.GetColumnIndexByName("gvMain","NT_LOOKUP",V.Local.iIndex)
GUI.f_Main.GsGcMain.SetCellAppearance("gvMAIN",V.Local.iIndex,V.DataTable.dtMain.ROWCOUNT--,"Icon","^")

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("AddRow_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
		F.ODBC.Connection!con.Close
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.End
Function.Intrinsic.Control.EndIf
Program.Sub.AddRow.End

Program.Sub.GsGcMain_RowCellClick.Start
F.Intrinsic.Control.SetErrorHandler("GsGcMain_RowCellClick_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)

F.Intrinsic.Control.SelectCase(V.Args.Column)
	F.Intrinsic.Control.Case("MATL_BROWSE")
		F.Intrinsic.Control.CallSub(matlbrowser,"iRowID",V.Args.RowIndex)
	F.Intrinsic.Control.Case("PC_BROWSE")
		F.Intrinsic.Control.CallSub(partcodebrowser,"iRowID",V.Args.RowIndex)
	F.Intrinsic.Control.Case("FN_BROWSE")
		F.Intrinsic.Control.CallSub(finishbrowser,"iRowID",V.Args.RowIndex)
	F.Intrinsic.Control.Case("DC_BROWSE")
		F.Intrinsic.Control.CallSub(drillcodebrowser,"iRowID",V.Args.RowIndex)
	F.Intrinsic.Control.Case("NT_LOOKUP")
		F.Intrinsic.Control.CallSub(notesbrowser,"iRowID",V.Args.RowIndex)
'	F.Intrinsic.Control.Case("ADD_ROW")
'		F.Intrinsic.Control.CallSub(addrow,"iRowID",V.Args.RowIndex)
'	F.Intrinsic.Control.Case("DELETE_ROW")
'		F.Intrinsic.Control.CallSub(deleterow,"iRowID",V.Args.RowIndex)
	F.Intrinsic.Control.Case("CR_MACRO")
		F.Intrinsic.Control.CallSub(Loadf_Macro,"iRowID",V.Args.RowIndex)
F.Intrinsic.Control.EndSelect

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("GsGcMain_RowCellClick_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
		F.ODBC.Connection!con.Close
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.End
Function.Intrinsic.Control.EndIf
Program.Sub.GsGcMain_RowCellClick.End

Program.Sub.DeleteRow.Start
F.Intrinsic.Control.SetErrorHandler("DeleteRow_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)

F.Intrinsic.Control.If(V.DataTable.dtMain.rowcount,>,1)
	F.Data.DataTable.DeleteRow("dtMain",V.Args.iRowID)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("DeleteRow_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.End
Function.Intrinsic.Control.EndIf
Program.Sub.DeleteRow.End

Program.Sub.MatlBrowser.Start
F.Intrinsic.Control.SetErrorHandler("MatlBrowser_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.fPrice.Declare
V.Local.sRet.Declare
V.Local.sSQL.Declare
V.Local.sFilter.Declare

'V.Local.sSQL.Set("select PART, DESCRIPTION from V_INVENTORY_ALL where CODE_SORT = 'MATERIAL' order by PART")
'V.Local.sSQL.Set("select PART, DESCRIPTION from V_INVENTORY_ALL where Code_Sort In(Select Sort_Code From GCG_5364_SORT_MAINT Where ucase(Status) = 'NON-WORK ORDER MATERIAL') Order By Part")

F.Intrinsic.String.Build("Select Code_Sort From V_Inventory_Mstr Where Part = '{0}'",V.DataTable.dtMain(V.Args.iRowID).Part!FieldvalTrim,V.Local.sSQL)
F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL,V.Local.sRet)

F.Intrinsic.Control.If(V.DataView.SORTCODEMAT!Temp.Exists)
	F.Data.DataView.Close("SORTCODEMAT","Temp")
F.Intrinsic.Control.EndIf

F.Intrinsic.String.Build("SortCode = '{0}'",V.Local.sRet,V.Local.sFilter)

F.Data.DataView.Create("SORTCODEMAT","Temp",22,V.Local.sFilter,"")

F.Intrinsic.Control.If(V.DataView.SORTCODEMAT!Temp.RowCount--,<>,-1)
	F.Intrinsic.String.Build("select PART, DESCRIPTION from V_INVENTORY_ALL where CODE_SORT IN ({0})",V.DataView.SORTCODEMAT!Temp(V.DataView.SORTCODEMAT!Temp.RowCount--).SortCodeIn!FieldValTrim,V.Local.sSQL)
F.Intrinsic.Control.Else
	V.Local.sSQL.Set("select PART, DESCRIPTION from V_INVENTORY_ALL")
F.Intrinsic.Control.EndIf

F.Intrinsic.UI.SetBrowserHotTypeAhead(True)
F.Intrinsic.UI.Browser("Material Code","con",V.Local.sSQL,"Material Code*!*Description","30*!*70",V.Local.sRet)
F.Intrinsic.Control.If(V.Local.sRet,<>,"***CANCEL***")
	F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)
	F.Data.DataTable.SetValue("dtMain",V.Args.iRowID,"MATL",V.Local.sRet(0).Trim,"MATL_DESC",V.Local.sRet(1).Trim)
	'UPDATE THE PRICE PER SF
	F.Intrinsic.String.Build("select * from V_INVENTORY_ALL where PART = '{0}'",V.Local.sRet(0).Trim,V.Local.sSQL)
	F.ODBC.Connection!con.OpenLocalRecordsetRO("rstSel",V.Local.sSQL)
	F.Intrinsic.Control.If(V.ODBC.con!rstSel.EOF,=,False)
		F.Data.DataTable.SetValue("dtMain",V.Args.iRowID.Long,"PRICE_MATL",V.ODBC.con!rstSel.FieldValFloat!AMT_PRICE)
		F.Data.DataTable.SetValue("dtMain",V.Args.iRowID.Long,"WEIGHT_MATL",V.ODBC.con!rstSel.FieldValFloat!LBS)
		F.Intrinsic.Control.If(V.DataTable.dtMain(V.Args.iRowID.Long).PL!FieldValTrim,=,"MM")
			F.Data.DataTable.SetValue("dtMain",V.Args.iRowID.Long,"ActLength",V.ODBC.con!rstSel.FieldValFloat!Length)
			F.Intrinsic.Control.CallSub("GsGcMain_CellValueChanged","Column","ACTLength","RowIndex",V.Args.iRowID.Long)
			F.Data.DataTable.SetValue("dtMain",V.Args.iRowID.Long,"ActWidth",V.ODBC.con!rstSel.FieldValFloat!Width)
			F.Intrinsic.Control.CallSub("GsGcMain_CellValueChanged","Column","ACTWidth","RowIndex",V.Args.iRowID.Long)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
	
	F.ODBC.con!rstSel.Close
	
	F.Intrinsic.Control.CallSub(setallcalculations,"iRowID",V.Args.iRowID.Long)
	F.Intrinsic.Control.CallSub(validatewoodgrain,"iRowID",V.Args.iRowID.Long)

	F.Intrinsic.Control.CallSub(setextension,"iRowID",V.Args.iRowID.Long)
	'assign matlcode to blank matlcode blank lines
	F.Intrinsic.Control.CallSub(Assign_Mat2Grid,"iRowID",V.Args.iRowID.Long)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("MatlBrowser_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
		F.ODBC.Connection!con.Close
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.End
Function.Intrinsic.Control.EndIf
Program.Sub.MatlBrowser.End

Program.Sub.PartCodeBrowser.Start
F.Intrinsic.Control.SetErrorHandler("PartCodeBrowser_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.bExport.Declare
V.Local.bState.Declare
V.Local.bWoodGrain.Declare
V.Local.fLength.Declare
V.Local.fWidth.Declare
V.Local.iColumn.Declare
V.Local.sRet.Declare
V.Local.sSQL.Declare

'V.Local.sSQL.Set("select PART, DESCRIPTION from V_INVENTORY_ALL where CODE_SORT = 'PART' order by PART")
V.Local.sSQL.Set("select PART, DESCRIPTION from V_INVENTORY_ALL where Code_Sort In(Select Sort_Code From GCG_5364_SORT_MAINT Where ucase(Status) = 'DOOR' or ucase(Status) like 'NON-DOOR%') Order By Part")
F.Intrinsic.UI.SetBrowserHotTypeAhead(True)
F.Intrinsic.UI.Browser("Part Code","con",V.Local.sSQL,"Part Code*!*Description","30*!*70",V.Local.sRet)
F.Intrinsic.Control.If(V.Local.sRet,<>,"***CANCEL***")
	F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)
	F.Data.DataTable.SetValue("dtMain",V.Args.iRowID,"PART_CODE",V.Local.sRet(0).Trim)
	F.Data.DataTable.SetValue("dtMain",V.Args.iRowID,"DESCRIPTION",V.Local.sRet(1).Trim)

'	F.Intrinsic.String.Build("select * from V_INVENTORY_ALL where CODE_SORT = 'PART' and PART = '{0}'",V.Local.sRet(0).Trim,V.Local.sSQL)
	F.Intrinsic.String.Build("select * from V_INVENTORY_ALL where CODE_SORT In(Select Sort_Code From GCG_5364_SORT_MAINT Where ucase(Status) = 'DOOR') and PART = '{0}'",V.Local.sRet(0).Trim,V.Local.sSQL)
	F.ODBC.Connection!con.OpenLocalRecordsetRO("rstSel",V.Local.sSQL)
	F.Intrinsic.Control.If(V.ODBC.con!rstSel.EOF,=,False)
		F.Data.DataTable.SetValue("dtMain",V.Args.iRowID,"PL",V.ODBC.con!rstSel.FieldValTrim!PRODUCT_LINE)
		F.Intrinsic.Math.Mult(V.ODBC.con!rstSel.FieldValFloat!LENGTH,12,V.Local.fLength)
		F.Intrinsic.Math.Mult(V.ODBC.con!rstSel.FieldValFloat!WIDTH,12,V.Local.fWidth)
	F.Intrinsic.Control.EndIf
	F.ODBC.con!rstSel.Close
	
	
	F.Intrinsic.String.Build("select IF(UPPER(USER2) = '1',convert('1',SQL_Bit),convert('0',SQL_Bit)) as 'USER2', IF(UPPER(USER3) = 'TRUE',convert('1',SQL_Bit),convert('0',SQL_Bit)) as 'USER3', USER4 from INV_EXTRA where PART = '{0}'",V.Local.sRet(0).Trim,V.Local.sSQL)
	F.ODBC.Connection!con.OpenLocalRecordsetRO("rstSel",V.Local.sSQL)
	F.Intrinsic.Control.If(V.ODBC.con!rstSel.EOF,=,False)
		F.Data.DataTable.SetValue("dtMain",V.Args.iRowID,"WGRAIN",V.ODBC.con!rstSel.FieldValTrim!USER2)
		F.Data.DataTable.SetValue("dtMain",V.Args.iRowID,"EXPORT",V.ODBC.con!rstSel.FieldValTrim!USER3)
		F.Data.DataTable.SetValue("dtMain",V.Args.iRowID,"MCCODE",V.ODBC.con!rstSel.FieldValTrim!USER4)
	F.Intrinsic.Control.EndIf
	F.ODBC.con!rstSel.Close

	F.Intrinsic.String.Build("select IF(TAX_EXEMPT_FLG = 'Y',convert('0',SQL_BIT),convert('1',SQL_BIT)) as TAXABLE from INVENTORY_MST3 where PART = '{0}'",V.Local.sRet(0).Trim,V.Local.sSQL)
	F.ODBC.Connection!con.OpenLocalRecordsetRO("rstSel",V.Local.sSQL)
	F.Intrinsic.Control.If(V.ODBC.con!rstSel.EOF,=,False)
		F.Data.DataTable.SetValue("dtMain",V.Args.iRowID,"TAXABLE",V.ODBC.con!rstSel.FieldVal!TAXABLE)
	F.Intrinsic.Control.EndIf
	F.ODBC.con!rstSel.Close

	F.Intrinsic.String.Build("select AMT_PRICE from V_INVENTORY_ALL where PART = '{0}'",V.Local.sRet(0).Trim,V.Local.sSQL)
	F.ODBC.Connection!con.OpenLocalRecordsetRO("rstSel",V.Local.sSQL)
	F.Intrinsic.Control.If(V.ODBC.con!rstSel.EOF,=,False)
		F.Data.DataTable.SetValue("dtMain",V.Args.iRowID,"PRICE_PART",V.ODBC.con!rstSel.FieldValFloat!AMT_PRICE)
	F.Intrinsic.Control.EndIf
	F.ODBC.con!rstSel.Close

	'MM product line is moldings
	F.Intrinsic.Control.If(V.DataTable.dtMain(V.Args.iRowID).PL!FieldValTrim,=,"MM")
		'Set the length and width
		F.Data.DataTable.SetValue("dtMain",V.Args.iRowID,"ACTLENGTH",V.Local.fLength,"ACTWIDTH",V.Local.fWidth)
		F.Data.DataTable.SetValue("dtMain",V.Args.iRowID,"LENGTH",V.Local.fLength,"WIDTH",V.Local.fWidth)
		V.Local.bState.Set(True)
	F.Intrinsic.Control.Else
		V.Local.bState.Set(False)
	F.Intrinsic.Control.EndIf

	'Set the length and width cells to locked or unlocked
	gui.f_Main.GsGcMain.GetColumnIndexByName("gvMain","ACTLENGTH",V.Local.iColumn)
	gui.f_Main.GsGcMain.SetCellProperty("gvMain",V.Local.iColumn,V.Args.iRowID,"Locked",V.Local.bState)
	gui.f_Main.GsGcMain.GetColumnIndexByName("gvMain","ACTWIDTH",V.Local.iColumn)
	gui.f_Main.GsGcMain.SetCellProperty("gvMain",V.Local.iColumn,V.Args.iRowID,"Locked",V.Local.bState)

	
	F.Intrinsic.Control.CallSub(setallcalculations,"iRowID",V.Args.iRowID)
	F.Intrinsic.Control.CallSub(validatewoodgrain,"iRowID",V.Args.iRowID)

'	F.Intrinsic.Control.CallSub(setinsert,"iRowID",V.Args.iRowID)
	F.Intrinsic.Control.CallSub(setextension,"iRowID",V.Args.iRowID)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("PartCodeBrowser_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
		F.ODBC.Connection!con.Close
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.End
Function.Intrinsic.Control.EndIf
Program.Sub.PartCodeBrowser.End

Program.Sub.FinishBrowser.Start
F.Intrinsic.Control.SetErrorHandler("FinishBrowser_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.fPrice.Declare
V.Local.sRet.Declare
V.Local.sSQL.Declare
V.Local.sFilter.Declare

'V.Local.sSQL.Set("select PART, DESCRIPTION from V_INVENTORY_ALL where CODE_SORT = 'FINISH' order by PART")
F.Intrinsic.String.Build("Select Code_Sort From V_Inventory_Mstr Where Part = '{0}'",V.DataTable.dtMain(V.Args.iRowID).Part!FieldvalTrim,V.Local.sSQL)
F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL,V.Local.sRet)

F.Intrinsic.Control.If(V.DataView.SORTCODEFIN!Temp.Exists)
	F.Data.DataView.Close("SORTCODEFIN","Temp")
F.Intrinsic.Control.EndIf

F.Intrinsic.String.Build("SortCode = '{0}'",V.Local.sRet,V.Local.sFilter)

F.Data.DataView.Create("SORTCODEFIN","Temp",22,V.Local.sFilter,"")

'V.Local.sSQL.Set("select PART, DESCRIPTION from V_INVENTORY_ALL where CODE_SORT IN (Select UCase(Sort_Code) From GCG_5364_SORT_MAINT Where UCASE(Status) = 'NON-WORK ORDER FINISH')")
F.Intrinsic.Control.If(V.DataView.SORTCODEFIN!Temp.RowCount--,<>,-1)
	F.Intrinsic.String.Build("select PART, DESCRIPTION from V_INVENTORY_ALL where CODE_SORT IN ({0}) OR Part Like 'EDG%'",V.DataView.SORTCODEFIN!Temp(V.DataView.SORTCODEFIN!Temp.RowCount--).SortCodeIn!FieldValTrim,V.Local.sSQL)
F.Intrinsic.Control.Else
	V.Local.sSQL.Set("select PART, DESCRIPTION from V_INVENTORY_ALL")
F.Intrinsic.Control.EndIf

F.Intrinsic.UI.SetBrowserHotTypeAhead(True)
F.Intrinsic.UI.Browser("Finish Code","con",V.Local.sSQL,"Finish Code*!*Description","30*!*70",V.Local.sRet)
F.Intrinsic.Control.If(V.Local.sRet,<>,"***CANCEL***")
	F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)
	F.Data.DataTable.SetValue("dtMain",V.Args.iRowID,"FINISH",V.Local.sRet(0).Trim,"FIN_DESC",V.Local.sRet(1).Trim)
	'UPDATE THE PRICE PER SF
	F.Intrinsic.String.Build("select AMT_PRICE from V_INVENTORY_ALL where PART = '{0}'",V.Local.sRet(0).Trim,V.Local.sSQL)
	F.ODBC.Connection!con.OpenLocalRecordsetRO("rstSel",V.Local.sSQL)
	F.Intrinsic.Control.If(V.ODBC.con!rstSel.EOF,=,False)
		F.Data.DataTable.SetValue("dtMain",V.Args.iRowID,"PRICE_FINISH",V.ODBC.con!rstSel.FieldValFloat!AMT_PRICE)
	F.Intrinsic.Control.EndIf
	F.ODBC.con!rstSel.Close

	F.Intrinsic.Control.CallSub(setallcalculations,"iRowID",V.Args.iRowID)

F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(setextension,"iRowID",V.Args.iRowID)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("FinishBrowser_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
		F.ODBC.Connection!con.Close
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.End
Function.Intrinsic.Control.EndIf
Program.Sub.FinishBrowser.End

Program.Sub.DrillCodeBrowser.Start
F.Intrinsic.Control.SetErrorHandler("DrillCodeBrowser_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.fPrice.Declare
V.Local.sRet.Declare
V.Local.sSQL.Declare

'V.Local.sSQL.Set("select PART, DESCRIPTION from V_INVENTORY_ALL where CODE_SORT = 'DRILL' order by PART")
V.Local.sSQL.Set("select PART, DESCRIPTION from V_INVENTORY_ALL where CODE_SORT IN (Select UCase(Sort_Code) From GCG_5364_SORT_MAINT Where UCASE(Status) = 'NON-WORK ORDER DRILL')")
F.Intrinsic.UI.SetBrowserHotTypeAhead(True)
F.Intrinsic.UI.Browser("Drill Code","con",V.Local.sSQL,"Drill Code*!*Description","30*!*70",V.Local.sRet)
F.Intrinsic.Control.If(V.Local.sRet,<>,"***CANCEL***")
	F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)
	F.Data.DataTable.SetValue("dtMain",V.Args.iRowID,"DRILL_CODE",V.Local.sRet(0).trim)
	F.Intrinsic.String.Build("select AMT_PRICE from V_INVENTORY_ALL where PART = '{0}'",V.Local.sRet(0).trim,V.Local.sSQL)
	F.ODBC.Connection!con.OpenLocalRecordsetRO("rstSel",V.Local.sSQL)
	F.Intrinsic.Control.If(V.ODBC.con!rstSel.EOF,=,False)
		F.Data.DataTable.SetValue("dtMain",V.Args.iRowID,"DRILL_PRICE",V.ODBC.con!rstSel.FieldValFloat!AMT_PRICE)
	F.Intrinsic.Control.EndIf
	F.ODBC.con!rstSel.Close

	F.Intrinsic.Control.CallSub(setallcalculations,"iRowID",V.Args.iRowID)

F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(setextension,"iRowID",V.Args.iRowID)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("DrillCodeBrowser_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
		F.ODBC.Connection!con.Close
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.End
Function.Intrinsic.Control.EndIf
Program.Sub.DrillCodeBrowser.End

Program.Sub.NotesBrowser.Start
F.Intrinsic.Control.SetErrorHandler("NotesBrowser_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.sRet.Declare
V.Local.sSQL.Declare

V.Local.sSQL.Set("select TEXT from V_TEXT_CODES")
F.Intrinsic.UI.SetBrowserHotTypeAhead(True)
F.Intrinsic.UI.Browser("Notes","con",V.Local.sSQL,"Notes","100",V.Local.sRet)
F.Intrinsic.Control.If(V.Local.sRet,<>,"***CANCEL***")
	F.Intrinsic.String.Replace(V.Local.sRet,"*!*","",V.Local.sRet)
	F.Data.DataTable.SetValue("dtMain",V.Args.iRowID,"NOTES",V.Local.sRet.Trim)
F.Intrinsic.Control.EndIf

Gui.f_Main.GsGcMain.ResumeLayout

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("NotesBrowser_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
		F.ODBC.Connection!con.Close
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.End
Function.Intrinsic.Control.EndIf
Program.Sub.NotesBrowser.End

Program.Sub.GsGcMain_CellValueChanged.Start
F.Intrinsic.Control.SetErrorHandler("GsGcMain_CellValueChanged_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.bPrice.Declare
V.Local.bState.Declare
V.Local.fLength.Declare
V.Local.fPrice.Declare
V.Local.fWidth.Declare
V.Local.iColumn.Declare
V.Local.sFinish.Declare
V.Local.sMatl.Declare
V.Local.sPart.Declare
V.Local.sRet.Declare
V.Local.sSel.Declare
V.Local.sSQL.Declare
v.Local.iCol.Declare


V.Local.bPrice.Set(False)

F.Intrinsic.Control.SelectCase(V.Args.Column.UCase)

	F.Intrinsic.Control.Case("ConvertUOM")
		F.Intrinsic.String.Build("select * from V_INVENTORY_ALL where PART = '{0}' and UCASE(CODE_SORT) IN (Select UCase(Sort_Code) From GCG_5364_SORT_MAINT Where UCASE(Status) = 'DOOR')",V.DataTable.dtMain(V.Args.RowIndex).PART_CODE!FieldValTrim,V.Local.sSQL)
		F.ODBC.Connection!con.OpenLocalRecordsetRO("rstPart",V.Local.sSQL)
		F.Intrinsic.Control.If(V.ODBC.con!rstPart.EOF,=,False)
			V.Local.bPrice.Set(True)
		
			f.Intrinsic.Control.If(V.DataTable.dtMain(V.Args.RowIndex).ConvertUOM!FieldVal,=,"MM")
				F.Intrinsic.Control.If(V.DataTable.dtMain(V.Args.RowIndex).ACTwidth!FieldValFloat,>,0)
					F.Intrinsic.Math.Div(V.DataTable.dtMain(V.Args.RowIndex).ACTWIDTH!FieldValFloat,25.4,V.Local.fWidth)
					F.Intrinsic.Math.Round(V.Local.fWidth,3,V.Local.fWidth)
					F.Data.DataTable.SetValue("dtMain",V.Args.RowIndex,"WIDTH",V.Local.fWidth)
				f.Intrinsic.Control.Else
					F.Data.DataTable.SetValue("dtMain",V.Args.RowIndex,"WIDTH",V.DataTable.dtMain(V.Args.RowIndex).ACTWIDTH!FieldValFloat)
				f.Intrinsic.Control.EndIf
				
				F.Intrinsic.Control.If(V.DataTable.dtMain(V.Args.RowIndex).ACTLENGTH!FieldValFloat,>,0)
					F.Intrinsic.Math.Div(V.DataTable.dtMain(V.Args.RowIndex).ACTLENGTH!FieldValFloat,25.4,V.Local.fLENGTH)
					F.Intrinsic.Math.Round(V.Local.fLENGTH,3,V.Local.fLENGTH)
					F.Data.DataTable.SetValue("dtMain",V.Args.RowIndex,"LENGTH",V.Local.fLENGTH)
				f.Intrinsic.Control.Else
					F.Data.DataTable.SetValue("dtMain",V.Args.RowIndex,"LENGTH",V.DataTable.dtMain(V.Args.RowIndex).ACTLENGTH!FieldValFloat)
				f.Intrinsic.Control.EndIf
				
			f.Intrinsic.Control.Else
				F.Data.DataTable.SetValue("dtMain",V.Args.RowIndex,"LENGTH",V.DataTable.dtMain(V.Args.RowIndex).ACTLENGTH!FieldValFloat)
				F.Data.DataTable.SetValue("dtMain",V.Args.RowIndex,"WIDTH",V.DataTable.dtMain(V.Args.RowIndex).ACTWIDTH!FieldValFloat)
			f.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf
		F.ODBC.con!rstPart.Close
		
		F.Intrinsic.Control.CallSub(setallcalculations,"iRowID",V.Args.RowIndex)

	F.Intrinsic.Control.Case("PRICE_SF")
'		F.Intrinsic.String.Build("select * from V_INVENTORY_ALL where PART = '{0}' and UCASE(CODE_SORT) IN (Select UCase(Sort_Code) From GCG_5364_SORT_MAINT Where UCASE(Status) = 'DOOR')",V.DataTable.dtMain(V.Args.RowIndex).PART_CODE!FieldValTrim,V.Local.sSQL)
		F.Intrinsic.String.Build("select * from V_INVENTORY_ALL where PART = '{0}' and UCASE(CODE_SORT) IN (Select UCase(Sort_Code) From GCG_5364_SORT_MAINT Where UCASE(Status) = 'DOOR' OR UCASE(Status) like 'NON-DOOR%')",V.DataTable.dtMain(V.Args.RowIndex).PART_CODE!FieldValTrim,V.Local.sSQL)
		F.ODBC.Connection!con.OpenLocalRecordsetRO("rstPart",V.Local.sSQL)
'		Function.Intrinsic.Debug.InvokeDebugger
'		Function.Intrinsic.Debug.Stop
'		
		F.Intrinsic.Control.If(V.ODBC.con!rstPart.EOF,=,False)
			V.Local.bPrice.Set(True)
			F.Data.DataTable.SetValue("dtMain",V.Args.RowIndex,"MANUAL_PRICE",True)
			F.Intrinsic.Control.If(V.DataTable.dtMain(V.Args.RowIndex).Square_Ft!FieldValFloat,>,1.5)
				F.Intrinsic.Math.Mult(V.DataTable.dtMain(V.Args.RowIndex).LENGTH!FieldValFloat,V.DataTable.dtMain(V.Args.RowIndex).WIDTH!FieldValFloat,V.DataTable.dtMain(V.Args.RowIndex).PRICE_SF!FieldVal,V.Local.fPrice)
				F.Intrinsic.Math.Div(V.Local.fPrice,144,V.Local.fPrice)
			F.Intrinsic.Control.Else
				F.Intrinsic.Math.Mult(1.5,V.DataTable.dtMain(V.Args.RowIndex).PRICE_SF!FieldVal,V.Local.fPrice)
			F.Intrinsic.Control.EndIf
			
			F.Intrinsic.Math.Add(V.Local.fPrice,V.DataTable.dtMain(V.Args.RowIndex).DRILL_PRICE!FieldValFloat,V.Local.fPrice)
			F.Data.DataTable.SetValue("dtMain",V.Args.RowIndex,"COST",V.Local.fPrice)
		F.Intrinsic.Control.Else
			F.Data.DataTable.SetValue("dtMain",V.Args.RowIndex,"MANUAL_PRICE",True,"Cost",V.DataTable.dtMain(V.Args.RowIndex).PRICE_SF!FieldVal)
		F.Intrinsic.Control.EndIf
		F.ODBC.con!rstPart.Close
		
	F.Intrinsic.Control.Case("COST")
'		F.Intrinsic.String.Build("select * from V_INVENTORY_ALL where PART = '{0}' and UCASE(CODE_SORT) IN (Select UCase(Sort_Code) From GCG_5364_SORT_MAINT Where UCASE(Status) = 'DOOR')",V.DataTable.dtMain(V.Args.RowIndex).PART_CODE!FieldValTrim,V.Local.sSQL)
		F.Intrinsic.String.Build("select * from V_INVENTORY_ALL where PART = '{0}' and UCASE(CODE_SORT) IN (Select UCase(Sort_Code) From GCG_5364_SORT_MAINT Where UCASE(Status) = 'DOOR' OR UCASE(Status) like 'NON-DOOR%')",V.DataTable.dtMain(V.Args.RowIndex).PART_CODE!FieldValTrim,V.Local.sSQL)
		F.ODBC.Connection!con.OpenLocalRecordsetRO("rstPart",V.Local.sSQL)
		F.Intrinsic.Control.If(V.ODBC.con!rstPart.EOF,=,False)
			V.Local.bPrice.Set(True)
			F.Data.DataTable.SetValue("dtMain",V.Args.RowIndex,"MANUAL_PRICE",True)
		F.Intrinsic.Control.Else
			F.Data.DataTable.SetValue("dtMain",V.Args.RowIndex,"MANUAL_PRICE",True,"Price_SF",V.DataTable.dtMain(V.Args.RowIndex).Cost!FieldVal)
		F.Intrinsic.Control.EndIf
		F.ODBC.con!rstPart.Close
		
	F.Intrinsic.Control.Case("PART_CODE")

		V.Local.bPrice.Set(True)
'		F.Intrinsic.String.Build("select * from V_INVENTORY_ALL where PART = '{0}' and CODE_SORT = 'PART'",V.DataTable.dtMain(V.Args.RowIndex).PART_CODE!FieldValTrim,V.Local.sSQL)
'		F.Intrinsic.String.Build("select * from V_INVENTORY_ALL where PART = '{0}' and UCASE(CODE_SORT) IN (Select UCase(Sort_Code) From GCG_5364_SORT_MAINT Where UCASE(Status) = 'DOOR')",V.DataTable.dtMain(V.Args.RowIndex).PART_CODE!FieldValTrim,V.Local.sSQL)
		F.Intrinsic.String.Build("select * from V_INVENTORY_ALL where PART = '{0}' and UCASE(CODE_SORT) IN (Select UCase(Sort_Code) From GCG_5364_SORT_MAINT Where UCASE(Status) = 'DOOR' OR UCASE(Status) like 'NON-DOOR%')",V.DataTable.dtMain(V.Args.RowIndex).PART_CODE!FieldValTrim,V.Local.sSQL)
		F.ODBC.Connection!con.OpenLocalRecordsetRO("rstSel",V.Local.sSQL)
		F.Intrinsic.Control.If(V.ODBC.con!rstSel.EOF,=,False)
			V.Local.sPart.Set(V.ODBC.con!rstSel.FieldValTrim!PART)
			F.Data.DataTable.SetValue("dtMain",V.Args.RowIndex,"PART_CODE",V.Local.sPart,"DESCRIPTION",V.ODBC.con!rstSel.FieldValTrim!DESCRIPTION,"PRICE_PART",V.ODBC.con!rstSel.FieldValFloat!AMT_PRICE,"PL",V.ODBC.con!rstSel.FieldValTrim!PRODUCT_LINE)
			F.Intrinsic.Math.Mult(V.ODBC.con!rstSel.FieldValFloat!LENGTH,12,V.Local.fLength)
			F.Intrinsic.Math.Mult(V.ODBC.con!rstSel.FieldValFloat!WIDTH,12,V.Local.fWidth)
			F.ODBC.con!rstSel.Close
			
			F.Intrinsic.String.Build("select IF(UPPER(USER2) = '1',convert('1',SQL_Bit),convert('0',SQL_Bit)) as 'USER2', IF(UPPER(USER3) = 'TRUE',convert('1',SQL_Bit),convert('0',SQL_Bit)) as 'USER3', USER4 from INV_EXTRA where PART = '{0}'",V.Local.sPart,V.Local.sSQL)
			F.ODBC.Connection!con.OpenLocalRecordsetRO("rstSel",V.Local.sSQL)
			F.Intrinsic.Control.If(V.ODBC.con!rstSel.EOF,=,False)
				F.Data.DataTable.SetValue("dtMain",V.Args.RowIndex,"WGRAIN",V.ODBC.con!rstSel.FieldValTrim!USER2)
				F.Data.DataTable.SetValue("dtMain",V.Args.RowIndex,"EXPORT",V.ODBC.con!rstSel.FieldValTrim!USER3)
				F.Data.DataTable.SetValue("dtMain",V.Args.RowIndex,"MCCODE",V.ODBC.con!rstSel.FieldValTrim!USER4)
			F.Intrinsic.Control.EndIf
			F.ODBC.con!rstSel.Close

			F.Intrinsic.String.Build("select IF(TAX_EXEMPT_FLG = 'Y',convert('0',SQL_BIT),convert('1',SQL_BIT)) as TAXABLE from INVENTORY_MST3 where PART = '{0}'",V.Local.sPart,V.Local.sSQL)
			F.ODBC.Connection!con.OpenLocalRecordsetRO("rstSel",V.Local.sSQL)
			F.Intrinsic.Control.If(V.ODBC.con!rstSel.EOF,=,False)
				F.Data.DataTable.SetValue("dtMain",V.Args.RowIndex,"TAXABLE",V.ODBC.con!rstSel.FieldVal!TAXABLE)
			F.Intrinsic.Control.EndIf

			F.Intrinsic.Control.If(V.DataTable.dtMain(V.Args.RowIndex).PL!FieldValTrim,=,"MM")
				'Set the length and width
				F.Data.DataTable.SetValue("dtMain",V.Args.RowIndex,"ACTLENGTH",V.Local.fLength,"ACTWIDTH",V.Local.fWidth)
				F.Data.DataTable.SetValue("dtMain",V.Args.RowIndex,"LENGTH",V.Local.fLength,"WIDTH",V.Local.fWidth)
				V.Local.bState.Set(True)
			F.Intrinsic.Control.Else
				V.Local.bState.Set(False)
			F.Intrinsic.Control.EndIf
			'Set the length and width cells to locked or unlocked
			gui.f_Main.GsGcMain.GetColumnIndexByName("gvMain","ACTLENGTH",V.Local.iColumn)
			gui.f_Main.GsGcMain.SetCellProperty("gvMain",V.Local.iColumn,V.Args.RowIndex,"Locked",V.Local.bState)
			gui.f_Main.GsGcMain.GetColumnIndexByName("gvMain","ACTWIDTH",V.Local.iColumn)
			gui.f_Main.GsGcMain.SetCellProperty("gvMain",V.Local.iColumn,V.Args.RowIndex,"Locked",V.Local.bState)

			F.Intrinsic.Control.CallSub(setallcalculations,"iRowID",V.Args.RowIndex)

'			F.Intrinsic.Control.CallSub(setinsert,"iRowID",V.Args.RowIndex)
			F.Intrinsic.Control.CallSub(validatewoodgrain,"iRowID",V.Args.RowIndex)
		F.Intrinsic.Control.ElseIf(V.DataTable.dtMain(V.Args.RowIndex).PART_CODE!FieldValTrim,=,"")
		F.Intrinsic.Control.Else
			F.Intrinsic.UI.Msgbox("Part Code Does Not Exist","Order Entry")
		F.Intrinsic.Control.EndIf
		F.ODBC.con!rstSel.Close

	F.Intrinsic.Control.Case("FINISH")
		V.Local.bPrice.Set(True)
'		F.Intrinsic.String.Build("select * from V_INVENTORY_ALL where PART = '{0}' and UCASE(CODE_SORT) IN (Select UCase(Sort_Code) From GCG_5364_SORT_MAINT Where UCASE(Status) = 'DOOR')",V.DataTable.dtMain(V.Args.RowIndex).PART_CODE!FieldValTrim,V.Local.sSQL)
		F.Intrinsic.String.Build("select * from V_INVENTORY_ALL where PART = '{0}' and UCASE(CODE_SORT) IN (Select UCase(Sort_Code) From GCG_5364_SORT_MAINT Where UCASE(Status) = 'DOOR' OR UCASE(Status) like 'NON-DOOR%')",V.DataTable.dtMain(V.Args.RowIndex).PART_CODE!FieldValTrim,V.Local.sSQL)
		F.ODBC.Connection!con.OpenLocalRecordsetRO("rstPart",V.Local.sSQL)
		F.Intrinsic.Control.If(V.ODBC.con!rstPart.EOF,=,False)
		
			F.Intrinsic.Control.If(V.DataTable.dtMain(V.Args.RowIndex).FINISH!FieldValTrim,=,"")
				F.Data.DataTable.SetValue("dtMain",V.Args.RowIndex,"PRICE_FINISH",0)
				F.Intrinsic.Control.CallSub(setallcalculations,"iRowID",V.Args.RowIndex)
			F.Intrinsic.Control.ElseIf(V.DataTable.dtMain(V.Args.RowIndex).FINISH!FieldValTrim,<>,"")
			
'				F.Intrinsic.String.Build("select * from V_INVENTORY_ALL where PART = '{0}' and CODE_SORT = 'FINISH'",V.DataTable.dtMain(V.Args.RowIndex).FINISH!FieldValTrim,V.Local.sSQL)
'				F.Intrinsic.String.Build("select * from V_INVENTORY_ALL where PART = '{0}' and UCASE(CODE_SORT) IN (Select UCase(Sort_Code) From GCG_5364_SORT_MAINT Where UCASE(Status) = 'NON-WORK ORDER FINISH')",V.DataTable.dtMain(V.Args.RowIndex).FINISH!FieldValTrim,V.Local.sSQL)

				F.Intrinsic.String.Build("select * from V_INVENTORY_ALL where PART = '{0}'",V.DataTable.dtMain(V.Args.RowIndex).FINISH!FieldValTrim,V.Local.sSQL)
				
				F.ODBC.Connection!con.OpenLocalRecordsetRO("rstSel",V.Local.sSQL)
				F.Intrinsic.Control.If(V.ODBC.con!rstSel.EOF,=,False)
					V.Local.sFinish.Set(V.ODBC.con!rstSel.FieldValTrim!PART)
		
					'UPDATE THE PRICE PER SF
					F.Data.DataTable.SetValue("dtMain",V.Args.RowIndex,"PRICE_FINISH",V.ODBC.con!rstSel.FieldValFloat!AMT_PRICE)
		
					F.Intrinsic.Control.CallSub(setallcalculations,"iRowID",V.Args.RowIndex)
				
				F.Intrinsic.Control.Else
					F.Intrinsic.UI.Msgbox("Finish Code Does Not Exist","Order Entry")
					F.Data.DataTable.SetValue("dtMain",V.Args.RowIndex,"PRICE_FINISH",0)
					F.Intrinsic.Control.CallSub(setallcalculations,"iRowID",V.Args.RowIndex)
				F.Intrinsic.Control.EndIf
				F.ODBC.con!rstSel.Close
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf
		
		F.ODBC.con!rstPart.Close
		
	F.Intrinsic.Control.Case("DRILL_CODE")
'		F.Intrinsic.String.Build("select * from V_INVENTORY_ALL where PART = '{0}' and UCASE(CODE_SORT) IN (Select UCase(Sort_Code) From GCG_5364_SORT_MAINT Where UCASE(Status) = 'DOOR')",V.DataTable.dtMain(V.Args.RowIndex).PART_CODE!FieldValTrim,V.Local.sSQL)
		F.Intrinsic.String.Build("select * from V_INVENTORY_ALL where PART = '{0}' and UCASE(CODE_SORT) IN (Select UCase(Sort_Code) From GCG_5364_SORT_MAINT Where UCASE(Status) = 'DOOR' OR UCASE(Status) like 'NON-DOOR%')",V.DataTable.dtMain(V.Args.RowIndex).PART_CODE!FieldValTrim,V.Local.sSQL)
		F.ODBC.Connection!con.OpenLocalRecordsetRO("rstPart",V.Local.sSQL)
		F.Intrinsic.Control.If(V.ODBC.con!rstPart.EOF,=,False)
			V.Local.bPrice.Set(True)
			
			F.Intrinsic.Control.If(V.DataTable.dtMain(V.Args.RowIndex).DRILL_CODE!FieldValTrim,=,"")
				F.Data.DataTable.SetValue("dtMain",V.Args.RowIndex,"DRILL_PRICE",0)
	
			F.Intrinsic.Control.Else
'				F.Intrinsic.String.Build("select * from V_INVENTORY_ALL where PART = '{0}' and CODE_SORT = 'DRILL'",V.DataTable.dtMain(V.Args.RowIndex).DRILL_CODE!FieldValTrim,V.Local.sSQL)
'				F.Intrinsic.String.Build("select * from V_INVENTORY_ALL where PART = '{0}' and CODE_SORT IN (Select UCase(Sort_Code) From GCG_5364_SORT_MAINT Where UCASE(Status) = 'NON-WORK ORDER DRILL')",V.DataTable.dtMain(V.Args.RowIndex).DRILL_CODE!FieldValTrim,V.Local.sSQL)
				F.Intrinsic.String.Build("select * from V_INVENTORY_ALL where PART = '{0}'",V.DataTable.dtMain(V.Args.RowIndex).DRILL_CODE!FieldValTrim,V.Local.sSQL)
				F.ODBC.Connection!con.OpenLocalRecordsetRO("rstSel",V.Local.sSQL)
				F.Intrinsic.Control.If(V.ODBC.con!rstSel.EOF,=,False)
					F.Data.DataTable.SetValue("dtMain",V.Args.RowIndex,"DRILL_PRICE",V.ODBC.con!rstSel.FieldValFloat!AMT_PRICE)
				F.Intrinsic.Control.ElseIf(V.DataTable.dtMain(V.Args.RowIndex).DRILL_CODE!FieldValTrim,=,"")
				F.Intrinsic.Control.Else
					F.Intrinsic.UI.Msgbox("Drill Code Does Not Exist","Order Entry")
					F.Data.DataTable.SetValue("dtMain",V.Args.RowIndex,"DRILL_PRICE",0)
				F.Intrinsic.Control.EndIf
				F.ODBC.con!rstSel.Close
			F.Intrinsic.Control.EndIf
	
			F.Intrinsic.Control.CallSub(setallcalculations,"iRowID",V.Args.RowIndex)
		F.Intrinsic.Control.EndIf
		F.ODBC.con!rstPart.Close
		
	F.Intrinsic.Control.Case("MATL")
		F.Intrinsic.String.Build("select * from V_INVENTORY_ALL where PART = '{0}' and UCASE(CODE_SORT) IN (Select UCase(Sort_Code) From GCG_5364_SORT_MAINT Where UCASE(Status) = 'DOOR' OR UCASE(Status) like 'NON-DOOR%')",V.DataTable.dtMain(V.Args.RowIndex).PART_CODE!FieldValTrim,V.Local.sSQL)
		F.ODBC.Connection!con.OpenLocalRecordsetRO("rstPart",V.Local.sSQL)
		F.Intrinsic.Control.If(V.ODBC.con!rstPart.EOF,=,False)
			V.Local.bPrice.Set(True)
'			F.Intrinsic.String.Build("select * from V_INVENTORY_ALL where PART = '{0}' and CODE_SORT = 'MATERIAL'",V.DataTable.dtMain(V.Args.RowIndex).MATL!FieldValTrim,V.Local.sSQL)
'			F.Intrinsic.String.Build("select * from V_INVENTORY_ALL where PART = '{0}' and UCASE(CODE_SORT) IN (Select UCase(Sort_Code) From GCG_5364_SORT_MAINT Where UCASE(Status) = 'NON-WORK ORDER MATERIAL')",V.DataTable.dtMain(V.Args.RowIndex).MATL!FieldValTrim,V.Local.sSQL)
			F.Intrinsic.String.Build("select * from V_INVENTORY_ALL where PART = '{0}'",V.DataTable.dtMain(V.Args.RowIndex).MATL!FieldValTrim,V.Local.sSQL)
			
			F.ODBC.Connection!con.OpenLocalRecordsetRO("rstSel",V.Local.sSQL)
			F.Intrinsic.Control.If(V.ODBC.con!rstSel.EOF,=,False)
				V.Local.sMatl.Set(V.ODBC.con!rstSel.FieldValTrim!PART)
				'UPDATE THE PRICE PER SF
				F.Data.DataTable.SetValue("dtMain",V.Args.RowIndex,"PRICE_MATL",V.ODBC.con!rstSel.FieldValFloat!AMT_PRICE)
				F.Data.DataTable.SetValue("dtMain",V.Args.RowIndex,"WEIGHT_MATL",V.ODBC.con!rstSel.FieldValFloat!LBS)
	
				F.Intrinsic.Control.CallSub(setallcalculations,"iRowID",V.Args.RowIndex)
	
				F.Intrinsic.Control.CallSub(validatewoodgrain,"iRowID",V.Args.RowIndex)
			F.Intrinsic.Control.ElseIf(V.DataTable.dtMain(V.Args.RowIndex).MATL!FieldValTrim,=,"")
			F.Intrinsic.Control.Else
				F.Intrinsic.UI.Msgbox("Material Code Does Not Exist","Order Entry")
				F.Data.DataTable.SetValue("dtMain",V.Args.RowIndex,"MATL","")
				F.ODBC.con!rstSel.Close
				F.ODBC.con!rstPart.Close
				f.Intrinsic.Control.ExitSub
			F.Intrinsic.Control.EndIf
			F.ODBC.con!rstSel.Close
			
		F.Intrinsic.Control.EndIf
		
		F.ODBC.con!rstPart.Close
	
	F.Intrinsic.Control.Case("EXPORT")
		V.Local.bState.Set(True)
	F.Intrinsic.Control.Case("WGRAIN")
		V.Local.bState.Set(True)
	F.Intrinsic.Control.Case("LENGTH")
		V.Local.bPrice.Set(True)
		F.Intrinsic.Control.CallSub(validatelength,"iRowID",V.Args.RowIndex)
		F.Intrinsic.Control.CallSub(setallcalculations,"iRowID",V.Args.RowIndex)
	F.Intrinsic.Control.Case("WIDTH")
		V.Local.bPrice.Set(True)
		F.Intrinsic.Control.CallSub(validatewidth,"iRowID",V.Args.RowIndex)
		F.Intrinsic.Control.CallSub(setallcalculations,"iRowID",V.Args.RowIndex)
	F.Intrinsic.Control.Case("ACTLENGTH")
		f.Intrinsic.Control.If(V.DataTable.dtMain(V.Args.RowIndex).ConvertUOM!FieldVal,<>,"MM")
			F.Data.DataTable.SetValue("dtMain",V.Args.RowIndex,"LENGTH",V.DataTable.dtMain(V.Args.RowIndex).ACTLength!FieldValFloat)
		f.Intrinsic.Control.Else
			F.Intrinsic.Math.Div(V.DataTable.dtMain(V.Args.RowIndex).ACTLength!FieldValFloat,25.4,V.Local.fLength)
			F.Intrinsic.Math.Round(V.Local.fLength,3,V.Local.fLength)
			F.Data.DataTable.SetValue("dtMain",V.Args.RowIndex,"LENGTH",V.Local.fLength)
		f.Intrinsic.Control.EndIf
		
		V.Local.bPrice.Set(True)
		gui.f_Main.GsGcMain.GetColumnIndexByName("gvMain","ACTLENGTH",V.Local.iColumn)
		F.Intrinsic.Control.CallSub(validatelength,"iRowID",V.Args.RowIndex,"iColID",V.Local.iColumn)
		F.Intrinsic.Control.CallSub(setallcalculations,"iRowID",V.Args.RowIndex)
	F.Intrinsic.Control.Case("ACTWIDTH")

		f.Intrinsic.Control.If(V.DataTable.dtMain(V.Args.RowIndex).ConvertUOM!FieldVal,<>,"MM")
			F.Data.DataTable.SetValue("dtMain",V.Args.RowIndex,"WIDTH",V.DataTable.dtMain(V.Args.RowIndex).ACTWIDTH!FieldValFloat)
		f.Intrinsic.Control.Else
			F.Intrinsic.Math.Div(V.DataTable.dtMain(V.Args.RowIndex).ACTWIDTH!FieldValFloat,25.4,V.Local.fWidth)
			F.Intrinsic.Math.Round(V.Local.fWidth,3,V.Local.fWidth)
			F.Data.DataTable.SetValue("dtMain",V.Args.RowIndex,"WIDTH",V.Local.fWidth)
		f.Intrinsic.Control.EndIf
'			
		V.Local.bPrice.Set(True)
		gui.f_Main.GsGcMain.GetColumnIndexByName("gvMain","ACTWidth",V.Local.iColumn)
		F.Intrinsic.Control.CallSub(validatewidth,"iRowID",V.Args.RowIndex,"iColID",V.Local.iColumn)
		F.Intrinsic.Control.CallSub(setallcalculations,"iRowID",V.Args.RowIndex)
'	F.Intrinsic.Control.Case("INSERT_1")
'		V.Local.bPrice.Set(True)
'		F.Intrinsic.String.Build("DESCRIPTION = '{0}'",V.DataTable.dtMain(V.Args.RowIndex).INSERT_1!FieldValTrim,V.Local.sSel)
'		F.Data.DataTable.Select("dtInsertPur",V.Local.sSel,V.Local.sRet)
'		F.Intrinsic.Control.If(V.Local.sRet,<>,"***NORETURN***")
'			F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)
'			F.Data.DataTable.SetValue("dtMain",V.Args.RowIndex,"INSERT_PN",V.DataTable.dtInsertPur(V.Local.sRet(0)).PART!FieldValTrim)
'		F.Intrinsic.Control.EndIf

	F.Intrinsic.Control.Case("ATTN_ID")
		V.Local.bState.Set(True)
	F.Intrinsic.Control.CaseElse
		V.Local.bPrice.Set(True)
		F.Intrinsic.Control.CallSub(setallcalculations,"iRowID",V.Args.RowIndex)
		
F.Intrinsic.Control.EndSelect

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("GsGcMain_CellValueChanged_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
		F.ODBC.Connection!con.Close
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.End
Function.Intrinsic.Control.EndIf
Program.Sub.GsGcMain_CellValueChanged.End

Program.Sub.SetPrice_SF_Calc.Start
F.Intrinsic.Control.SetErrorHandler("SetPrice_SF_Calc_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.fValue.Declare
V.Local.iRow.Declare

V.Local.iRow.Set(V.Args.iRowID)
F.Intrinsic.Control.If(V.DataTable.dtMain(V.Local.iRow).PL!FieldValTrim,=,"MM")
	'Everything in the MM product line will be calculated at 1 sf
	F.Intrinsic.Math.Mult(V.DataTable.dtMain(V.Local.iRow).LENGTH!FieldValFloat,V.DataTable.dtMain(V.Local.iRow).WIDTH!FieldValFloat,V.Local.fValue)
	F.Intrinsic.Math.Div(V.Local.fValue,144,V.Local.fValue)
	F.Intrinsic.Math.Mult(V.DataTable.dtMain(V.Local.iRow).PRICE_FINISH!FieldValFloat,V.Local.fValue,V.Local.fValue)
	F.Intrinsic.Math.Add(V.DataTable.dtMain(V.Local.iRow).PRICE_PART!FieldValFloat,V.Local.fValue,V.Local.fValue)
F.Intrinsic.Control.Else
	F.Intrinsic.Math.Add(V.DataTable.dtMain(V.Local.iRow).PRICE_MATL!FieldValFloat,V.DataTable.dtMain(V.Local.iRow).PRICE_PART!FieldValFloat,V.DataTable.dtMain(V.Local.iRow).PRICE_FINISH!FieldValFloat,V.Local.fValue)
F.Intrinsic.Control.EndIf
F.Intrinsic.Math.Round(V.Local.fValue,2,V.Local.fValue)
F.Data.DataTable.SetValue("dtMain",V.Local.iRow,"PRICE_SF_CALC",V.Local.fValue)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("SetPrice_SF_Calc_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
		F.ODBC.Connection!con.Close
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.End
Function.Intrinsic.Control.EndIf
Program.Sub.SetPrice_SF_Calc.End

Program.Sub.SetSquare_FT.Start
F.Intrinsic.Control.SetErrorHandler("SetSquare_FT_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.fValue.Declare
V.Local.iRow.Declare

V.Local.iRow.Set(V.Args.iRowID)

F.Intrinsic.Control.If(V.DataTable.dtMain(V.Local.iRow).PL!FieldValTrim,=,"MM")
	'Everything in the MM product line will be calculated at 1 sf
	V.Local.fValue.Set(1)
F.Intrinsic.Control.Else
	F.Intrinsic.Math.Mult(V.DataTable.dtMain(V.Local.iRow).LENGTH!FieldValFloat,V.DataTable.dtMain(V.Local.iRow).WIDTH!FieldValFloat,V.Local.fValue)
	F.Intrinsic.Math.Div(V.Local.fValue,144,V.Local.fValue)
	F.Intrinsic.Math.Round(V.Local.fValue,2,V.Local.fValue)
F.Intrinsic.Control.EndIf
F.Data.DataTable.SetValue("dtMain",V.Local.iRow,"SQUARE_FT",V.Local.fValue)
F.Intrinsic.Math.Mult(V.Local.fValue,3,V.Local.fValue)
F.Data.DataTable.SetValue("dtMain",V.Local.iRow,"WEIGHT_MATL",V.Local.fValue)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("SetSquare_FT_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
		F.ODBC.Connection!con.Close
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.End
Function.Intrinsic.Control.EndIf
Program.Sub.SetSquare_FT.End

Program.Sub.SetSF_Cost.Start
F.Intrinsic.Control.SetErrorHandler("SetSF_Cost_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.fValue.Declare
V.Local.iRow.Declare

V.Local.iRow.Set(V.Args.iRowID)

F.Intrinsic.Math.Mult(V.DataTable.dtMain(V.Local.iRow).SQUARE_FT!FieldValFloat,V.DataTable.dtMain(V.Local.iRow).PRICE_SF_CALC!FieldValFloat,V.Local.fValue)
F.Intrinsic.Math.Round(V.Local.fValue,2,V.Local.fValue)
F.Data.DataTable.SetValue("dtMain",V.Local.iRow,"SF_COST",V.Local.fValue)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("SetSF_Cost_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
		F.ODBC.Connection!con.Close
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.End
Function.Intrinsic.Control.EndIf
Program.Sub.SetSF_Cost.End

Program.Sub.SetTotal_Cost.Start
F.Intrinsic.Control.SetErrorHandler("SetTotal_Cost_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.fValue.Declare
V.Local.iRow.Declare
V.Local.fLength.Declare
V.Local.iRow.Set(V.Args.iRowID)
		
'Minimum Charge is for 1.5 SF
F.Intrinsic.Control.If(V.DataTable.dtMain(V.Local.iRow).SQUARE_FT!FieldValFloat,>,1.5)
	F.Intrinsic.Math.Add(V.DataTable.dtMain(V.Local.iRow).SF_COST!FieldValFloat,V.DataTable.dtMain(V.Local.iRow).DRILL_PRICE!FieldValFloat,V.Local.fValue)
F.Intrinsic.Control.ElseIf(V.DataTable.dtMain(V.Local.iRow).PL!FieldValTrim,=,"MM")
	F.Intrinsic.Math.Add(V.DataTable.dtMain(V.Local.iRow).SF_COST!FieldValFloat,V.DataTable.dtMain(V.Local.iRow).DRILL_PRICE!FieldValFloat,V.Local.fValue)
F.Intrinsic.Control.Else

	V.Local.fLength.Set(V.DataTable.dtMain(V.Local.iRow).Length!FieldVal)
	f.Intrinsic.Control.If(V.Local.fLength,>,0)
		F.Intrinsic.Math.Mult(V.DataTable.dtMain(V.Local.iRow).PRICE_SF_CALC!FieldValFloat,1.5,V.Local.fValue)
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Math.Add(V.Local.fValue,V.DataTable.dtMain(V.Local.iRow).DRILL_PRICE!FieldValFloat,V.Local.fValue)
F.Intrinsic.Control.EndIf

F.Intrinsic.Math.Round(V.Local.fValue,2,V.Local.fValue)
F.Data.DataTable.SetValue("dtMain",V.Local.iRow,"TOTAL_COST",V.Local.fValue)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("SetTotal_Cost_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
		F.ODBC.Connection!con.Close
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.End
Function.Intrinsic.Control.EndIf

Program.Sub.SetTotal_Cost.End

Program.Sub.SetAllCalculations.Start
F.Intrinsic.Control.SetErrorHandler("SetAllCalculations_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.iRow.Declare

V.Local.iRow.Set(V.Args.iRowID)

F.Intrinsic.Control.CallSub(setprice_sf_calc,"iRowID",V.Local.iRow)
F.Intrinsic.Control.CallSub(setsquare_ft,"iRowID",V.Local.iRow)
F.Intrinsic.Control.CallSub(setsf_cost,"iRowID",V.Local.iRow)
F.Intrinsic.Control.CallSub(settotal_cost,"iRowID",V.Local.iRow)
F.Intrinsic.Control.If(V.DataTable.dtMain(V.Local.iRow).MANUAL_PRICE!FieldVal,=,False)
	F.Data.DataTable.SetValue("dtMain",V.Local.iRow,"COST",V.DataTable.dtMain(V.Local.iRow).TOTAL_COST!FieldValFloat)
	F.Data.DataTable.SetValue("dtMain",V.Local.iRow,"PRICE_SF",V.DataTable.dtMain(V.Local.iRow).PRICE_SF_CALC!FieldValFloat)
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.CallSub(setextension,"iRowID",V.Local.iRow)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("SetAllCalculations_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
		F.ODBC.Connection!con.Close
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.End
Function.Intrinsic.Control.EndIf
Program.Sub.SetAllCalculations.End

Program.Sub.SetExtension.Start
F.Intrinsic.Control.SetErrorHandler("SetExtension_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.fCost.Declare
V.Local.fDiscount.Declare
V.Local.fValue.Declare
V.Local.iRow.Declare
V.Local.fCosttemp.Declare

V.Local.iRow.Set(V.Args.iRowID)
F.Intrinsic.Math.Round(V.DataTable.dtMain(V.Local.iRow).COST!FieldValFloat,2,V.Local.fCost)
F.Data.DataTable.SetValue("dtMain",V.Local.iRow,"COST",V.Local.fCost)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("SetExtension_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
		F.ODBC.Connection!con.Close
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.End
Function.Intrinsic.Control.EndIf
Program.Sub.SetExtension.End

Program.Sub.Loadf_Macro.Start
F.Intrinsic.Control.SetErrorHandler("Loadf_Macro_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.iFor.Declare
V.Local.iRow.Declare
V.Local.sName.Declare
V.Local.sSQL.Declare
V.Local.sValue.Declare

V.Local.iRow.Set(V.Args.iRowID)

F.Intrinsic.Control.If(V.DataTable.dtMain(V.Local.iRow).PART_CODE!FieldValTrim,=,"")
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.String.Build("select * from INV_EXTRA where PART = '{0}'",V.DataTable.dtMain(V.Local.iRow).PART_CODE!FieldValTrim,V.Local.sSQL)
F.ODBC.Connection!con.OpenLocalRecordsetRO("rstSel",V.Local.sSQL)
F.Intrinsic.Control.If(V.ODBC.con!rstSel.EOF,=,True)
	F.Intrinsic.UI.Msgbox("No Macros Exist for this Part Code","Order Entry")
	F.ODBC.con!rstSel.Close
F.Intrinsic.Control.Else	
	F.Intrinsic.String.Build("select * from GAB_4483_OE_LN_MACRO where ORDER_NO = '{0}' and RECORD_NO = '{1}'",V.DataTable.dtMain(V.Local.iRow).ORDER_NO!FieldValTrim,V.DataTable.dtMain(V.Local.iRow).LINE!FieldValTrim,V.Local.sSQL)
	F.ODBC.Connection!con.OpenLocalRecordsetRO("rstRec",V.Local.sSQL)
	F.Intrinsic.Control.If(V.ODBC.con!rstRec.EOF,=,True)
		F.Data.DataTable.Create("MACRO",True)
		F.Data.DataTable.AddColumn("MACRO","NAME","STRING")
		F.Data.DataTable.AddColumn("MACRO","VALUE","STRING")
		F.Data.DataTable.AddColumn("MACRO","ORDER_NO","STRING")
		F.Data.DataTable.AddColumn("MACRO","RECORD_NO","STRING")
		F.Intrinsic.Control.For(V.Local.iFor,39,59,1)
			F.Intrinsic.Control.If(V.ODBC.con!rstSel.FieldValTrim!USER[V.Local.iFor],<>,"")
				F.Intrinsic.String.Build("select USER{0} from INV_EXTRA_TITLES",V.Local.iFor,V.Local.sSQL)
				F.ODBC.Connection!con.OpenLocalRecordsetRO("rstTitle",V.Local.sSQL)
				F.Intrinsic.Control.If(V.ODBC.con!rstTitle.EOF,=,False)
					V.Local.sName.Set(V.ODBC.con!rstTitle.FieldValTrim!USER[V.Local.iFor])
					V.Local.sValue.Set(V.ODBC.con!rstSel.FieldValTrim!USER[V.Local.iFor])
					F.Data.DataTable.AddRow("MACRO","NAME",V.Local.sName,"VALUE",V.Local.sValue,"ORDER_NO",V.DataTable.dtMain(V.Local.iRow).ORDER_NO!FieldValTrim,"RECORD_NO",V.DataTable.dtMain(V.Local.iRow).LINE!FieldValTrim)
				F.Intrinsic.Control.EndIf
				F.ODBC.con!rstTitle.Close
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.Next(V.Local.iFor)
	F.Intrinsic.Control.Else
		F.Data.DataTable.CreateFromSQL("MACRO","con",V.Local.sSQL,True)
	F.Intrinsic.Control.EndIf
	F.ODBC.con!rstRec.Close
	F.ODBC.con!rstSel.Close

	GUI.f_Macro.GsGcMacro.AddGridviewFromDatatable("gvMACRO","MACRO")

	GUI.f_Macro.GsGcMacro.SetGridviewProperty("gvMACRO","Editable",True)

	GUI.f_Macro.GsGcMacro.SetColumnProperty("gvMACRO","NAME","AllowEdit",False)
	GUI.f_Macro.GsGcMacro.SetColumnProperty("gvMACRO","VALUE","AllowEdit",True)
	GUI.f_Macro.GsGcMacro.SetColumnProperty("gvMACRO","NAME","ReadOnly",True)
	GUI.f_Macro.GsGcMacro.SetColumnProperty("gvMACRO","VALUE","ReadOnly",False)
	GUI.f_Macro.GsGcMacro.SetColumnProperty("gvMACRO","NAME","HeaderFontBold",True)
	GUI.f_Macro.GsGcMacro.SetColumnProperty("gvMACRO","VALUE","HeaderFontBold",True)
	GUI.f_Macro.GsGcMacro.SetColumnProperty("gvMACRO","NAME","HeaderBackColor","MediumSeaGreen")
	GUI.f_Macro.GsGcMacro.SetColumnProperty("gvMACRO","VALUE","HeaderBackColor","MediumSeaGreen")
	GUI.f_Macro.GsGcMacro.SetColumnProperty("gvMACRO","NAME","Caption","Name")
	GUI.f_Macro.GsGcMacro.SetColumnProperty("gvMACRO","VALUE","Caption","Value")
	GUI.f_Macro.GsGcMacro.SetColumnProperty("gvMACRO","NAME","TabStop",False)
	GUI.f_Macro.GsGcMacro.SetColumnProperty("gvMACRO","ORDER_NO","Visible",False)
	GUI.f_Macro.GsGcMacro.SetColumnProperty("gvMACRO","RECORD_NO","Visible",False)

	GUI.f_Macro.GsGcMacro.MainView("gvMACRO")

	GUI.f_Macro..Show
	Gui.f_Macro..AlwaysOnTop(True)
	Gui.f_Macro..AlwaysOnTop(False)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("Loadf_Macro_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
		F.ODBC.Connection!con.Close
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.End
Function.Intrinsic.Control.EndIf
Program.Sub.Loadf_Macro.End

Program.Sub.f_Macro_UnLoad.Start
F.Intrinsic.Control.SetErrorHandler("f_Macro_UnLoad_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)

F.Data.DataTable.DeleteRow("MACRO")
F.Data.DataTable.Close("MACRO")
GUI.f_Macro..Visible(False)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("f_Macro_UnLoad_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
		F.ODBC.Connection!con.Close
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.End
Function.Intrinsic.Control.EndIf
Program.Sub.f_Macro_UnLoad.End

Program.Sub.cmdMacroSave_Click.Start
F.Intrinsic.Control.SetErrorHandler("cmdMacroSave_Click_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)

F.Data.DataTable.SaveToDB("MACRO","con","GAB_4483_OE_LN_MACRO","ORDER_NO*!*RECORD_NO*!*NAME",256)

F.Data.DataTable.DeleteRow("MACRO")
F.Data.DataTable.Close("MACRO")
GUI.f_Macro..Visible(False)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("cmdMacroSave_Click_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
		F.ODBC.Connection!con.Close
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.End
Function.Intrinsic.Control.EndIf
Program.Sub.cmdMacroSave_Click.End

Program.Sub.cmdWeight_Click.Start
F.Intrinsic.Control.SetErrorHandler("cmdWeight_Click_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.fArea.Declare
V.Local.fLineArea.Declare
V.Local.fLineWeight.Declare
V.Local.fWeight.Declare
V.Local.iFor.Declare
V.Local.sMessage.Declare

F.Intrinsic.Control.For(V.Local.iFor,0,V.DataTable.dtMain.RowCount--,1)
	F.Intrinsic.Math.Mult(V.DataTable.dtMain(V.Local.iFor).QTY_ORDER!FieldValFloat,V.DataTable.dtMain(V.Local.iFor).SQUARE_FT!FieldValFloat,V.Local.fLineArea)
	F.Intrinsic.Math.Round(V.Local.fLineArea,2,V.Local.fLineArea)
	F.Intrinsic.Math.Add(V.Local.fLineArea,V.Local.fArea,V.Local.fArea)

	F.Intrinsic.Math.Mult(V.Local.fLineArea,V.DataTable.dtMain(V.Local.iFor).WEIGHT_MATL!FieldValFloat,V.Local.fLineWeight)
	F.Intrinsic.Math.Round(V.Local.fLineWeight,2,V.Local.fLineWeight)
	F.Intrinsic.Math.Add(V.Local.fLineWeight,V.Local.fWeight,V.Local.fWeight)
F.Intrinsic.Control.Next(V.Local.iFor)

F.Intrinsic.String.Build("Total Order Weight:  {0} pounds{1}Total Order Square Footage:  {2} square feet",V.Local.fWeight,V.Ambient.NewLine,V.Local.fArea,V.Local.sMessage)

F.Intrinsic.UI.Msgbox(V.Local.sMessage,"Order Entry")

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("cmdWeight_Click_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
		F.ODBC.Connection!con.Close
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.End
Function.Intrinsic.Control.EndIf
Program.Sub.cmdWeight_Click.End

Program.Sub.LoadPriceCategory.Start
F.Intrinsic.Control.SetErrorHandler("LoadPriceCategory_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.sSQL.Declare
V.Local.sOrder.Declare

F.Intrinsic.String.LPad(V.Passed.000005,"0",7,V.Local.sOrder)

F.Intrinsic.String.Build("select PD_DISC_1 from V_PRICE_CAT_DISC join v_ORDER_Header on Price_Category = PRICE_CATG where KEY_TYPE = 'PC'  and PRICING_METHOD = 'PD' and ORDER_NO = '{0}'",V.Local.sOrder,V.Local.sSQL)
F.ODBC.Connection!con.OpenLocalRecordsetRO("rstSel",V.Local.sSQL)
	F.Intrinsic.Control.If(V.ODBC.con!rstSel.EOF,=,FALSE)
		V.Global.fPriceCatDisc.Set(V.ODBC.con!rstSel.FieldValFloat!PD_DISC_1)
	F.Intrinsic.Control.EndIf
F.ODBC.con!rstSel.Close

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("LoadPriceCategory_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
		F.ODBC.Connection!con.Close
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.End
Function.Intrinsic.Control.EndIf
Program.Sub.LoadPriceCategory.End

Program.Sub.cmdSave_Click.Start
F.Intrinsic.Control.SetErrorHandler("cmdSave_Click_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
v.Local.sClmn.Declare
v.Local.sRet.Declare
V.Local.sFiledir.Declare
V.Local.sReturnCode.Declare
V.Local.i.Declare
V.Local.fTemp.Declare
V.Local.fExt.Declare
V.Local.sSql.Declare

Gui.f_Main.cmdSave.Enabled(False)

F.Intrinsic.UI.InvokeWaitDialog("Processing Order Data","Order Entry")
F.Intrinsic.Control.BlockEvents

F.Data.DataTable.RemoveColumn("dtMain","Tot_SF")

F.Data.DataTable.SaveToDB("dtMain","con","GCG_5364_OE_LINES","ORDER_NO*!*Record_no",256)

F.Intrinsic.String.Build("Select a.Order_NO, a.Order_Line, b.Date_Promise as Due_Date, ActLength as TotalLength, ActWidth as TotalWidth, b.Drill_Code, b.Finish, b.Fin_Desc, b.Matl, b.Matl_Desc as Mat_Desc From GCG_5364_Label_Data a join GCG_5364_OE_Lines b on a.Order_No = b.Order_No and a.Order_Line = b.Record_No Where a.Order_No = '{0}'",V.DataTable.dtMain(V.DataTable.dtMain.RowCount--).Order_NO!FieldValTrim,V.Local.sSql)

F.Data.DataTable.CreateFromSQL("Label","Con",V.Local.sSql,True)

F.Data.DataTable.SaveToDB("Label","con","GCG_5364_Label_Data","ORDER_NO*!*ORDER_LINE",256,"Order_NO@!@Order_NO*!*Order_Line@!@Order_Line*!*Due_Date@!@Due_Date*!*TotalLength@!@TotalLength*!*TotalWidth@!@TotalWidth*!*Drill_Code@!@Drill_Code*!*Finish@!@Finish*!*Fin_Desc@!@Fin_Desc*!*Matl@!@Matl*!*Mat_Desc@!@Mat_Desc")
F.Data.DataTable.Close("Label")

F.Data.DataTable.AcceptChanges("dtMain")

F.Data.DataTable.AddColumn("dtMain","lType","string","L")
F.Data.DataTable.AddColumn("dtMain","dmyclmn","string","")
F.Data.DataTable.AddColumn("dtMain","COST_1","string","")
F.Data.DataTable.AddColumn("dtMain","PRICE_SF_1","string","")

'v.Local.sClmn.Set("lType*!*ORDER_NO*!*Lno*!*dmyclmn*!*dmyclmn*!*dmyclmn*!*COST_1*!*PRICE_SF_1*!*DESCRIPTION*!*dmyclmn*!*dmyclmn*!*dmyclmn*!*dmyclmn*!*dmyclmn*!*discount*!*dmyclmn*!*dmyclmn*!*dmyclmn*!*dmyclmn*!*dmyclmn*!*dmyclmn*!*dmyclmn")
v.Local.sClmn.Set("lType*!*ORDER_NO*!*Lno*!*dmyclmn*!*dmyclmn*!*dmyclmn*!*COST_1*!*PRICE_SF_1*!*DESCRIPTION*!*dmyclmn*!*dmyclmn*!*dmyclmn*!*dmyclmn*!*dmyclmn*!*discount*!*dmyclmn*!*dmyclmn*!*dmyclmn*!*dmyclmn*!*dmyclmn*!*dmyclmn*!*dmyclmn")

f.Data.DataTable.AddExpressionColumn("dtMain","Lno","string","substring(Record_no,1,3)")
f.Data.DataTable.SetValueFormat("dtMain",-1,"CalcDiscount","COST_1","0000000000.000000")
f.Data.DataTable.SetValueFormat("dtMain",-1,"PRICE_SF","PRICE_SF_1","0000000000.000000")

f.Data.DataView.Create("dtMain","DVExport")
Function.Data.DataView.ToString("dtMain","DVExport",v.Local.sClmn,"|~|",v.Ambient.NewLine,v.Local.sRet)

F.Data.DataTable.CreateFromString("TempExp",V.Local.sRet,"lType*!*ORDER_NO*!*Lno*!*dmyclmn1*!*dmyclmn2*!*dmyclmn3*!*COST_1*!*PRICE_SF_1*!*DESCRIPTION*!*dmyclmn4*!*dmyclmn5*!*dmyclmn6*!*dmyclmn7*!*dmyclmn8*!*discount*!*dmyclmn9*!*dmyclmn10*!*dmyclmn11*!*dmyclmn12*!*dmyclmn13*!*dmyclmn14*!*dmyclmn15","String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String","|~|",V.Ambient.NewLine,True)

F.Intrinsic.Control.For(V.Local.i,0,V.DataTable.TempExp.RowCount--,1)
	F.Intrinsic.Control.If(V.DataView.dtMain!DVExport(V.Local.i).Manual_Price!FieldVal,=,False)
		F.Intrinsic.Math.Sub(1,V.DataTable.TempExp(V.Local.i).Discount!FieldVal,V.Local.fTemp)
	F.Intrinsic.Control.Else
		V.Local.fTemp.Set(1)
		F.Data.DataTable.SetValue("TempExp",V.Local.i,"Discount",0)
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Math.Div(V.DataView.dtMain!DVExport(V.Local.i).Extension!FieldVal,V.DataView.dtMain!DVExport(V.Local.i).Qty_Order!FieldVal,V.Local.fExt)
	F.Intrinsic.Math.Div(V.Local.fExt,V.Local.fTemp,V.Local.fTemp)
	F.Intrinsic.Math.Round(V.Local.fTemp,2,V.Local.fTemp)
	F.Data.DataTable.SetValue("TempExp",V.Local.i,"COST_1",V.Local.fTemp)
F.Intrinsic.Control.Next(V.Local.i)
f.Data.DataTable.SetValueFormat("TempExp",-1,"COST_1","COST_1","0000000000.000000")
F.Data.DataView.Create("TempExp","VTempExp")
Function.Data.DataView.ToString("TempExp","VTempExp","lType*!*ORDER_NO*!*Lno*!*dmyclmn1*!*dmyclmn2*!*dmyclmn3*!*COST_1*!*PRICE_SF_1*!*DESCRIPTION*!*dmyclmn4*!*dmyclmn5*!*dmyclmn6*!*dmyclmn7*!*dmyclmn8*!*discount*!*dmyclmn9*!*dmyclmn10*!*dmyclmn11*!*dmyclmn12*!*dmyclmn13*!*dmyclmn14*!*dmyclmn15",",",v.Ambient.NewLine,v.Local.sRet)
F.Data.DataView.Close("TempExp","VTempExp")
F.Data.DataTable.Close("TempExp")

'cost & Price 16 digits - last 6 decimals
'Lno = '001
'remove decimals
f.Intrinsic.String.Replace(v.Local.sRet,".","",v.Local.sRet)

f.Data.DataView.Close("dtMain","DVExport")
f.Data.DataTable.Close("dtMain")


f.Intrinsic.Control.CallSub(Upload_Data,"sData",v.Local.sRet)
F.Intrinsic.Control.UnBlockEvents

Gui.f_Main.cmdSave.Enabled(True)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("cmdSave_Click_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
		F.ODBC.Connection!con.Close
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.End
Function.Intrinsic.Control.EndIf
Program.Sub.cmdSave_Click.End

Program.Sub.cmdFinish_Click.Start
F.Intrinsic.Control.SetErrorHandler("cmdFinish_Click_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.iFor.Declare

F.Intrinsic.UI.InvokeWaitDialog("Processing Order Data","Order Entry")
F.Data.DataTable.SaveToDB("dtMain","con","GAB_4483_OE_LINES","ORDER_NO*!*LINE",7)
F.Data.DataTable.AcceptChanges("dtMain")
'Apply Discounts
F.Intrinsic.Control.CallSub(apply_discounts)
'Create an inventory batch and upload it
F.Intrinsic.Control.CallSub(upload_inventory)
'Create the sales order lines
F.Intrinsic.Control.CallSub(upload_oe_lines)
'Create and schedule WO
F.Intrinsic.Control.CallSub(upload_wo)
'Create dtCSV
F.Intrinsic.Control.CallSub(createdtcsv)
'Load dtCSV
F.Intrinsic.Control.CallSub(populatedtcsv)
'Color the lines
F.Intrinsic.Control.For(V.Local.iFor,0,V.DataTable.dtMain.RowCount--,1)
	F.Intrinsic.Control.If(V.DataTable.dtMain(V.Local.iFor).WO!FieldValTrim,<>,"")
		Gui.f_Main.GsGcMain.SetRowAppearance("gvMAIN",V.Local.iFor,"BackColor","Yellow")
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.iFor)
F.Intrinsic.UI.CloseWaitDialog
'Save Datatable to the database
F.Intrinsic.Control.CallSub(cmdsave_click)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("cmdFinish_Click_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
		F.ODBC.Connection!con.Close
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.End
Function.Intrinsic.Control.EndIf
Program.Sub.cmdFinish_Click.End

Program.Sub.Apply_Discounts.Start
F.Intrinsic.Control.SetErrorHandler("Apply_Discounts_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.bInstr.Declare
V.Local.fPrevQty.Declare
V.Local.fPrice.Declare
V.Local.fPriceSqFt.Declare
V.Local.fQty.Declare
V.Local.fValue.Declare
V.Local.iFor.Declare
V.Local.iFor2.Declare
V.Local.iNextQB.Declare
V.Local.iID.Declare
V.Local.sArray.Declare
V.Local.sLines.Declare
V.Local.sPartCode.Declare
V.Local.sRet.Declare
V.Local.sRet2.Declare
V.Local.sSel.Declare
V.Local.sSQL.Declare

'Close dtContract if it exists
F.Intrinsic.Control.If(V.DataTable.dtContract.Exists,=,True)
	F.Data.DataTable.DeleteRow("dtContract")
	F.Data.DataTable.Close("dtContract")
F.Intrinsic.Control.EndIf

'Close dtDiscount if it exists
F.Intrinsic.Control.If(V.DataTable.dtDiscount.Exists,=,True)
	F.Data.DataTable.DeleteRow("dtDiscount")
	F.Data.DataTable.Close("dtDiscount")
F.Intrinsic.Control.EndIf

'Close dtJoin if it exists
F.Intrinsic.Control.If(V.DataTable.dtJoin.Exists,=,True)
	F.Data.DataTable.DeleteRow("dtJoin")
	F.Data.DataTable.Close("dtJoin")
F.Intrinsic.Control.EndIf

'Check to see if the customer and ship ID has any contract price discounts
F.Intrinsic.String.Build("select A.CUSTOMER, A.SHIPID, A.CONTRACT, A.PART, B.USER1, B.USER2, A.QB_QTY_1, A.QB_QTY_2, A.QB_QTY_3, A.QB_QTY_4, A.QB_QTY_5, A.QB_QTY_6, A.QB_QTY_7, A.QB_QTY_8, A.QB_QTY_9, A.QB_QTY_10, A.PRICE_1, A.PRICE_2, A.PRICE_3, A.PRICE_4, A.PRICE_5, A.PRICE_6, A.PRICE_7, A.PRICE_8, A.PRICE_9, A.PRICE_10 FROM V_OE_K_P_BREAK A LEFT OUTER JOIN V_CONTRACT_LINES B ON A.CUSTOMER = B.CUSTOMER and A.SHIPID = B.SHIP_ID and A.PART = B.PART where A.CUSTOMER = '{0}' and A.SHIPID = '{1}'",V.Passed.000006,V.Passed.000061,V.Local.sSQL)
F.ODBC.Connection!con.OpenLocalRecordsetRO("rstContract",V.Local.sSQL)
F.Intrinsic.Control.If(V.ODBC.con!rstContract.EOF,=,False)
	'We got here so they must have contracts
	'Create a data table for the contracts using the SQL statement
	F.Data.DataTable.CreateFromSQL("dtContract","con",V.Local.sSQL,True)
	'Add an Discount ID column
	F.Data.DataTable.AddColumn("dtContract","ID","Long")
	F.Intrinsic.Control.For(V.Local.iFor,0,V.DataTable.dtContract.RowCount--,1)
		F.Data.DataTable.SetValue("dtContract",V.Local.iFor,"ID",V.Local.iFor)
	F.Intrinsic.Control.Next(V.Local.iFor)
	'Create dtDiscount
	F.Data.DataTable.Create("dtDiscount",True)
	F.Data.DataTable.AddColumn("dtDiscount","ID","Long")
	F.Data.DataTable.AddColumn("dtDiscount","QTY","Float")
	F.Data.DataTable.AddColumn("dtDiscount","LINES","String")
	F.Data.DataTable.AddColumn("dtDiscount","PRICESQFT","Float")
	'Loop through dtMain and build dtDiscount using the line data
	F.Intrinsic.Control.For(V.Local.iFor,0,V.DataTable.dtMain.RowCount--,1)
		'See if the line matches anything in dtContract
		F.Intrinsic.String.Left(V.DataTable.dtMain(V.Local.iFor).PART_CODE!FieldValTrim,8,V.Local.sPartCode)
		F.Intrinsic.String.Build("PART = '{0}' and USER1 = '{1}' and USER2 = '{2}'",V.DataTable.dtMain(V.Local.iFor).FINISH!FieldValTrim,V.DataTable.dtMain(V.Local.iFor).MATL!FieldValTrim,V.Local.sPartCode,V.Local.sSel)
		F.Data.DataTable.Select("dtContract",V.Local.sSel,V.Local.sRet)
		F.Intrinsic.Control.If(V.Local.sRet,<>,"***NORETURN***")
			'The line matches so we need to add the line to dtDiscount or update one if it exists
			F.Intrinsic.String.Build("ID = '{0}'",V.DataTable.dtContract(V.Local.sRet).ID!FieldVal,V.Local.sSel)
			F.Data.DataTable.Select("dtDiscount",V.Local.sSel,V.Local.sRet2)
			F.Intrinsic.Control.If(V.Local.sRet2,=,"***NORETURN***")
				'No record exists so add it
				F.Data.DataTable.AddRow("dtDiscount","ID",V.DataTable.dtContract(V.Local.sRet).ID!FieldVal,"QTY",V.DataTable.dtMain(V.Local.iFor).QTY_ORDER!FieldValFloat,"LINES",V.DataTable.dtMain(V.Local.iFor).Line!FieldValTrim)
			F.Intrinsic.Control.Else
				'Record exists so update it
				'Add the quantity
				F.Intrinsic.Math.Add(V.DataTable.dtMain(V.Local.iFor).QTY_ORDER!FieldValFloat,V.DataTable.dtDiscount(V.Local.sRet2).QTY!FieldValFloat,V.Local.fQty)
				'Add the line to the string
				F.Intrinsic.String.Concat(V.DataTable.dtDiscount(V.Local.sRet2).LINES!FieldValTrim,"*!*",V.Local.sLines)
				F.Data.DataTable.SetValue("dtDiscount",V.Local.sRet2,"QTY",V.Local.fQty,"LINES",V.Local.sLines)
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Next(V.Local.iFor)

	F.Intrinsic.Control.If(V.DataTable.dtDiscount.RowCount,>,0)
		'Discounts apply to the order
		'Join the data tables
		F.Data.Linq.Join("LeftJoin","DataTable","dtDiscount*!*D","DataTable","dtContract*!*C","D.ID=C.ID","D.ID*!*C.CONTRACT*!*C.CUSTOMER*!*C.SHIPID*!*D.QTY*!*D.LINES*!*D.PRICESQFT*!*C.PART*!*C.USER1*!*C.USER2","","","","dtJoin",True)
		'Loop through dtDiscount and calculate the new sf price
		F.Intrinsic.Control.For(V.Local.iFor,0,V.DataTable.dtJoin.RowCount--,1)
			F.Intrinsic.String.Build("ID = '{0}'",V.DataTable.dtJoin(V.Local.iFor).ID!FieldVal,V.Local.sSel)
			F.Data.DataTable.Select("dtContract",V.Local.sSel,V.Local.sRet)
			'Build the query for the pricing by finding the highest QB_QTY field populated
			F.Intrinsic.String.Build("select (case when QB_QTY_10 > 0 then '10' when QB_QTY_9 > 0 then '9' when QB_QTY_8 > 0 then '8' when QB_QTY_7 > 0 then '7' when QB_QTY_6 > 0 then '6' when QB_QTY_5 > 0 then '5' when QB_QTY_4 > 0 then '4' when QB_QTY_3 > 0 then '3' when QB_QTY_2 > 0 then '2' when QB_QTY_1 > 0 then '1' else '-1' end) as MAX_QTY from V_OE_K_P_BREAK where CONTRACT = '{0}' and PART = '{1}' and CUSTOMER = '{2}' and SHIPID = '{3}'",V.DataTable.dtJoin(V.Local.iFor).CONTRACT!FieldValTrim,V.DataTable.dtJoin(V.Local.iFor).PART!FieldValTrim,V.DataTable.dtJoin(V.Local.iFor).CUSTOMER!FieldValTrim,V.DataTable.dtJoin(V.Local.iFor).SHIPID!FieldValTrim,V.Local.sSQL)
			F.ODBC.Connection!con.OpenLocalRecordsetRO("rstSel",V.Local.sSQL)
			F.Intrinsic.Control.If(V.ODBC.con!rstSel.FieldVal!MAX_QTY,>,0)
				F.Intrinsic.String.Build("select (case when QB_QTY_1 > '{0}' then '0'",V.DataTable.dtJoin(V.Local.iFor).QTY!FieldValFloat,V.Local.sSQL)
				F.Intrinsic.Control.For(V.Local.iFor2,1,V.ODBC.con!rstSel.FieldVal!MAX_QTY,1)
					F.Intrinsic.Math.Add(V.Local.iFor2,1,V.Local.iNextQB)
					F.Intrinsic.String.Build("{0} when '{1}' between QB_QTY_{2} and QB_QTY_{3} then PRICE_{2}",V.Local.sSQL,V.DataTable.dtJoin(V.Local.iFor).QTY!FieldValFloat,V.Local.iFor2,V.Local.iNextQB,V.Local.sSQL)
				F.Intrinsic.Control.Next(V.Local.iFor2)
				F.Intrinsic.String.Build("{0} else '0' end) as PRICING from V_OE_K_P_BREAK where CONTRACT = '{1}' and PART = '{2}' and CUSTOMER = '{3}' and SHIPID = '{4}'",V.Local.sSQL,V.DataTable.dtJoin(V.Local.iFor).CONTRACT!FieldValTrim,V.DataTable.dtJoin(V.Local.iFor).PART!FieldValTrim,V.DataTable.dtJoin(V.Local.iFor).CUSTOMER!FieldValTrim,V.DataTable.dtJoin(V.Local.iFor).SHIPID!FieldValTrim,V.Local.sSQL)
				F.ODBC.Connection!con.OpenLocalRecordsetRO("rstPricing",V.Local.sSQL)
				F.Data.DataTable.SetValue("dtJoin",V.Local.iFor,"PRICESQFT",V.ODBC.con!rstPricing.FieldValFloat!PRICING)
			F.Intrinsic.Control.EndIf
			F.ODBC.con!rstSel.Close
		F.Intrinsic.Control.Next(V.Local.iFor)

		'Loop through dtJoin again and apply the discounts to dtMain
		F.Intrinsic.Control.For(V.Local.iFor,0,V.DataTable.dtJoin.RowCount--,1)
			'Redim the Array to 0,0
			V.Local.sArray.Redim(0,0)
			'See if the price is greater than zero
			F.Intrinsic.Control.If(V.DataTable.dtJoin(V.Local.iFor).PRICESQFT!FieldValFloat,>,0)
				'See if there are any lines
				F.Intrinsic.String.IsInString(V.DataTable.dtJoin(V.Local.iFor).LINES!FieldValTrim,"*!*",True,V.Local.bInstr)
				F.Intrinsic.Control.If(V.Local.bInstr,<>,True)
				F.Intrinsic.Control.AndIf(V.DataTable.dtJoin(V.Local.iFor).LINES!FieldValTrim,<>,"")
					'Theres only one line
					F.Intrinsic.String.Build("LINE = '{0}'",V.DataTable.dtJoin(V.Local.iFor).LINES!FieldValTrim,V.Local.sSel)
					F.Data.DataTable.Select("dtMain",V.Local.sSel,V.Local.sRet)
					F.Intrinsic.Control.If(V.Local.sRet,<>,"***NORETURN***")
						F.Data.DataTable.SetValue("dtMain",V.Local.sRet,"DISCOUNT",0,"PRICE_SF",V.DataTable.dtJoin(V.Local.iFor).PRICESQFT!FieldValFloat,"MANUAL_PRICE",True)
						'Recalculate the cost and extension including the drill price
						F.Intrinsic.Math.Mult(V.DataTable.dtMain(V.Local.sRet).LENGTH!FieldValFloat,V.DataTable.dtMain(V.Local.sRet).WIDTH!FieldValFloat,V.DataTable.dtMain(V.Local.sRet).PRICE_SF!FieldValTrim,V.Local.fPrice)
						F.Intrinsic.Math.Div(V.Local.fPrice,144,V.Local.fPrice)
						F.Intrinsic.Math.Add(V.Local.fPrice,V.DataTable.dtMain(V.Local.sRet).DRILL_PRICE!FieldValFloat,V.Local.fPrice)
						F.Data.DataTable.SetValue("dtMain",V.Local.sRet,"COST",V.Local.fPrice)
						F.Intrinsic.Control.CallSub(setextension,"iRowID",V.Local.sRet)
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.ElseIf(V.Local.bInstr,=,True)
					'There are lines so split the string
					F.Intrinsic.String.Split(V.DataTable.dtJoin(V.Local.iFor).LINES!FieldValTrim,"*!*",V.Local.sArray)
					'Loop through the lines and apply the square foot price
					F.Intrinsic.Control.For(V.Local.iFor2,0,V.Local.sArray.UBound,1)
						'Look up the line number and get the row number from dtMain
						F.Intrinsic.String.Build("LINE = '{0}'",V.Local.sArray(V.Local.iFor2),V.Local.sSel)
						F.Data.DataTable.Select("dtMain",V.Local.sSel,V.Local.sRet)
						F.Intrinsic.Control.If(V.Local.sRet,<>,"***NORETURN***")
							F.Data.DataTable.SetValue("dtMain",V.Local.sRet,"DISCOUNT",0,"PRICE_SF",V.DataTable.dtJoin(V.Local.iFor).PRICESQFT!FieldValFloat,"MANUAL_PRICE",True)
							'Recalculate the cost and extension including the drill price
							F.Intrinsic.Math.Mult(V.DataTable.dtMain(V.Local.sRet).LENGTH!FieldValFloat,V.DataTable.dtMain(V.Local.sRet).WIDTH!FieldValFloat,V.DataTable.dtMain(V.Local.sRet).PRICE_SF!FieldValTrim,V.Local.fPrice)
							F.Intrinsic.Math.Div(V.Local.fPrice,144,V.Local.fPrice)
							F.Intrinsic.Math.Add(V.Local.fPrice,V.DataTable.dtMain(V.Local.sRet).DRILL_PRICE!FieldValFloat,V.Local.fPrice)
							F.Data.DataTable.SetValue("dtMain",V.Local.sRet,"COST",V.Local.fPrice)
							F.Intrinsic.Control.CallSub(setextension,"iRowID",V.Local.sRet)
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.Next(V.Local.iFor2)
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.Next(V.Local.iFor)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.ODBC.con!rstContract.Close

'Close dtContract if it exists
F.Intrinsic.Control.If(V.DataTable.dtContract.Exists,=,True)
	F.Data.DataTable.DeleteRow("dtContract")
	F.Data.DataTable.Close("dtContract")
F.Intrinsic.Control.EndIf

'Close dtDiscount if it exists
F.Intrinsic.Control.If(V.DataTable.dtDiscount.Exists,=,True)
	F.Data.DataTable.DeleteRow("dtDiscount")
	F.Data.DataTable.Close("dtDiscount")
F.Intrinsic.Control.EndIf

'Close dtJoin if it exists
F.Intrinsic.Control.If(V.DataTable.dtJoin.Exists,=,True)
	F.Data.DataTable.DeleteRow("dtJoin")
	F.Data.DataTable.Close("dtJoin")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("Apply_Discounts_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
		F.ODBC.Connection!con.Close
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.End
Function.Intrinsic.Control.EndIf
Program.Sub.Apply_Discounts.End

Program.Sub.Upload_Inventory.Start
F.Intrinsic.Control.SetErrorHandler("Upload_Inventory_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.iFor.Declare
V.Local.iSuffix.Declare
V.Local.sDescription.Declare
V.Local.sFrag.Declare
V.Local.sPart.Declare
V.Local.sPL.Declare
V.Local.sSQL.Declare

V.Local.sSQL.Set("select * from OP_HEADER where ID = '400460'")

F.ODBC.Connection!con.OpenLocalRecordsetRO("rstSel",V.Local.sSQL)

F.Intrinsic.Control.If(V.ODBC.con!rstSel.EOF,=,True)
	F.ODBC.con!rstSel.Close
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.Else
	F.Intrinsic.Control.DoUntil(V.ODBC.con!rstSel.EOF,=,True)
		F.Intrinsic.Control.If(V.ODBC.con!rstSel.FieldValTrim!SEQUENCE,=,"0001")
			V.Local.sFrag.Set(V.ODBC.con!rstSel.FieldValTrim!TEXT1)
		F.Intrinsic.Control.ElseIf(V.ODBC.con!rstSel.FieldValTrim!SEQUENCE,=,"0002")
			V.Local.iSuffix.Set(V.ODBC.con!rstSel.FieldValFloat!F_LONG)
		F.Intrinsic.Control.EndIf
		F.ODBC.con!rstSel.MoveNext
	F.Intrinsic.Control.Loop
F.Intrinsic.Control.EndIf
F.ODBC.con!rstSel.Close

F.Intrinsic.Control.For(V.Local.iFor,0,V.DataTable.dtMain.RowCount--,1)
	F.Intrinsic.UI.ChangeWaitStatus("Uploading Inventory",V.Local.iFor,0,V.DataTable.dtMain.RowCount--)
	F.Intrinsic.Control.If(V.DataTable.dtMain(V.Local.iFor).PART!FieldValTrim,=,"")
		F.Intrinsic.String.Concat(V.Local.sFrag,V.Local.iSuffix,V.Local.sPart)
		F.Intrinsic.Math.Add(V.Local.iSuffix,1,v.Local.iSuffix)
		F.Intrinsic.String.Build("update OP_HEADER set F_LONG = '{0}' where ID = '400460' and SEQUENCE = '0002'",V.Local.iSuffix,V.Local.sSQL)
		F.ODBC.Connection!con.Execute(V.Local.sSQL)
		F.Intrinsic.String.Build("{1} X {0}",V.DataTable.dtMain(V.Local.iFor).LENGTH!FieldValFloat,V.DataTable.dtMain(V.Local.iFor).WIDTH!FieldValFloat,V.Local.sDescription)
		'PRODUCT LINE
		F.Intrinsic.String.Build("select * from V_INVENTORY_ALL where PART = '{0}'",V.DataTable.dtMain(V.Local.iFor).PART_CODE!FieldValTrim,V.Local.sSQL)
		F.ODBC.Connection!con.OpenLocalRecordsetRO("rstPL",V.Local.sSQL)
		F.Intrinsic.Control.If(V.ODBC.con!rstPL.EOF,=,False)
			V.Local.sPL.Set(V.ODBC.con!rstPL.FieldValTrim!PRODUCT_LINE)
		F.Intrinsic.Control.Else
			V.Local.sPL.Set("FG")
		F.Intrinsic.Control.EndIf
		F.ODBC.con!rstPL.Close
		F.Global.Inventory.AddPartToBatch(V.Local.sPart,"EA",V.Local.sDescription,"",V.Local.sPL,"M","","",V.DataTable.dtMain(V.Local.iFor).COST!FieldValFloat,"UPLOADED")
		F.Data.DataTable.SetValue("dtMain",V.Local.iFor,"PART",V.Local.sPart)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.iFor)

F.Global.Inventory.PostPartBatch

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("Upload_Inventory_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
		F.ODBC.Connection!con.Close
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.End
Function.Intrinsic.Control.EndIf
Program.Sub.Upload_Inventory.End

Program.Sub.Upload_OE_Lines.Start
F.Intrinsic.Control.SetErrorHandler("Upload_OE_Lines_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.bExists.Declare
V.Local.fBO.Declare
V.Local.fPrice.Declare
V.Local.iFor.Declare
V.Local.sCustomer.Declare
V.Local.sDateOrder.Declare
V.Local.sDatePromise.Declare
V.Local.sDescription.Declare
V.Local.sExempt.Declare
V.Local.sExtended.Declare
V.Local.sFile.Declare
V.Local.sGL.Declare
V.Local.sPL.Declare
V.Local.sOrder.Declare
V.Local.sQty.Declare
V.Local.sParameters.Declare
V.Local.sPrice.Declare
V.Local.sRecord.Declare
V.Local.sShipID.Declare
V.Local.sSQL.Declare
V.Local.sUpload.Declare

'SALES ORDER
F.Intrinsic.String.LPad(V.Passed.000003,"0",7,V.Local.sOrder)
'CUSTOMER
F.Intrinsic.String.RPad(V.Passed.000006," ",6,V.Local.sCustomer)

'ORDER DATE
V.Local.sDateOrder.Set(V.Passed.000023)
'SHIP TO ID
F.Intrinsic.String.RPad(V.Passed.000061," ",6,V.Local.sShipID)
'EXEMPT FLAG (E/T)
F.Intrinsic.String.Build("select (SELECT CASE WHEN TAX_SALES_EX_NO = '' THEN 'T' ELSE 'E' END) AS EXEMPTION from CUSTOMER_TAX where CUST = '{0}'",V.Local.sCustomer,V.Local.sSQL)
F.ODBC.Connection!con.OpenLocalRecordsetRO("rstTax",V.Local.sSQL)
F.Intrinsic.Control.If(V.ODBC.con!rstTax.EOF,=,FALSE)
	V.Local.sExempt.Set(V.ODBC.con!rstTax.FieldValTrim!EXEMPTION)
F.Intrinsic.Control.Else
	V.Local.sExempt.Set("T")
F.Intrinsic.Control.EndIf
F.ODBC.con!rstTax.Close

F.Intrinsic.Control.For(V.Local.iFor,0,V.DataTable.dtMain.Rowcount--,1)
	F.Intrinsic.UI.ChangeWaitStatus("Uploading Sales Order Lines",V.Local.iFor,0,V.DataTable.dtMain.RowCount--)
	F.Intrinsic.Control.If(V.DataTable.dtMain(V.Local.iFor).UPLOADED!FieldVal,<>,True)
		' Order No		1-7		7
		' Line No		8-10	3
		' Rec Type		11-11	1	L
		' Customer No	12-17	6
		' Ship ID		18-23	6
		F.Intrinsic.String.Concat(V.Local.sOrder,V.DataTable.dtMain(V.Local.iFor).LINE!FieldValTrim,"L",V.Local.sCustomer,v.Local.sShipID,V.Local.sRecord)
		' Filler		24-29	18
		F.Intrinsic.String.RPad(V.Local.sRecord," ",29,V.Local.sRecord)
		' Type			30		1	S
		' Order Qty		31-46	16	9.4
		' Shipped Qty	47-62	16	9.4 blank
		' BO Qty		63-78	16	9.4
		F.Intrinsic.String.Format(V.DataTable.dtMain(V.Local.iFor).QTY_ORDER!FieldValTrim,"000000000.0000",V.Local.sQty)
		F.Intrinsic.String.RPad(V.Local.sQty," ",16,V.Local.sQty)
		F.Intrinsic.String.Concat(V.Local.sRecord,"S",V.Local.sQty,"000000000.0000  ",V.Local.sQty,V.Local.sRecord)
		' Weight		79-94	16	7.3
		F.Intrinsic.String.RPad(V.Local.sRecord," ",94,V.Local.sRecord)
		' UOM			95-96	2	EA
		' Part NO		97-116	20
		F.Intrinsic.String.Concat(V.Local.sRecord,"EA",V.DataTable.dtMain(V.Local.iFor).PART!FieldValTrim,V.Local.sRecord)
		F.Intrinsic.String.RPad(V.Local.sRecord," ",116,V.Local.sRecord)
		' Price			117-132	16	8.5
		' Cost			133-148	16	8.4
		' Ship Date		149-154	6	MMDDYY
		' Sort Code		155-166	12
		' Calculate Price if there is a discount
		F.Intrinsic.Control.If(V.DataTable.dtMain(V.Local.iFor).DISCOUNT!FieldValFloat,>,0)
			F.Intrinsic.Math.Sub(1,V.DataTable.dtMain(V.Local.iFor).DISCOUNT!FieldValFloat,V.Local.fPrice)
			F.Intrinsic.Math.Mult(V.Local.fPrice,V.DataTable.dtMain(V.Local.iFor).COST!FieldValFloat,V.Local.fPrice)
			F.Intrinsic.Math.Round(v.Local.fPrice,2,V.Local.fPrice)
		F.Intrinsic.Control.Else
			V.Local.fPrice.Set(V.DataTable.dtMain(V.Local.iFor).COST!FieldValFloat)
		F.Intrinsic.Control.EndIf
		F.Intrinsic.String.Format(V.Local.fPrice,"00000000.00000",V.Local.sPrice)
		F.Intrinsic.String.RPad(V.Local.sPrice," ",16,V.Local.sPrice)
		F.Intrinsic.String.Concat(V.Local.sRecord,V.Local.sPrice,"00000000.0000   ",V.Local.sRecord)
		F.Intrinsic.String.RPad(V.Local.sRecord," ",166,V.Local.sRecord)
		' Part Desc		167-196	30
		' UF1			197-226	30
		' UF2			227-256	30
		' UF3			257-286	30
		' UF4			287-316	30
		' UF5			317-346	30
		' Loc			347-348	2
		F.Intrinsic.String.Build("{1} X {0}",V.DataTable.dtMain(V.Local.iFor).LENGTH!FieldValFloat,V.DataTable.dtMain(V.Local.iFor).WIDTH!FieldValFloat,V.Local.sDescription)
		F.Intrinsic.String.Concat(V.Local.sRecord,V.Local.sDescription,V.Local.sRecord)
		F.Intrinsic.String.RPad(V.Local.sRecord," ",348,V.Local.sRecord)
		' Order Disc %	349-364	16	1.4
		' Uses Ship Sch	365-365	1	N
		' PC Disc %		366-381	16	1.4
		' Com Rate Typ	382-386	5
		F.Intrinsic.String.Concat(V.Local.sRecord,"0.0000          ","N","0.0000          ",V.Local.sRecord)
		F.Intrinsic.String.RPad(V.Local.sRecord," ",386,V.Local.sRecord)
		' Normal GL		387-401	15
		' Filler		402-477	76
		F.Intrinsic.String.Build("select A.PRODUCT_LINE, B.SALES_ACCOUNT from V_INVENTORY_ALL A left outer join V_PRODUCT_LINE B on A.PRODUCT_LINE = B.PRODUCT_LINE where A.PART = '{0}'",V.DataTable.dtMain.PART_CODE(V.Local.iFor)!FieldValTrim,V.Local.sSQL)
		F.ODBC.Connection!con.OpenLocalRecordsetRO("rstPL",V.Local.sSQL)
		F.Intrinsic.Control.If(V.ODBC.con!rstPL.EOF,=,False)
			V.Local.sGL.Set(V.ODBC.con!rstPL.FieldValTrim!SALES_ACCOUNT)
			F.Intrinsic.String.RPad(V.Local.sGL," ",15,V.Local.sGL)
			V.Local.sPL.Set(V.ODBC.con!rstPL.FieldValTrim!PRODUCT_LINE)
		F.Intrinsic.Control.Else
			V.Local.sGL.Set("000000000000000")
			V.Local.sPL.Set("RM")
		F.Intrinsic.Control.EndIf
		F.ODBC.con!rstPL.Close
		F.Intrinsic.String.Concat(V.Local.sRecord,V.Local.sGL,V.Local.sRecord)
		F.Intrinsic.String.RPad(V.Local.sRecord," ",477,V.Local.sRecord)
		' Order Date	478-485	8	CCYYMMDD
		' Promise Date	486-491	6	MMDDYY
		F.Intrinsic.String.Format(V.DataTable.dtMain(V.Local.iFor).DATE_PROMISE!FieldValTrim,"MMDDYY",V.Local.sDatePromise)
		F.Intrinsic.String.Concat(V.Local.sRecord,V.Local.sDateOrder,V.Local.sDatePromise,V.Local.sRecord)
		' Tax Status	492-492	1	E/T
		' Cust PN		493-524	32
		' Info 1		525-544	20
		' Info 2		545-564	20
		F.Intrinsic.String.Concat(V.Local.sRecord,V.Local.sExempt,V.Local.sRecord)
		F.Intrinsic.String.RPad(V.Local.sRecord," ",564,V.Local.sRecord)
		' Currency		565-567	3	USD
		' Extended Amt	568-583	16	14.2
		' BOM Switch	584-584	1	N
		' BOM Parent	585-588	4
		F.Intrinsic.String.Format(V.DataTable.dtMain(V.Local.iFor).EXTENSION!FieldValTrim,"0000000000000.00",V.Local.sExtended)
		F.Intrinsic.String.Concat(V.Local.sRecord,"USD",V.Local.sExtended,"N",V.Local.sRecord)
		F.Intrinsic.String.RPad(V.Local.sRecord," ",588,V.Local.sRecord)
		' Product Line	589-590	2
		' Filler		591-591	1
		' PL Disc Amt	592-607	16	9.4
		' Disc Amt		608-623	16	10.2
		' Disc Price	624-639	16	10.6
		' Ord Disc Amt	640-655	16	10.2
		' PrCl Disc Amt	656-671	16	10.2
		' PL Disc Amt	672-687	16	10.2
		' Filler		688-847	160
		F.Intrinsic.String.Concat(V.Local.sRecord,V.Local.sPL,V.Local.sRecord)
		F.Intrinsic.String.RPad(V.Local.sRecord," ",847,V.Local.sRecord)

		'ADD THE RECORD TO THE OUTPUT STRING
		F.Intrinsic.Control.If(V.Local.sUpload.Trim,=,"")
			V.Local.sUpload.Set(V.Local.sRecord)
		F.Intrinsic.Control.Else
			F.Intrinsic.String.Concat(V.Local.sUpload,V.Ambient.NewLine,V.Local.sRecord,V.Local.sUpload)
		F.Intrinsic.Control.EndIf

		F.Data.DataTable.SetValue("dtMain",V.Local.iFor,"UPLOADED",True)

	F.Intrinsic.Control.Else
		'SO LINE EXISTS SO UPDATE THE EXISTING LINE
		F.Intrinsic.String.Build("select * from ORDER_LINES where ORDER_NO = '{0}' and RECORD_NO = '{1}0' and RECORD_TYPE = 'L'",V.Local.sOrder.Trim,V.DataTable.dtMain(V.Local.iFor).LINE!FieldValTrim,V.Local.sSQL)
		F.ODBC.Connection!con.OpenLocalRecordsetRW("rstLine",V.Local.sSQL)
		F.Intrinsic.Control.If(V.ODBC.con!rstLine.EOF,=,False)
			F.Intrinsic.String.Build("{1} X {0}",V.DataTable.dtMain(V.Local.iFor).LENGTH!FieldValFloat,V.DataTable.dtMain(V.Local.iFor).WIDTH!FieldValFloat,V.Local.sDescription)
			F.ODBC.con!rstLine.Set!Description(V.Local.sDescription)
			F.Intrinsic.Math.Sub(V.ODBC.con!rstLine.FieldValFloat!QTY_ORDERED,V.ODBC.con!rstLine.FieldValFloat!QTY_BO,V.Local.fBO)
			F.Intrinsic.Math.Sub(V.DataTable.dtMain(V.Local.iFor).QTY_ORDER!FieldValFloat,V.Local.fBO,V.Local.fBO)
			F.ODBC.con!rstLine.Set!QTY_ORDERED(V.DataTable.dtMain(V.Local.iFor).QTY_ORDER!FieldValFloat)
			F.ODBC.con!rstLine.Set!QTY_BO(V.Local.fBO)
			F.Intrinsic.Control.If(V.DataTable.dtMain(V.Local.iFor).DISCOUNT!FieldValFloat,>,0)
				F.Intrinsic.Math.Sub(1,V.DataTable.dtMain(V.Local.iFor).DISCOUNT!FieldValFloat,V.Local.fPrice)
				F.Intrinsic.Math.Mult(V.Local.fPrice,V.DataTable.dtMain(V.Local.iFor).COST!FieldValFloat,V.Local.fPrice)
				F.Intrinsic.Math.Round(v.Local.fPrice,2,V.Local.fPrice)
			F.Intrinsic.Control.Else
				V.Local.fPrice.Set(V.DataTable.dtMain(V.Local.iFor).COST!FieldValFloat)
			F.Intrinsic.Control.EndIf
			F.ODBC.con!rstLine.Set!PRICE(V.Local.fPrice)
			F.ODBC.con!rstLine.Set!PRICE_ORDER(V.Local.fPrice)
			F.ODBC.con!rstLine.Set!PRICE_DISC_ORD(V.Local.fPrice)
			F.ODBC.con!rstLine.Set!EXTENSION(V.DataTable.dtMain(V.Local.iFor).EXTENSION!FieldValFloat)
			F.ODBC.con!rstLine.Set!EXTENSION_ORDER(V.DataTable.dtMain(V.Local.iFor).EXTENSION!FieldValFloat)
			F.Intrinsic.String.Format(V.DataTable.dtMain(V.Local.iFor).DATE_PROMISE!FieldValTrim,"MMDDYY",V.Local.sDatePromise)
			F.ODBC.con!rstLine.Set!ITEM_PROMISE_DT(V.Local.sDatePromise)
			F.Intrinsic.String.Format(V.DataTable.dtMain(V.Local.iFor).DATE_PROMISE!FieldValTrim,"YYYYMMDD",V.Local.sDatePromise)
			F.ODBC.con!rstLine.Set!DATE_ITEM_PROM(V.Local.sDatePromise)
			F.ODBC.con!rstLine.Update
		F.Intrinsic.Control.EndIf
			F.ODBC.con!rstLine.Close
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.iFor)

'UPLOAD THE FILE IF THERE ARE RECORDS TO UPLOAD
F.Intrinsic.Control.If(V.Local.sUpload.Trim,<>,"")
	F.Intrinsic.String.Concat(V.Caller.FilesDir,"\SALESHDR.TXT",V.Local.sFile)
	F.Intrinsic.File.Exists(V.Local.sFile,V.Local.bExists)
	F.Intrinsic.Control.If(V.Local.bExists,=,True)
		F.Intrinsic.File.DeleteFile(V.Local.sFile)
	F.Intrinsic.Control.EndIf
	F.Intrinsic.File.String2File(V.Local.sFile,V.Local.sUpload)
	F.Intrinsic.String.Concat("UPLSALES/C!*!",V.Caller.CompanyCode,V.Local.sParameters)
	F.Global.General.CallWrapperSync(50,V.Local.sParameters)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("Upload_OE_Lines_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
		F.ODBC.Connection!con.Close
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.End
Function.Intrinsic.Control.EndIf
Program.Sub.Upload_OE_Lines.End

Program.Sub.Upload_WO.Start
F.Intrinsic.Control.SetErrorHandler("Upload_WO_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.b5PC.Declare
V.Local.bComment.Declare
V.Local.bDrill.Declare
V.Local.bExport.Declare
V.Local.bFinish.Declare
V.Local.bInsertLabr.Declare
V.Local.bInsertMatl.Declare
V.Local.bInstr.Declare
V.Local.dDueDate.Declare
V.Local.fInsertLength.Declare
V.Local.fInsertSF.Declare
V.Local.fInsertWidth.Declare
V.Local.fLengthAdj.Declare
V.Local.fUnitQty.Declare
V.Local.fWidthAdj.Declare
V.Local.iFor.Declare
V.Local.iLen.Declare
V.Local.iPos.Declare
V.Local.iWO.Declare
V.Local.sCustomer.Declare
V.Local.sDescription.Declare
V.Local.sDueDate.Declare
V.Local.sFile.Declare
V.Local.sFrag.Declare
V.Local.sInsertPC.Declare
V.Local.sInsertSize.Declare
V.Local.sJCM.Declare
V.Local.sJCOM.Declare
V.Local.sLine.Declare
V.Local.sLMO.Declare
V.Local.sMMDDYY.Declare
V.Local.sOpCode.Declare
V.Local.sOrder.Declare
V.Local.sOrderLine.Declare
V.Local.sParameters.Declare
V.Local.sPart.Declare
V.Local.sPL.Declare
V.Local.sPO.Declare
V.Local.sPrice.Declare
V.Local.sQTY.Declare
V.Local.sRate.Declare
V.Local.sRouter.Declare
V.Local.sSeq.Declare
V.Local.sSetup.Declare
V.Local.sSQL.Declare
V.Local.sSuffix.Declare
V.Local.sUnitQty.Declare
V.Local.sUOM.Declare
V.Local.sWO.Declare

'CUSTOMER
F.Intrinsic.String.RPad(V.Passed.000006," ",6,V.Local.sCustomer)
'PO
F.Intrinsic.String.RPad(V.Passed.000025," ",20,V.Local.sPO)
'DATE
F.Intrinsic.String.Format(V.Ambient.Date,"MMDDYY",V.Local.sMMDDYY)
'SALES ORDER
F.Intrinsic.String.LPad(V.Passed.000003,"0",7,V.Local.sOrder)

'FRAGMENT
V.Local.sSQL.Set("select * from OP_HEADER where ID = '400460'")
F.ODBC.Connection!con.OpenLocalRecordsetRO("rstSel",V.Local.sSQL)
F.Intrinsic.Control.DoUntil(V.ODBC.con!rstSel.EOF,=,True)
	F.Intrinsic.Control.If(V.ODBC.con!rstSel.FieldValTrim!SEQUENCE,=,"0001")
		V.Local.sFrag.Set(V.ODBC.con!rstSel.FieldValTrim!TEXT1)
	F.Intrinsic.Control.EndIf
	F.ODBC.con!rstSel.MoveNext
F.Intrinsic.Control.Loop
F.ODBC.con!rstSel.Close

'Loop through dtMain
F.Intrinsic.Control.For(V.Local.iFor,0,V.DataTable.dtMain.RowCount--,1)
	F.Intrinsic.UI.ChangeWaitStatus("Uploading Work Orders",V.Local.iFor,0,V.DataTable.dtMain.RowCount--)
	'Check to see that a WO hasn't already been created
	F.Intrinsic.Control.If(V.DataTable.dtMain(V.Local.iFor).WO!FieldValTrim,=,"")
		'If no WO then Check for router on the part code inventory extra User1
		F.Intrinsic.String.Build("select * from INV_EXTRA where PART = '{0}'",V.DataTable.dtMain(V.Local.iFor).PART_CODE!FieldValTrim,V.Local.sSQL)
		F.ODBC.Connection!con.OpenLocalRecordsetRO("rstSel",V.Local.sSQL)
		F.Intrinsic.Control.If(V.ODBC.con!rstSel.EOF,=,False)
		F.Intrinsic.Control.AndIf(V.ODBC.con!rstSel.FieldValTrim!USER1,<>,"")
			V.Local.sRouter.Set(V.ODBC.con!rstSel.FieldValTrim!USER1)
			'If a router is there check to see that the router exists in the router master
			F.Intrinsic.String.Build("select OPERATION, LMO, DESC_RT_LINE, UM_INVENTORY, PART_WC_OUTSIDE, ROUTER, LINE_ROUTER, SET_UP, ({0}*RUN_TIME) AS UNIT_QTY, RUN_TIME, RATE from V_ROUTER_LINE where ROUTER = '{1}' order by LINE_ROUTER",V.DataTable.dtMain(V.Local.iFor).SQUARE_FT!FieldValFloat,V.Local.sRouter,V.Local.sSQL)
			F.ODBC.Connection!con.OpenLocalRecordsetRO("rstRTR",V.Local.sSQL)
			F.Intrinsic.Control.If(V.ODBC.con!rstRTR.EOF,=,False)
				'Get the starting WO number
				V.Local.sSQL.Set("select * from OP_HEADER where ID = '401112' and SEQUENCE = '0001'")
				F.ODBC.Connection!con.OpenLocalRecordsetRW("rstWO",V.Local.sSQL)
				V.Local.iWO.Set(V.ODBC.con!rstWO.FieldValLong!F_LONG)
				V.Local.sSQL.Set("select max(JOB) as JOB from JOB_HEADER where isnumeric(JOB) = 1")
				F.ODBC.Connection!con.OpenLocalRecordsetRO("rstMax",V.Local.sSQL)
				F.Intrinsic.Control.If(V.ODBC.con!rstMax.FieldValLong!JOB,>,V.Local.iWO)
					V.Local.iWO.Set(V.ODBC.con!rstMax.FieldValLong!JOB)
					V.Local.iWO.Set(V.Local.iWO.++)
				F.Intrinsic.Control.EndIf
				F.ODBC.con!rstMax.Close
				F.Intrinsic.String.Format(V.Local.iWO,"000000",V.Local.sWO)
				'Load the Work Order Header data to the Job Cost Master Upload Variable
				'Job		1-6
				V.Local.sJCM.Set(V.Local.sWO)
				'Suffix		7-9
				F.Intrinsic.String.RPad(V.Local.sJCM," ",9,V.Local.sJCM)
				'Part		10-29
				'Loc		30-31
				'Router		32-51
				'WO Desc	52-81
				'Customer #	82-87
				'PO#		88-107
				'Run Qty	108-123	8.4
				'Date open	124-129 MMDDYY
				'Date Due	130-135 MMDDYY
				F.Intrinsic.String.RPad(V.DataTable.dtMain(V.Local.iFor).PART!FieldValTrim," ",20,V.Local.sPart)
				F.Intrinsic.String.RPad(V.Local.sRouter," ",20,V.Local.sRouter)
				F.Intrinsic.String.Build("{1} X {0}",V.DataTable.dtMain(V.Local.iFor).LENGTH!FieldValFloat,V.DataTable.dtMain(V.Local.iFor).WIDTH!FieldValFloat,V.Local.sDescription)
				F.Intrinsic.String.RPad(V.Local.sDescription," ",30,V.Local.sDescription)
				F.Intrinsic.String.Format(V.DataTable.dtMain(V.Local.iFor).QTY_ORDER!FieldVal,"00000000.0000",V.Local.sQTY)
				F.Intrinsic.String.RPad(V.Local.sQTY," ",16,V.Local.sQTY)
				F.Intrinsic.Date.DateAddWorkdays(V.DataTable.dtMain(V.Local.iFor).DATE_PROMISE!FieldValTrim,-1,62,V.Local.dDueDate)
				F.Intrinsic.String.Format(V.Local.dDueDate,"MMDDYY",V.Local.sDueDate)
				F.Intrinsic.String.Concat(V.Local.sJCM,V.Local.sPart,"  ",V.Local.sRouter,V.Local.sDescription,V.Local.sCustomer,V.Local.sPO,V.Local.sQTY,V.Local.sMMDDYY,V.Local.sDueDate,V.Local.sJCM)
				'Filler		130-342
				F.Intrinsic.String.RPad(V.Local.sJCM," ",342,V.Local.sJCM)
				'P/L		343-344
				'Price		345-360	8.4
				'Cust Qty	361-376	8.4
				'Part Desc	377-406
				'Priority	407-409
				F.Intrinsic.String.Build("select * from V_INVENTORY_ALL where PART = '{0}'",V.DataTable.dtMain(V.Local.iFor).PART!FieldValTrim,V.Local.sSQL)
				F.ODBC.Connection!con.OpenLocalRecordsetRO("rstPart",V.Local.sSQL)
				F.Intrinsic.Control.If(V.ODBC.con!rstPart.EOF,=,False)
					V.Local.sPL.Set(V.ODBC.con!rstPart.FieldValTrim!PRODUCT_LINE)
				F.Intrinsic.Control.EndIf
				F.ODBC.con!rstPart.Close
				F.Intrinsic.String.RPad(V.Local.sPL," ",2,V.Local.sPL)
				F.Intrinsic.String.Format(V.DataTable.dtMain(V.Local.iFor).COST!FieldValFloat,"00000000.0000",V.Local.sPrice)
				F.Intrinsic.String.RPad(V.Local.sPrice," ",16,V.Local.sPrice)
				F.Intrinsic.String.Concat(V.Local.sJCM,V.Local.sPL,V.Local.sPrice,V.Local.sQTY,V.Local.sDescription,"050",V.Local.sJCM)
				'Filler		410-495
				F.Intrinsic.String.RPad(V.Local.sJCM," ",495,V.Local.sJCM)
				'Check to see if there is a drill code
				F.Intrinsic.Control.If(V.DataTable.dtMain(V.Local.iFor).DRILL_CODE!FieldValTrim,=,"")
					V.Local.bDrill.Set(False)
				F.Intrinsic.Control.Else
					V.Local.bDrill.Set(True)
				F.Intrinsic.Control.EndIf
				'Check to see if there is a finish code
				F.Intrinsic.Control.If(V.DataTable.dtMain(V.Local.iFor).FINISH!FieldValTrim,=,"")
					V.Local.bFinish.Set(False)
				F.Intrinsic.Control.Else
					V.Local.bFinish.Set(True)
				F.Intrinsic.Control.EndIf
				'Check to see if there is an insert to be machined
				'Check to see if there is an insert to be purchased
				F.Intrinsic.Control.If(V.DataTable.dtMain(V.Local.iFor).INSERT_PC!FieldValTrim,<>,"")
					'It is a machined insert
					V.Local.bInsertMatl.Set(True)
					V.Local.binsertLabr.Set(True)
					V.Local.bComment.Set(True)
				F.Intrinsic.Control.ElseIf(V.DataTable.dtMain(V.Local.iFor).INSERT_PN!FieldValTrim,=,"NO GLASS")
					'No Insert
					V.Local.bInsertMatl.Set(False)
					V.Local.binsertLabr.Set(False)
					V.Local.bComment.Set(False)
				F.Intrinsic.Control.ElseIf(V.DataTable.dtMain(V.Local.iFor).INSERT_PN!FieldValTrim,<>,"")
					'It is a purchased insert
					V.Local.bInsertMatl.Set(True)
					V.Local.binsertLabr.Set(False)
					V.Local.bComment.Set(False)
				F.Intrinsic.Control.Else
					V.Local.bInsertLabr.Set(False)
					V.Local.bInsertMatl.Set(False)
					V.Local.bComment.Set(False)
				F.Intrinsic.Control.EndIf
				'Load the template router lines to the Job Cost Operations Master Upload Variable - all quanities multiplied by dtMain.Square_Ft
				F.Intrinsic.Control.DoUntil(V.ODBC.con!rstRTR.EOF,=,True)
					V.Local.b5PC.Set(False)
					V.Local.bExport.Set(True)
					V.Local.sSeq.Set(V.ODBC.con!rstRTR.FieldValTrim!LINE_ROUTER)
					F.Intrinsic.String.Format(V.Local.sSeq,"000000",V.Local.sSeq)
					V.Local.sOpCode.Set(V.ODBC.con!rstRTR.FieldValTrim!OPERATION)
					F.Intrinsic.String.RPad(V.Local.sOpCode," ",6,V.Local.sOpCode)
					V.Local.sDescription.Set(V.ODBC.con!rstRTR.FieldValTrim!DESC_RT_LINE)
					F.Intrinsic.String.RPad(V.Local.sDescription," ",30,V.Local.sDescription)
					V.Local.sUOM.Set(V.ODBC.con!rstRTR.FieldValTrim!UM_INVENTORY)
					F.Intrinsic.String.RPad(V.Local.sUOM," ",2,V.Local.sUOM)
					V.Local.sPart.Set(V.ODBC.con!rstRTR.FieldValTrim!PART_WC_OUTSIDE)
					F.Intrinsic.String.RPad(V.Local.sPart," ",20,V.Local.sPart)
					F.Intrinsic.String.Format(V.ODBC.con!rstRTR.FieldValTrim!SET_UP,"00000000.0000",V.Local.sSetup)
					F.Intrinsic.String.RPad(V.Local.sSetup," ",16,V.Local.sSetup)
					'Replace the Unit Quantity with Run Time for 5PC assmeblies
					F.Intrinsic.Control.SelectCase(V.Local.sOpCode.Trim)
						F.Intrinsic.Control.Case("SAWU")
							F.Intrinsic.String.Format(V.ODBC.con!rstRTR.FieldValTrim!RUN_TIME,"00000000.0000",V.Local.sUnitQty)
						F.Intrinsic.Control.Case("SAWI")
							F.Intrinsic.String.Format(V.ODBC.con!rstRTR.FieldValTrim!RUN_TIME,"00000000.0000",V.Local.sUnitQty)
						F.Intrinsic.Control.Case("ACCU")
							F.Intrinsic.String.Format(V.ODBC.con!rstRTR.FieldValTrim!RUN_TIME,"00000000.0000",V.Local.sUnitQty)
						F.Intrinsic.Control.CaseElse
							F.Intrinsic.String.Format(V.ODBC.con!rstRTR.FieldValTrim!UNIT_QTY,"00000000.0000",V.Local.sUnitQty)
					F.Intrinsic.Control.EndSelect
					F.Intrinsic.String.RPad(V.Local.sUnitQty," ",16,V.Local.sUnitQty)
					V.Local.sLMO.Set(V.ODBC.con!rstRTR.FieldValTrim!LMO)
					'Get the insert size and set the description
					F.Intrinsic.Control.If(V.Local.binsertLabr,=,True)
						'Manufactured Insert
						F.Intrinsic.Control.If(V.Local.sPart.Trim,=,"INSERT")
							'Material Line
							'Calculate the material length
							'Calculate the material width
							'Set sInsertSize
							'Set sInsertPC
							'Set fInsertSF
							F.Intrinsic.Control.CallSub(calculateinsert,"Row",V.Local.iFor,"Type",V.Local.sPart.Trim)
							V.Local.fInsertLength.Set(V.Args.Length)
							V.Local.fInsertWidth.Set(V.Args.Width)
							V.Local.fInsertSF.Set(V.Args.SF)
							V.Local.sInsertPC.Set(V.Args.PC)
							V.Local.sInsertSize.Set(V.Args.Size)
							'Set sPart to material part number
							V.Local.sPart.Set(V.Args.Material)
							F.Intrinsic.String.RPad(V.Local.sPart," ",20,V.Local.sPart)
							'Set quantity to InsertSF
							F.Intrinsic.Math.Mult(V.Local.fInsertSF,V.ODBC.con!rstRTR.FieldValFloat!RUN_TIME,V.Local.fUnitQty)
							F.Intrinsic.Math.Round(V.Local.fUnitQty,4,V.Local.fUnitQty)
							F.Intrinsic.String.Format(V.Local.fUnitQty,"00000000.0000",V.Local.sUnitQty)
							F.Intrinsic.String.RPad(V.Local.sUnitQty," ",16,V.Local.sUnitQty)
						F.Intrinsic.Control.ElseIf(V.Local.sOpCode.Trim,=,"INSERT")
							'Labor Line
							F.Intrinsic.Math.Mult(V.Local.fInsertSF,V.ODBC.con!rstRTR.FieldValFloat!RUN_TIME,V.Local.fUnitQty)
							F.Intrinsic.Math.Round(V.Local.fUnitQty,4,V.Local.fUnitQty)
							F.Intrinsic.String.Format(V.Local.fUnitQty,"00000000.0000",V.Local.sUnitQty)
							F.Intrinsic.String.RPad(V.Local.sUnitQty," ",16,V.Local.sUnitQty)
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.ElseIf(V.Local.bInsertMatl,=,True)
						'Purchased Insert
						F.Intrinsic.Control.If(V.Local.sPart.Trim,=,"INSERT")
							'Material Line
							'Calculate the material length
							'Calculate the material width
							'Set sInsertSize
							'Set fInsertSF
							F.Intrinsic.Control.CallSub(calculateinsert,"Row",V.Local.iFor,"Type",V.Local.sPart.Trim)
							V.Local.fInsertLength.Set(V.Args.Length)
							V.Local.fInsertWidth.Set(V.Args.Width)
							V.Local.fInsertSF.Set(V.Args.SF)
							V.Local.sInsertPC.Set(V.Args.PC)
							V.Local.sInsertSize.Set(V.Args.Size)
							'Set sPart to part prefix + FG part number suffix
							F.Intrinsic.String.Instr(V.DataTable.dtMain(V.Local.iFor).INSERT_PN!FieldValTrim,"-",0,V.Local.iPos)
							F.Intrinsic.String.Left(V.DataTable.dtMain(V.Local.iFor).INSERT_PN!FieldValTrim,V.Local.iPos,V.Local.sPart)
							F.Intrinsic.Math.Sub(V.Local.iPos,1,V.Local.iPos)
							F.Intrinsic.String.Len(V.Local.sFrag,V.Local.iPos)
							F.Intrinsic.String.Len(V.DataTable.dtMain(V.Local.iFor).PART!FieldValTrim,V.Local.iLen)
							F.Intrinsic.Math.Sub(V.Local.iLen,V.Local.iPos,V.Local.iLen)
							F.Intrinsic.String.Right(V.DataTable.dtMain(V.Local.iFor).PART!FieldValTrim,V.Local.iLen,V.Local.sSuffix)
							F.Intrinsic.String.Concat(V.Local.sPart,V.Local.sSuffix,V.Local.sPart)
							F.Intrinsic.String.Right(V.Local.sPart,20,V.Local.sPart)
							F.Intrinsic.String.RPad(V.Local.sPart," ",20,V.Local.sPart)
							V.Local.sDescription.Set(V.DataTable.dtMain(V.Local.iFor).INSERT_1!FieldValTrim)
							F.Intrinsic.String.Concat(V.Local.sInsertSize," ",V.Local.sDescription,V.Local.sDescription)
							F.Intrinsic.String.Left(V.Local.sDescription,30,V.Local.sDescription)
							F.Intrinsic.String.RPad(V.Local.sDescription," ",30,V.Local.sDescription)
							F.Intrinsic.String.Format(1,"00000000.0000",V.Local.sUnitQty)
							F.Intrinsic.String.RPad(V.Local.sUnitQty," ",16,V.Local.sUnitQty)
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
					'Replace the part and description for MATERIAL or INSERT or MOLDING or STICKS or 5PC-INSERT
					F.Intrinsic.Control.SelectCase(V.Local.sPart.Trim)
					F.Intrinsic.Control.Case("STICKS")
						'THIS IS A CRAFTSMAN DOOR AND THIS IS THE MOLDING LINE
						'THE MATERIAL PART NUMBER FOR STICKS IS THE FINISH CODE
						V.Local.sPart.Set(V.DataTable.dtMain(V.Local.iFor).FINISH!FieldValTrim)
						F.Intrinsic.String.RPad(V.Local.sPart," ",20,V.Local.sPart)
						'THE QUANTITY OF STICKS IS THE PERIMETER PLUS OFFSETS DIVIDED BY 96
						'USER22	Width Adjustment
						'USER23	Length Adjustment
						F.Intrinsic.String.Build("select * from INV_EXTRA where PART = '{0}'",V.DataTable.dtMain(V.Local.iFor).PART_CODE!FieldValTrim,V.Local.sSQL)
						F.ODBC.Connection!con.OpenLocalRecordsetRO("rstMatl",V.Local.sSQL)
						F.Intrinsic.Control.If(V.ODBC.con!rstMatl.EOF,=,False)
							V.Local.fWidthAdj.Set(V.ODBC.con!rstMatl.FieldValFloat!USER22)
							V.Local.fLengthAdj.Set(V.ODBC.con!rstMatl.FieldValFloat!USER23)
						F.Intrinsic.Control.Else
							V.Local.fWidthAdj.Set(0)
							V.Local.fLengthAdj.Set(0)
						F.Intrinsic.Control.EndIf
						F.Intrinsic.Math.Add(V.Local.fLengthAdj,V.Local.fWidthAdj,V.DataTable.dtMain(V.Local.iFor).LENGTH!FieldValFloat,V.DataTable.dtMain(V.Local.iFor).WIDTH!FieldValFloat,V.Local.fUnitQty)
						F.Intrinsic.Math.Mult(V.Local.fUnitQty,2,V.Local.fUnitQty)
						F.Intrinsic.Math.Div(V.Local.fUnitQty,96,V.Local.fUnitQty)
						F.Intrinsic.Math.Round(V.Local.fUnitQty,4,V.Local.fUnitQty)
						F.Intrinsic.String.Format(V.Local.fUnitQty,"00000000.0000",V.Local.sUnitQty)
						F.Intrinsic.String.RPad(V.Local.sUnitQty," ",16,V.Local.sUnitQty)					
					F.Intrinsic.Control.Case("5PC-INSERT")
						'THIS IS A CRAFTSMAN DOOR OR ARTISAN DOOR AND THIS IS THE INSERT LINE
						'THE MATERIAL PART NUMBER FOR INSERTS IS THE MATERIAL CODE
						F.Intrinsic.Control.CallSub(calculateinsert,"Row",V.Local.iFor,"Type",V.Local.sPart.Trim)
						V.Local.fInsertLength.Set(V.Args.Length)
						V.Local.fInsertWidth.Set(V.Args.Width)
						V.Local.fInsertSF.Set(V.Args.SF)
						V.Local.sInsertPC.Set(V.Args.PC)
						V.Local.sInsertSize.Set(V.Args.Size)
						V.Local.sPart.Set(V.DataTable.dtMain(V.Local.iFor).MATL!FieldValTrim)
						F.Intrinsic.String.RPad(V.Local.sPart," ",20,V.Local.sPart)
					F.Intrinsic.Control.Case("MATERIAL")
						'Use the part code if the product line is MM (Molding)
						F.Intrinsic.Control.If(V.DataTable.dtMain(V.Local.iFor).PL!FieldValTrim,=,"MM")
							F.Intrinsic.String.RPad(V.DataTable.dtMain(V.Local.iFor).PART_CODE!FieldValTrim," ",20,V.Local.sPart)
							F.Intrinsic.String.RPad(V.DataTable.dtMain(V.Local.iFor).DESCRIPTION!FieldValTrim," ",30,V.Local.sDescription)
							F.Intrinsic.String.Format(1,"00000000.0000",V.Local.sUnitQty)
							F.Intrinsic.String.RPad(V.Local.sUnitQty," ",16,V.Local.sUnitQty)
						F.Intrinsic.Control.Else
							F.Intrinsic.String.Build("select * from V_INVENTORY_ALL where PART = '{0}'",V.DataTable.dtMain(V.Local.iFor).MATL!FieldValTrim,V.Local.sSQL)
							F.ODBC.Connection!con.OpenLocalRecordsetRO("rstMatl",V.Local.sSQL)
							F.Intrinsic.Control.If(V.ODBC.con!rstMatl.EOF,=,False)
								F.Intrinsic.String.RPad(V.ODBC.con!rstMatl.FieldValTrim!PART," ",20,V.Local.sPart)
								F.Intrinsic.String.RPad(V.ODBC.con!rstMatl.FieldValTrim!DESCRIPTION," ",30,V.Local.sDescription)
							F.Intrinsic.Control.EndIf
							F.ODBC.con!rstMatl.Close
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.Case("INSERT")
						F.Intrinsic.String.Build("select * from V_INVENTORY_ALL where PART = '{0}'",V.Local.sPart,V.Local.sSQL)
						F.ODBC.Connection!con.OpenLocalRecordsetRO("rstMatl",V.Local.sSQL)
						F.Intrinsic.Control.If(V.ODBC.con!rstMatl.EOF,=,False)
							F.Intrinsic.String.RPad(V.ODBC.con!rstMatl.FieldValTrim!PART," ",20,V.Local.sPart)
							F.Intrinsic.String.RPad(V.ODBC.con!rstMatl.FieldValTrim!DESCRIPTION," ",30,V.Local.sDescription)
						F.Intrinsic.Control.EndIf
						F.ODBC.con!rstMatl.Close
					F.Intrinsic.Control.Case("MOLDING")
						F.Intrinsic.String.Build("select * from INV_EXTRA where PART = '{0}'",V.DataTable.dtMain(V.Local.iFor).PART_CODE!FieldValTrim,V.Local.sSQL)
						F.ODBC.Connection!con.OpenLocalRecordsetRO("rstMatl",V.Local.sSQL)
						F.Intrinsic.Control.If(V.ODBC.con!rstMatl.EOF,=,False)
							V.Local.sPart.Set(V.ODBC.con!rstMatl.FieldValTrim!USER37)
						F.Intrinsic.Control.EndIf
						F.ODBC.con!rstMatl.Close
						F.Intrinsic.String.Build("select * from V_INVENTORY_ALL where PART = '{0}'",V.Local.sPart,V.Local.sSQL)
						F.ODBC.Connection!con.OpenLocalRecordsetRO("rstMatl",V.Local.sSQL)
						F.Intrinsic.Control.If(V.ODBC.con!rstMatl.EOF,=,False)
							F.Intrinsic.String.RPad(V.ODBC.con!rstMatl.FieldValTrim!PART," ",20,V.Local.sPart)
							F.Intrinsic.String.RPad(V.ODBC.con!rstMatl.FieldValTrim!DESCRIPTION," ",30,V.Local.sDescription)
						F.Intrinsic.Control.EndIf
						F.ODBC.con!rstMatl.Close
						'CHANGE sUnitQty TO MOLDING QUANTITY
						F.Intrinsic.Math.Add(V.DataTable.dtMain(V.Local.iFor).LENGTH!FieldValFloat,V.DataTable.dtMain(V.Local.iFor).WIDTH!FieldValFloat,V.Local.fUnitQty)
						F.Intrinsic.Math.Mult(V.Local.fUnitQty,2,V.Local.fUnitQty)
						F.Intrinsic.Math.Div(V.Local.fUnitQty,96,V.Local.fUnitQty)
						F.Intrinsic.Math.Round(V.Local.fUnitQty,4,V.Local.fUnitQty)
						F.Intrinsic.String.Format(V.Local.fUnitQty,"00000000.0000",V.Local.sUnitQty)
						F.Intrinsic.String.RPad(V.Local.sUnitQty," ",16,V.Local.sUnitQty)
					'Replace the part and description for FINISH
					F.Intrinsic.Control.Case("FINISH")
						F.Intrinsic.String.Build("select * from V_INVENTORY_ALL where PART = '{0}'",V.DataTable.dtMain(V.Local.iFor).FINISH!FieldValTrim,V.Local.sSQL)
						F.ODBC.Connection!con.OpenLocalRecordsetRO("rstFins",V.Local.sSQL)
						F.Intrinsic.Control.If(V.ODBC.con!rstFins.EOF,=,False)
							F.Intrinsic.String.RPad(V.ODBC.con!rstFins.FieldValTrim!PART," ",20,V.Local.sPart)
							F.Intrinsic.String.RPad(V.ODBC.con!rstFins.FieldValTrim!DESCRIPTION," ",30,V.Local.sDescription)
						F.Intrinsic.Control.EndIf
						F.ODBC.con!rstFins.Close
					F.Intrinsic.Control.CaseElse
					F.Intrinsic.Control.EndSelect
					'Get the workcenter rate or inventory part cost
					F.Intrinsic.String.IsInString(V.Local.sPart,"*",True,V.Local.bInstr)
					F.Intrinsic.String.Len(V.Local.sPart.Trim,V.Local.iLen)
					F.Intrinsic.Control.If(V.Local.iLen,=,4,and,V.Local.sLMO,=,"L")
						F.Intrinsic.Control.If(V.Local.bInstr,=,True)
							F.Intrinsic.String.Build("select A.WORK_GROUP, A.PROTOTYPE_WC, B.STANDARD_COST from V_WORKGROUP_HEAD A left outer join V_WORKCENTERS B on A.PROTOTYPE_WC = B.MACHINE where A.WORK_GROUP = '{0}'",V.Local.sPart,V.Local.sSQL)
						F.Intrinsic.Control.Else
							F.Intrinsic.String.Build("select * from V_WORKCENTERS where MACHINE = '{0}'",V.Local.sPart,V.Local.sSQL)
						F.Intrinsic.Control.EndIf
						F.ODBC.Connection!con.OpenLocalRecordsetRO("rstWC",V.Local.sSQL)
						F.Intrinsic.Control.If(V.ODBC.con!rstWC.EOF,=,False)
							F.Intrinsic.String.Format(V.ODBC.con!rstWC.FieldValTrim!STANDARD_COST,"00000000.0000",V.Local.sRate)
						F.Intrinsic.Control.Else
							F.Intrinsic.String.Format(V.ODBC.con!rstRTR.FieldValTrim!RATE,"00000000.0000",V.Local.sRate)
						F.Intrinsic.Control.EndIf
						F.ODBC.con!rstWC.Close
					F.Intrinsic.Control.Else
						F.Intrinsic.String.Build("select * from V_INVENTORY_ALL where PART = '{0}'",V.Local.sPart,V.Local.sSQL)
						F.ODBC.Connection!con.OpenLocalRecordsetRO("rstInv",V.Local.sSQL)
						F.Intrinsic.Control.If(V.ODBC.con!rstInv.EOF,=,False)
							F.Intrinsic.String.Format(V.ODBC.con!rstInv.FieldValTrim!AMT_COST,"00000000.0000",v.Local.sRate)
							F.Intrinsic.String.RPad(V.ODBC.con!rstInv.FieldValTrim!DESCRIPTION," ",30,V.Local.sDescription)
						F.Intrinsic.Control.Else
							F.Intrinsic.String.Format(V.ODBC.con!rstRTR.FieldValTrim!RATE,"00000000.0000",V.Local.sRate)
						F.Intrinsic.Control.EndIf
						F.ODBC.con!rstInv.Close
					F.Intrinsic.Control.EndIf
					F.Intrinsic.String.RPad(V.Local.sRate," ",16,V.Local.sRate)
					'Replace the machining work center with the one selected in the data table
					F.Intrinsic.Control.If(V.ODBC.con!rstRTR.FieldValTrim!OPERATION,=,"MACH")
					F.Intrinsic.Control.AndIf(V.ODBC.con!rstRTR.FieldValTrim!PART_WC_OUTSIDE,<>,V.DataTable.dtMain(V.Local.iFor).MCCODE!FieldValTrim)
						F.Intrinsic.String.RPad(V.DataTable.dtMain(V.Local.iFor).MCCODE!FieldValTrim," ",20,V.Local.sPart)
					F.Intrinsic.Control.EndIf
					'Job		1-6
					'Suffix		7-9
					'Seq		10-15
					'Op Code	16-21
					'Set Up flg	22-22
					'LMOC		23-23
					'Desc		24-53
					'UOM		54-55
					'PWC		56-75
					'Router		76-95
					'Router Seq	96-101
					'Setup Time	102-117 8.4
					'Qty/1		118-133	8.4
					'Burden Rt	134-149	8.4
					'Est Hrs	150-165 8.4
					'Filler		166-225
					'Signoff	226-233
					'Comp Req	234-234
					'Filler		235-251
					'POPULATE THE TIME FOR DRILL CODES
					F.Intrinsic.Control.If(V.ODBC.con!rstRTR.FieldValTrim!OPERATION,=,"DRILL")
					F.Intrinsic.Control.AndIf(V.Local.bDrill,=,True)
						F.Intrinsic.String.Build("select USER54 from INV_EXTRA where PART = '{0}'",V.DataTable.dtMain(V.Local.iFor).DRILL_CODE!FieldValTrim,V.Local.sSQL)
						F.ODBC.Connection!con.OpenLocalRecordsetRO("rstDC",V.Local.sSQL)
						F.Intrinsic.Control.If(V.ODBC.con!rstDC.EOF,=,False)
							F.Intrinsic.Math.Div(V.ODBC.con!rstDC.FieldValFloat!USER54,60,V.Local.fUnitQty)
							F.Intrinsic.String.Format(V.Local.fUnitQty,"00000000.0000",V.Local.sUnitQty.Set)
							F.Intrinsic.String.RPad(V.Local.sUnitQty," ",16,V.Local.sUnitQty)
						F.Intrinsic.Control.EndIf
						F.ODBC.con!rstDC.Close
					F.Intrinsic.Control.EndIf
					F.Intrinsic.String.Concat(V.Local.sWO,"   ",V.Local.sSeq,V.Local.sOpCode," ",V.ODBC.con!rstRTR.FieldValTrim!LMO,V.Local.sDescription,V.Local.sUOM,V.Local.sPart,V.Local.sRouter,V.Local.sSeq,V.Local.sSetup,V.Local.sUnitQty,V.Local.sRate,V.Local.sLine)

					'ADD A COMMENT LINE TO THE STRING FOR INSERT LABOR PART CODE
					F.Intrinsic.Control.If(V.Local.bComment,=,True,and,V.ODBC.con!rstRTR.FieldValTrim!OPERATION,=,"INSERT")
						F.Intrinsic.Math.Add(V.Local.sSeq,1,V.Local.sSeq)
						F.Intrinsic.String.Format(V.Local.sSeq,"000000",V.Local.sSeq)
						F.Intrinsic.String.RPad(V.Local.sSeq," ",6,V.Local.sSeq)
						V.Local.sOpCode.Set("")
						F.Intrinsic.String.RPad(V.Local.sOpCode," ",6,V.Local.sOpCode)
						F.Intrinsic.String.Concat(V.Local.sInsertSize," INSERT",V.Local.sDescription)
						F.Intrinsic.String.RPad(V.Local.sDescription," ",30,V.Local.sDescription)
						F.Intrinsic.String.Concat(V.Local.sLine,V.Ambient.NewLine,V.Local.sWO,"   ",V.Local.sSeq,V.Local.sOpCode," ","C",V.Local.sDescription,"  ","                    ",V.Local.sRouter,V.Local.sSeq,"                ","                ","                ",V.Local.sLine)
						F.Intrinsic.Math.Add(V.Local.sSeq,1,V.Local.sSeq)
						F.Intrinsic.String.Format(V.Local.sSeq,"000000",V.Local.sSeq)
						F.Intrinsic.String.RPad(V.Local.sSeq," ",6,V.Local.sSeq)
						F.Intrinsic.String.RPad(V.Local.sInsertPC," ",30,V.Local.sDescription)
						F.Intrinsic.String.Concat(V.Local.sLine,V.Ambient.NewLine,V.Local.sWO,"   ",V.Local.sSeq,V.Local.sOpCode," ","C",V.Local.sDescription,"  ","                    ",V.Local.sRouter,V.Local.sSeq,"                ","                ","                ",V.Local.sLine)
						F.Intrinsic.Math.Add(V.Local.sSeq,1,V.Local.sSeq)
						F.Intrinsic.String.Format(V.Local.sSeq,"000000",V.Local.sSeq)
						F.Intrinsic.String.RPad(V.Local.sSeq," ",6,V.Local.sSeq)
						F.Intrinsic.String.Build("NUMBER OF INSERTS:  {0}",V.Args.Quantity,V.Local.sDescription)
						F.Intrinsic.String.RPad(V.Local.sDescription," ",30,V.Local.sDescription)
						F.Intrinsic.String.Concat(V.Local.sLine,V.Ambient.NewLine,V.Local.sWO,"   ",V.Local.sSeq,V.Local.sOpCode," ","C",V.Local.sDescription,"  ","                    ",V.Local.sRouter,V.Local.sSeq,"                ","                ","                ",V.Local.sLine)
					F.Intrinsic.Control.EndIf

					'ADD A COMMENT LINE TO THE STRING FOR 5 PIECE INSERT LABOR PART CODE
					F.Intrinsic.Control.If(V.ODBC.con!rstRTR.FieldValTrim!OPERATION,=,"SAWI")
						F.Intrinsic.Math.Add(V.Local.sSeq,1,V.Local.sSeq)
						F.Intrinsic.String.Format(V.Local.sSeq,"000000",V.Local.sSeq)
						F.Intrinsic.String.RPad(V.Local.sSeq," ",6,V.Local.sSeq)
						V.Local.sOpCode.Set("")
						F.Intrinsic.String.RPad(V.Local.sOpCode," ",6,V.Local.sOpCode)
						F.Intrinsic.String.Concat(V.Local.sInsertSize," INSERT",V.Local.sDescription)
						F.Intrinsic.String.RPad(V.Local.sDescription," ",30,V.Local.sDescription)
						F.Intrinsic.String.Concat(V.Local.sLine,V.Ambient.NewLine,V.Local.sWO,"   ",V.Local.sSeq,V.Local.sOpCode," ","C",V.Local.sDescription,"  ","                    ",V.Local.sRouter,V.Local.sSeq,"                ","                ","                ",V.Local.sLine)
						F.Intrinsic.Math.Add(V.Local.sSeq,1,V.Local.sSeq)
						F.Intrinsic.String.Format(V.Local.sSeq,"000000",V.Local.sSeq)
						F.Intrinsic.String.RPad(V.Local.sSeq," ",6,V.Local.sSeq)
						F.Intrinsic.String.Build("NUMBER OF INSERTS:  {0}",V.Args.Quantity,V.Local.sDescription)
						F.Intrinsic.String.RPad(V.Local.sDescription," ",30,V.Local.sDescription)
						F.Intrinsic.String.Concat(V.Local.sLine,V.Ambient.NewLine,V.Local.sWO,"   ",V.Local.sSeq,V.Local.sOpCode," ","C",V.Local.sDescription,"  ","                    ",V.Local.sRouter,V.Local.sSeq,"                ","                ","                ",V.Local.sLine)
					F.Intrinsic.Control.EndIf

					F.Intrinsic.Control.If(V.ODBC.con!rstRTR.FieldValTrim!OPERATION,=,"DRILL",and,V.Local.bDrill,=,False)
						V.Local.bExport.Set(False)
					F.Intrinsic.Control.ElseIf(V.Local.sPart.Trim,=,"FINISH",and,V.Local.bFinish,=,False)
						V.Local.bExport.Set(False)
					F.Intrinsic.Control.ElseIf(V.Local.sPart.Trim,=,"INSERT",and,V.Local.bInsertMatl,=,False)
						V.Local.bExport.Set(False)
					F.Intrinsic.Control.ElseIf(V.ODBC.con!rstRTR.FieldValTrim!OPERATION,=,"INSERT",and,V.Local.binsertLabr,=,False)
						V.Local.bExport.Set(False)
					F.Intrinsic.Control.ElseIf(V.ODBC.con!rstRTR.FieldValTrim!PART_WC_OUTSIDE,=,"AGLS",and,V.Local.bInsertLabr,=,False)
						V.Local.bExport.Set(False)
					F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.If(V.Local.bExport,=,True)
						F.Intrinsic.Control.If(V.Local.sJCOM.Trim,=,"")
							V.Local.sJCOM.Set(V.Local.sLine)
						F.Intrinsic.Control.Else
							F.Intrinsic.String.Concat(V.Local.sJCOM,V.Ambient.NewLine,V.Local.sLine,V.Local.sJCOM)
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
					F.ODBC.con!rstRTR.MoveNext
				F.Intrinsic.Control.Loop
				'String to File for JCM and JCOM
				F.Intrinsic.String.Concat(V.Caller.FilesDir,"\JBMDLA.TXT",V.Local.sFile)
				F.Intrinsic.File.String2File(V.Local.sFile,V.Local.sJCM)
				F.Intrinsic.String.Concat(V.Caller.FilesDir,"\JOBCOST.TXT",V.Local.sFile)
				F.Intrinsic.File.String2File(V.Local.sFile,V.Local.sJCOM)
				'Upload the Job Cost Master
				F.Intrinsic.String.Concat("UPLJBMUL/A!*!",V.Caller.CompanyCode,V.Local.sParameters)
				F.Global.General.CallWrapperSync(50,V.Local.sParameters)
				'Upload the Job Cost Operations Master
				F.Intrinsic.String.Concat("UPLJOBST/A!*!",V.Caller.CompanyCode,V.Local.sParameters)
				F.Global.General.CallWrapperSync(50,V.Local.sParameters)
				V.Local.sJCM.Set("")
				V.Local.sJCOM.Set("")
				'Sechedule the job
				F.Global.APS.ScheduleJob(V.Local.sWO,"","B",V.Local.dDueDate)
				'Add line to ORDER_TO_WO
				F.Intrinsic.String.Build("select * from ORDER_TO_WO where ORDER_NO = '{0}' and ORDER_LINE = '{1}0'",V.Local.sOrder,V.DataTable.dtMain(V.Local.iFor).LINE!FieldValTrim,V.Local.sSQL)
				F.ODBC.Connection!con.OpenLocalRecordsetRW("rstORDER",V.Local.sSQL)
				F.Intrinsic.Control.If(V.ODBC.con!rstORDER.EOF,=,True)
					F.ODBC.con!rstORDER.AddNew
					F.ODBC.con!rstORDER.Set!JOB(V.Local.sWO)
					F.ODBC.con!rstORDER.Set!SUFFIX("")
					F.ODBC.con!rstORDER.Set!ORDER_NO(V.Local.sOrder)
					F.Intrinsic.String.RPad(V.DataTable.dtMain(V.Local.iFor).LINE!FieldValTrim,"0",4,V.Local.sOrderLine)
					F.ODBC.con!rstORDER.Set!ORDER_LINE(V.Local.sOrderLine)
					F.ODBC.con!rstORDER.Set!MQD_SEQ("000")
					F.ODBC.con!rstORDER.Set!PART(V.DataTable.dtMain(V.Local.iFor).PART!FieldValTrim)
					F.ODBC.con!rstORDER.Set!LOCATION("")
					F.Intrinsic.String.Build("{1} X {0}",V.DataTable.dtMain(V.Local.iFor).LENGTH!FieldValFloat,V.DataTable.dtMain(V.Local.iFor).WIDTH!FieldValFloat,V.Local.sDescription)
					F.ODBC.con!rstORDER.Set!DESCRIPTION(V.Local.sDescription.Trim)
					F.ODBC.con!rstORDER.Set!QTY_ORD(V.Local.sQTY.Trim)
					F.ODBC.con!rstORDER.Set!QTY_WO(V.Local.sQTY.Trim)
					F.ODBC.con!rstORDER.Set!QTY_COMPLETE("0.0000")
					'YYYYMMDD
					F.Intrinsic.String.Format(V.DataTable.dtMain(V.Local.iFor).DATE_PROMISE!FieldValTrim,"YYYYMMDD",V.Local.sDueDate)
					F.ODBC.con!rstORDER.Set!DATE_ORDER_DUE(V.Local.sDueDate)
					F.Intrinsic.Date.DateAddWorkdays(V.DataTable.dtMain(V.Local.iFor).DATE_PROMISE!FieldValTrim,-1,62,V.Local.dDueDate)
					F.Intrinsic.String.Format(V.Local.dDueDate,"YYYYMMDD",V.Local.sDueDate)
					F.ODBC.con!rstORDER.Set!DATE_JOB_DUE(V.Local.sDueDate)
					F.ODBC.con!rstORDER.Set!USERID(V.Caller.User)
					F.ODBC.con!rstORDER.Set!SHIPTO_ID(V.Passed.000061.Trim)
					F.ODBC.con!rstORDER.Update
				F.Intrinsic.Control.EndIf
				F.ODBC.con!rstORDER.Close
				'Update the starting WO number
				F.Intrinsic.Math.Add(V.Local.iWO,1,V.Local.iWO)
				F.ODBC.con!rstWO.Set!F_LONG(V.Local.iWO)
				F.ODBC.con!rstWO.Update
				'Update the WO field in dtMain
				F.Data.DataTable.SetValue("dtMain",V.Local.iFor,"WO",V.Local.sWO.Trim)
				F.ODBC.con!rstWO.Close
			F.Intrinsic.Control.EndIf
			F.ODBC.con!rstRTR.Close
		F.Intrinsic.Control.Endif
		F.ODBC.con!rstSel.Close
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.iFor)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("Upload_WO_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
		F.ODBC.Connection!con.Close
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.End
Function.Intrinsic.Control.EndIf
Program.Sub.Upload_WO.End

Program.Sub.cmdUpload_Click.Start
F.Intrinsic.Control.SetErrorHandler("cmdUpload_Click_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)

F.Intrinsic.UI.InvokeWaitDialog("Processing Order Data","Order Entry")
F.Data.DataTable.SaveToDB("dtMain","con","GAB_4483_OE_LINES","ORDER_NO*!*LINE",7)
F.Data.DataTable.AcceptChanges("dtMain")
'Apply discounts to the order lines
F.Intrinsic.Control.CallSub(apply_discounts)
'Create an inventory batch and upload it
F.Intrinsic.Control.CallSub(upload_inventory)
'Create the sales order lines
F.Intrinsic.Control.CallSub(upload_oe_lines)
F.Intrinsic.UI.CloseWaitDialog
'Save Datatable to the database
F.Intrinsic.Control.CallSub(cmdsave_click)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("cmdUpload_Click_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
		F.ODBC.Connection!con.Close
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.End
Function.Intrinsic.Control.EndIf
Program.Sub.cmdUpload_Click.End

Program.Sub.Upload_Batch_Notes.Start
F.Intrinsic.Control.SetErrorHandler("Upload_Batch_Notes_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.sOrder.Declare
V.Local.sSQL.Declare

'SALES ORDER
F.Intrinsic.String.LPad(V.Passed.000003,"0",7,V.Local.sOrder)

F.Intrinsic.Control.If(V.Screen.f_Main!txtBatch.Text,<>,"")
	F.Intrinsic.String.Build("select * from GAB_4483_BATCH_NOTES where ORDER_NO = '{0}'",V.Local.sOrder,V.Local.sSQL)
	F.ODBC.Connection!con.OpenLocalRecordsetRW("rstSel",V.Local.sSQL)
	F.Intrinsic.Control.If(V.ODBC.con!rstSel.EOF,=,True)
		F.ODBC.con!rstSel.AddNew
	F.Intrinsic.Control.EndIf
		F.ODBC.con!rstSel.Set!ORDER_NO(V.Local.sOrder)
		F.ODBC.con!rstSel.Set!NOTES(V.Screen.f_Main!txtBatch.Text)
		F.ODBC.con!rstSel.Update
	F.ODBC.con!rstSel.Close
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("Upload_Batch_Notes_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
		F.ODBC.Connection!con.Close
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.End
Function.Intrinsic.Control.EndIf
Program.Sub.Upload_Batch_Notes.End

Program.Sub.ValidateLength.Start
F.Intrinsic.Control.SetErrorHandler("ValidateLength_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.iRow.Declare
V.Local.sSQL.Declare
v.Local.sret.Declare
V.Local.sMessage.Declare
V.Local.iRow.Set(V.Args.iRowID)

F.Intrinsic.Control.If(V.DataTable.dtMain(V.Local.iRow).PART_CODE!FieldValTrim,<>,"")
F.Intrinsic.Control.AndIf(V.DataTable.dtMain(V.Local.iRow).Length!FieldValFloat,>,0)
	F.Intrinsic.String.Build("select convert(USER6,SQL_FLOAT) as USER6, convert(USER8,SQL_FLOAT) as USER8 from INV_EXTRA where PART = '{0}'",V.DataTable.dtMain(V.Local.iRow).PART_CODE!FieldValTrim,V.Local.sSQL)
	F.ODBC.Connection!con.OpenLocalRecordsetRO("rstSel",V.Local.sSQL)
	F.Intrinsic.Control.If(V.ODBC.con!rstSel.EOF,=,False)
		F.Intrinsic.Control.If(V.DataTable.dtMain(V.Local.iRow).Length!FieldValFloat,<,V.ODBC.con!rstSel.FieldValFloat!USER6)
			F.Intrinsic.String.Build("Length Is Less Than The Minimum Length For This Part Code, Do you want to accept?.",V.Ambient.NewLine,V.Local.sMessage)
			F.Intrinsic.UI.Msgbox(V.Local.sMessage,"Order Entry",4,V.Local.sRet)
			F.Intrinsic.Control.If(V.Local.sRet,=,7)
'				GUI.f_Main.GsGcMain.SetCellAppearance("gvMAIN",V.Args.iColID,V.Local.iRow,"BackColor", "Red")
				GUI.f_Main.GsGcMain.FocusCell("gvMAIN",V.Local.iRow,V.Args.iColID)
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.ElseIf(V.DataTable.dtMain(V.Local.iRow).Length!FieldValFloat,>,V.ODBC.con!rstSel.FieldValFloat!USER8,AND,V.ODBC.con!rstSel.FieldValFloat!USER8,>,0)
			F.Intrinsic.String.Build("Length Is Greater Than The Maximum Length For This Part Code, Do you want to accept?.",V.Ambient.NewLine,V.Local.sMessage)
			F.Intrinsic.UI.Msgbox(V.Local.sMessage,"Order Entry",4,V.Local.sRet)
			F.Intrinsic.Control.If(V.Local.sRet,=,7)
'				GUI.f_Main.GsGcMain.SetCellAppearance("gvMAIN",V.Args.iColID,V.Local.iRow,"BackColor", "Red")
				GUI.f_Main.GsGcMain.FocusCell("gvMAIN",V.Local.iRow,V.Args.iColID)
			F.Intrinsic.Control.EndIf
		f.Intrinsic.Control.else
			GUI.f_Main.GsGcMain.GetCellAppearance("gvMAIN",V.Args.iColID,V.Local.iRow,"BackColor",v.Local.sret)
			F.Intrinsic.Control.If(v.Local.sret,<>,"***NO RETURN***")
'				GUI.f_Main.GsGcMain.SetCellAppearance("gvMAIN",V.Args.iColID,V.Local.iRow,"BackColor","White")
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("ValidateLength_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
		F.ODBC.Connection!con.Close
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.End
Function.Intrinsic.Control.EndIf
Program.Sub.ValidateLength.End

Program.Sub.ValidateWidth.Start
F.Intrinsic.Control.SetErrorHandler("ValidateWidth_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.iRow.Declare
V.Local.sSQL.Declare
v.Local.sRet.Declare
V.Local.sMessage.Declare
V.Local.iRow.Set(V.Args.iRowID)


F.Intrinsic.Control.If(V.DataTable.dtMain(V.Local.iRow).PART_CODE!FieldValTrim,<>,"")
F.Intrinsic.Control.AndIf(V.DataTable.dtMain(V.Local.iRow).WIDTH!FieldVal,>,0)
	F.Intrinsic.String.Build("select convert(USER5,SQL_FLOAT) as USER5, convert(USER7,SQL_FLOAT) as USER7 from INV_EXTRA where PART = '{0}'",V.DataTable.dtMain(V.Local.iRow).PART_CODE!FieldValTrim,V.Local.sSQL)
	F.ODBC.Connection!con.OpenLocalRecordsetRO("rstSel",V.Local.sSQL)
	F.Intrinsic.Control.If(V.ODBC.con!rstSel.EOF,=,False)
		F.Intrinsic.Control.If(V.DataTable.dtMain(V.Local.iRow).WIDTH!FieldValFloat,<,V.ODBC.con!rstSel.FieldValFloat!USER5)
			F.Intrinsic.String.Build("Width Is Less Than The Minimum Width For This Part Code, Do you want to accept?.",V.Ambient.NewLine,V.Local.sMessage)
			F.Intrinsic.UI.Msgbox(V.Local.sMessage,"Order Entry",4,V.Local.sRet)
			F.Intrinsic.Control.If(V.Local.sRet,=,7)
'				GUI.f_Main.GsGcMain.SetCellAppearance("gvMAIN",V.Args.iColID,V.Local.iRow,"BackColor", "Red")
				GUI.f_Main.GsGcMain.FocusCell("gvMAIN",V.Local.iRow,V.Args.iColID)
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.ElseIf(V.DataTable.dtMain(V.Local.iRow).WIDTH!FieldValFloat,>,V.ODBC.con!rstSel.FieldValFloat!USER7,AND,V.ODBC.con!rstSel.FieldValFloat!USER7,>,0)
			F.Intrinsic.String.Build("Width Is Greater Than The Maximum Width For This Part Code, Do you want to accept?.",V.Ambient.NewLine,V.Local.sMessage)
			F.Intrinsic.UI.Msgbox(V.Local.sMessage,"Order Entry",4,V.Local.sRet)
			F.Intrinsic.Control.If(V.Local.sRet,=,7)
'				GUI.f_Main.GsGcMain.SetCellAppearance("gvMAIN",V.Args.iColID,V.Local.iRow,"BackColor", "Red")
				GUI.f_Main.GsGcMain.FocusCell("gvMAIN",V.Local.iRow,V.Args.iColID)
			F.Intrinsic.Control.EndIf
		f.Intrinsic.Control.else	
			GUI.f_Main.GsGcMain.GetCellAppearance("gvMAIN",V.Args.iColID,V.Local.iRow,"BackColor",v.Local.sret)
			F.Intrinsic.Control.If(v.Local.sret,<>,"***NO RETURN***")
'				GUI.f_Main.GsGcMain.SetCellAppearance("gvMAIN",V.Args.iColID,V.Local.iRow,"BackColor", "White")
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("ValidateWidth_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
		F.ODBC.Connection!con.Close
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.End
Function.Intrinsic.Control.EndIf
Program.Sub.ValidateWidth.End

Program.Sub.LoadOptions.Start
F.Intrinsic.Control.SetErrorHandler("LoadOptions_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.bExists.Declare
V.Local.iFor.Declare
V.Local.sArray.Declare
V.Local.sFile.Declare
V.Local.sSplit.Declare
V.Local.sSQL.Declare

'Load the datatables for the insert field
F.Intrinsic.Control.If(V.DataTable.dtInsertMFG.Exists,=,True)
	F.Data.DataTable.Close("dtInsertMFG")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.DataTable.dtInsertPur.Exists,=,True)
	F.Data.DataTable.Close("dtInsertPur")
F.Intrinsic.Control.EndIf

'Load dtInsertMFG from SQL
'V.Local.sSQL.Set("select A.PART, A.DESCRIPTION, B.CUSTOMER_PART from V_INVENTORY_ALL A left outer join V_INV_CROSS_REF B on A.PART = B.PART AND A.LOCATION = B.LOCATION where A.CODE_SORT = 'INSERT' and A.CODE_SOURCE = 'P' order by B.CUSTOMER_PART")
'F.Data.DataTable.CreateFromSQL("dtInsertMFG","con",V.Local.sSQL,True)

'Load dtInsertPur from SQL
'V.Local.sSQL.Set("select PART, DESCRIPTION from V_INVENTORY_ALL where CODE_SORT = 'INSERT' and CODE_SOURCE = 'J' order by PART")
'F.Data.DataTable.CreateFromSQL("dtInsertPur","con",V.Local.sSQL,True)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("LoadOptions_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
		F.ODBC.Connection!con.Close
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.End
Function.Intrinsic.Control.EndIf
Program.Sub.LoadOptions.End

'Program.Sub.SetInsert.Start
'F.Intrinsic.Control.SetErrorHandler("SetInsert_Err")
'F.Intrinsic.Control.ClearErrors

'V.Local.sError.Declare(String)
'V.Local.iColumn.Declare
'V.Local.iRow.Declare
'V.Local.sDDL.Declare
'V.Local.sDescription.Declare
'V.Local.sMatlCode.Declare
'V.Local.sPartCode.Declare
'V.Local.sRet.Declare
'V.Local.sSel.Declare
'V.Local.sSQL.Declare
'V.Local.bInsert.Declare

'V.Local.iRow.Set(V.Args.iRowID)
''Get the Insert Part Code (User 15) and Insert Material Code (User 16) from the selected part code
'F.Intrinsic.String.Build("select * from INV_EXTRA where PART = '{0}'",V.DataTable.dtMain(V.Local.iRow).PART_CODE!FieldValTrim,V.Local.sSQL)
'F.ODBC.Connection!con.OpenLocalRecordsetRO("rstSel",V.Local.sSQL)
'F.Intrinsic.Control.If(V.ODBC.con!rstSel.EOF,=,False)
'	V.Local.sPartCode.Set(V.ODBC.con!rstSel.FieldValTrim!USER15)
'	V.Local.sMatlCode.Set(V.ODBC.con!rstSel.FieldValTrim!USER16)
'	F.Intrinsic.Control.If(V.ODBC.con!rstSel.FieldValLong!USER9,>,0)
'		V.Local.bInsert.Set(True)
'	F.Intrinsic.Control.Else
'		V.Local.bInsert.Set(False)
'	F.Intrinsic.Control.EndIf
'	
'	F.Intrinsic.Control.If(V.Local.sPartCode.Trim,=,"")
'		'If the part code is blank then it is purchased to job
'		'Set the INSERT cell to unlocked
'		GUI.f_Main.GsGcMain.GetColumnIndexByName("gvMain","INSERT_1",V.Local.iColumn)
'		GUI.f_Main.GsGcMain.SetCellProperty("gvMain",V.Local.iColumn,V.Local.iRow,"Locked",False)
'		'Get sDescription for sMatlCode from dtInsertPur
'		F.Intrinsic.String.Build("PART = '{0}'",V.Local.sMatlCode,V.Local.sSel)
'		F.Data.DataTable.Select("dtInsertPur",V.Local.sSel,V.Local.sRet)
'		F.Intrinsic.Control.If(V.Local.sRet,<>,"***NORETURN***")
'			F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)
'			'Set INSERT in dtMain to DESCRIPTION in dtInsertPur
'			'Set INSERT_PN in dtMain to sMatlCode
'			F.Intrinsic.Control.If(V.Local.bInsert)
'				F.Data.DataTable.SetValue("dtMain",V.Local.iRow,"INSERT_1",V.DataTable.dtInsertPur(V.Local.sRet(0)).DESCRIPTION!FieldValTrim,"INSERT_PN",V.Local.sMatlCode)
'			F.Intrinsic.Control.EndIf
'		F.Intrinsic.Control.EndIf
'	F.Intrinsic.Control.Else
'		'The part code is not blank so it is a manufactured insert
'		'Set the INSERT cell to locked
'		GUI.f_Main.GsGcMain.GetColumnIndexByName("gvMain","INSERT_1",V.Local.iColumn)
'		GUI.f_Main.GsGcMain.SetCellProperty("gvMain",V.Local.iColumn,V.Local.iRow,"Locked",True)
'		'Get sDescription for sMatlCode from dtInsertMFG
'		F.Intrinsic.String.Build("CUSTOMER_PART = '{0}'",V.Local.sMatlCode,V.Local.sSel)
'		F.Data.DataTable.Select("dtInsertMFG",V.Local.sSel,V.Local.sRet)
'		F.Intrinsic.Control.If(V.Local.sRet,<>,"***NORETURN***")
'			F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)
'			'Set INSERT in dtMain to DESCRIPTION in dtInsertPur
'			'Set INSERT_PN in dtMain to sMatlCode
'			'Set INSERT_PC in dtMain to sPartCode
'			F.Intrinsic.Control.If(V.Local.bInsert)
'				F.Data.DataTable.SetValue("dtMain",V.Local.iRow,"INSERT_1",V.DataTable.dtInsertMFG(V.Local.sRet(0)).DESCRIPTION!FieldValTrim,"INSERT_PN",V.Local.sMatlCode,"INSERT_PC",V.Local.sPartCode)
'			F.Intrinsic.Control.EndIf
'		F.Intrinsic.Control.EndIf
'	F.Intrinsic.Control.EndIf
'F.Intrinsic.Control.Else
'	'Set the INSERT cell to locked
'	GUI.f_Main.GsGcMain.GetColumnIndexByName("gvMain","INSERT_1",V.Local.iColumn)
'	GUI.f_Main.GsGcMain.SetCellProperty("gvMain",V.Local.iColumn,V.Local.iRow,"Locked",True)
'F.Intrinsic.Control.EndIf
'F.ODBC.con!rstSel.Close

'F.Intrinsic.Control.ExitSub

'F.Intrinsic.Control.Label("SetInsert_Err")
'F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
'	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
'	F.Intrinsic.UI.Msgbox(V.Local.sError)
'	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
'		F.ODBC.Connection!con.Close
'	F.Intrinsic.Control.EndIf
'	F.Intrinsic.Control.End
'Function.Intrinsic.Control.EndIf
'Program.Sub.SetInsert.End

'Program.Sub.CalculateInsert.Start
'F.Intrinsic.Control.SetErrorHandler("CalculateInsert_Err")
'F.Intrinsic.Control.ClearErrors

'V.Local.sError.Declare(String)
'V.Local.fBeltWidth.Declare
'V.Local.fInsertLength.Declare
'V.Local.fInsertSF.Declare
'V.Local.fInsertWidth.Declare
'V.Local.fUser10.Declare
'V.Local.fUser11.Declare
'V.Local.fUser12.Declare
'V.Local.fUser13.Declare
'V.Local.iInserts.Declare
'V.Local.iRails.Declare
'V.Local.iRow.Declare
'V.Local.sInsertPC.Declare
'V.Local.sInsertSize.Declare
'V.Local.sMaterial.Declare
'V.Local.sSQL.Declare

'V.Local.iRow.Set(V.Args.Row)

'F.Intrinsic.String.Build("select * from INV_EXTRA where PART = '{0}'",V.DataTable.dtMain(V.Local.iRow).PART_CODE!FieldValTrim,V.Local.sSQL)
'F.ODBC.Connection!con.OpenLocalRecordsetRO("rstSel",V.Local.sSQL)
'F.Intrinsic.Control.If(V.ODBC.con!rstSel.EOF,=,False)
'	F.Intrinsic.Control.SelectCase(V.Args.Type)
'		F.Intrinsic.Control.Case("INSERT")
'			'USER9	Number of Inserts
'			'USER10	Right Rail Width
'			'USER11	Left Rail Width
'			'USER12	Top Stile Width
'			'USER13	Bottom Stile Width
'			'USER14	Middle Belt Width
'			'USER15	Insert Part Code
'			'USER16	Insert Material Code

'			F.Intrinsic.Control.If(V.ODBC.con!rstSel.FieldValIsNumeric!USER10,=,True)
'				V.Local.fUser10.Set(V.ODBC.con!rstSel.FieldValFloat!USER10)
'			F.Intrinsic.Control.Else
'				V.Local.fUser10.Set(0)
'			F.Intrinsic.Control.EndIf
'			F.Intrinsic.Control.If(V.ODBC.con!rstSel.FieldValIsNumeric!USER11,=,True)
'				V.Local.fUser11.Set(V.ODBC.con!rstSel.FieldValFloat!USER11)
'			F.Intrinsic.Control.Else
'				V.Local.fUser11.Set(0)
'			F.Intrinsic.Control.EndIf
'			F.Intrinsic.Control.If(V.ODBC.con!rstSel.FieldValIsNumeric!USER12,=,True)
'				V.Local.fUser12.Set(V.ODBC.con!rstSel.FieldValFloat!USER12)
'			F.Intrinsic.Control.Else
'				V.Local.fUser12.Set(0)
'			F.Intrinsic.Control.EndIf
'			F.Intrinsic.Control.If(V.ODBC.con!rstSel.FieldValIsNumeric!USER13,=,True)
'				V.Local.fUser13.Set(V.ODBC.con!rstSel.FieldValFloat!USER13)
'			F.Intrinsic.Control.Else
'				V.Local.fUser13.Set(0)
'			F.Intrinsic.Control.EndIf
'			'Calculate the material length
'			F.Intrinsic.Math.Sub(V.DataTable.dtMain(V.Local.iRow).LENGTH!FieldValFloat,V.Local.fUser12,V.Local.fUser13,V.Local.fInsertLength)
'			'Set iInserts
'			V.Local.iInserts.Set(V.ODBC.con!rstSel.FieldValLong!USER9)
'			F.Intrinsic.Control.If(V.Local.iInserts,>,1)
'				F.Intrinsic.Math.Sub(V.Local.iInserts,1,V.Local.iRails)
'				F.Intrinsic.Math.Mult(V.Local.iRails,V.ODBC.con!rstSel.FieldValFloat!USER14,V.Local.fBeltWidth)
'				F.Intrinsic.Math.Sub(V.Local.fInsertLength,V.Local.fBeltWidth,V.Local.fInsertLength)
'				F.Intrinsic.Math.Div(V.Local.fInsertLength,V.Local.iInserts,V.Local.fInsertLength)
'			F.Intrinsic.Control.Else
'				V.Local.iInserts.Set(1)
'			F.Intrinsic.Control.EndIf
'			F.Intrinsic.Math.Round(V.Local.fInsertLength,3,V.Local.fInsertLength)
'			'Calculate the material width
'			F.Intrinsic.Math.Sub(V.DataTable.dtMain(V.Local.iRow).WIDTH!FieldValFloat,V.Local.fUser10,V.Local.fUser11,V.Local.fInsertWidth)
'			F.Intrinsic.Math.Round(V.Local.fInsertWidth,3,V.Local.fInsertWidth)
'			'Set sInsertSize
'			F.Intrinsic.String.Build("{1} X {0}",V.Local.fInsertLength,V.Local.fInsertWidth,V.Local.sInsertSize)
'			F.Intrinsic.String.Left(V.Local.sInsertSize,30,V.Local.sInsertSize)
'			'Set sInsertPC
'			V.Local.sInsertPC.Set(V.ODBC.con!rstSel.FieldValTrim!USER15)
'			'Set fInsertSF
'			F.Intrinsic.Math.Mult(V.Local.fInsertLength,V.Local.fInsertWidth,V.Local.fInsertSF)
'			F.Intrinsic.Math.Div(V.Local.fInsertSF,144,V.Local.fInsertSF)
'			F.Intrinsic.Math.Round(V.Local.fInsertSF,3,V.Local.fInsertSF)
'			'Set sMaterial
'			V.Local.sMaterial.Set(V.ODBC.con!rstSel.FieldValTrim!USER16)

'		F.Intrinsic.Control.Case("5PC-INSERT")
'			'USER24	Panel Width Adjustment
'			'USER25	Panel Length Adjustment
'			'Calculate the material length
'			F.Intrinsic.Math.Add(V.DataTable.dtMain(V.Local.iRow).LENGTH!FieldValFloat,V.ODBC.con!rstSel.FieldValFloat!USER25,V.Local.fInsertLength)
'			'Calculate the material width
'			F.Intrinsic.Math.Add(V.DataTable.dtMain(V.Local.iRow).WIDTH!FieldValFloat,V.ODBC.con!rstSel.FieldValFloat!USER24,V.Local.fInsertWidth)
'			'Set sInsertSize
'			F.Intrinsic.String.Build("{1} X {0}",V.Local.fInsertLength,V.Local.fInsertWidth,V.Local.sInsertSize)
'			F.Intrinsic.String.Left(V.Local.sInsertSize,30,V.Local.sInsertSize)
'			'Set sInsertPC
'			V.Local.sInsertPC.Set("")
'			'Set sInsertSF
'			F.Intrinsic.Math.Mult(V.Local.fInsertLength,V.Local.fInsertWidth,V.Local.fInsertSF)
'			F.Intrinsic.Math.Div(V.Local.fInsertSF,144,V.Local.fInsertSF)
'			F.Intrinsic.Math.Round(V.Local.fInsertSF,3,V.Local.fInsertSF)
'			'Set sMaterial
'			V.Local.sMaterial.Set("")
'			'Set iInserts
'			V.Local.iInserts.Set(V.ODBC.con!rstSel.FieldValLong!USER9)
'			F.Intrinsic.Control.If(V.Local.iInserts,>,1)
'				F.Intrinsic.Math.Sub(V.Local.iInserts,1,V.Local.iRails)
'				F.Intrinsic.Math.Mult(V.Local.iRails,V.ODBC.con!rstSel.FieldValFloat!USER14,V.Local.fBeltWidth)
'				F.Intrinsic.Math.Sub(V.Local.fInsertLength,V.Local.fBeltWidth,V.Local.fInsertLength)
'				F.Intrinsic.Math.Div(V.Local.fInsertLength,V.Local.iInserts,V.Local.fInsertLength)
'			f.Intrinsic.Control.Else
'				V.Local.iInserts.Set(1)
'			F.Intrinsic.Control.EndIf
'	F.Intrinsic.Control.EndSelect
'F.Intrinsic.Control.EndIf

'F.Intrinsic.Variable.AddRV("Length",V.Local.fInsertLength)
'F.Intrinsic.Variable.AddRV("Width",V.Local.fInsertWidth)
'F.Intrinsic.Variable.AddRV("SF",V.Local.fInsertSF)
'F.Intrinsic.Variable.AddRV("PC",V.Local.sInsertPC)
'F.Intrinsic.Variable.AddRV("Size",V.Local.sInsertSize)
'F.Intrinsic.Variable.AddRV("Material",V.Local.sMaterial)
'F.Intrinsic.Variable.AddRV("Quantity",V.Local.iInserts)

'F.Intrinsic.Control.ExitSub

'F.Intrinsic.Control.Label("CalculateInsert_Err")
'F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
'	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
'	F.Intrinsic.UI.Msgbox(V.Local.sError)
'	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
'		F.ODBC.Connection!con.Close
'	F.Intrinsic.Control.EndIf
'	F.Intrinsic.Control.End
'Function.Intrinsic.Control.EndIf
'Program.Sub.CalculateInsert.End

Program.Sub.CreateDtCSV.Start
F.Intrinsic.Control.SetErrorHandler("CreateDtCSV_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)

'Make sure that the table isn't resident in memory
F.Intrinsic.Control.If(V.DataTable.dtCSV.Exists,=,True)
	F.Data.DataView.Close("dvCSV")
	F.Data.DataTable.DeleteRow("dtCSV")
	F.Data.DataTable.Close("dtCSV")
F.Intrinsic.Control.EndIf

F.Intrinsic.UI.ChangeWaitStatus("Building CSV File")

F.Data.DataTable.Create("dtCSV",True)
F.Data.DataTable.AddColumn("dtCSV","Material","String")
F.Data.DataTable.AddColumn("dtCSV","Door Width","Float")
F.Data.DataTable.AddColumn("dtCSV","Door Height","Float")
F.Data.DataTable.AddColumn("dtCSV","Quantity","Long")
F.Data.DataTable.AddColumn("dtCSV","Wood Grain","Long")
F.Data.DataTable.AddColumn("dtCSV","Outside Passes","String")
F.Data.DataTable.AddColumn("dtCSV","Style","String")
F.Data.DataTable.AddColumn("dtCSV","Profile Description","String")
F.Data.DataTable.AddColumn("dtCSV","Global Settings","String")
F.Data.DataTable.AddColumn("dtCSV","Horizontal Mullion Offset","String")
F.Data.DataTable.AddColumn("dtCSV","Straight Side","String")
F.Data.DataTable.AddColumn("dtCSV","T B S Edge","String")
F.Data.DataTable.AddColumn("dtCSV","Straight Side Edge","String")
F.Data.DataTable.AddColumn("dtCSV","Flute Count","String")
F.Data.DataTable.AddColumn("dtCSV","Channel Passes","String")
F.Data.DataTable.AddColumn("dtCSV","Pocket Description","String")
F.Data.DataTable.AddColumn("dtCSV","Channel Spacing","String")
F.Data.DataTable.AddColumn("dtCSV","Rail Offset","String")
F.Data.DataTable.AddColumn("dtCSV","Style Offset","String")
F.Data.DataTable.AddColumn("dtCSV","VChannel Passes","String")
F.Data.DataTable.AddColumn("dtCSV","BottomHoriz MullionOffset","String")
F.Data.DataTable.AddColumn("dtCSV","Left Opers","String")
F.Data.DataTable.AddColumn("dtCSV","Right Opers","String")
F.Data.DataTable.AddColumn("dtCSV","Side","String")
F.Data.DataTable.AddColumn("dtCSV","Top Bottom Opers","String")
F.Data.DataTable.AddColumn("dtCSV","Rough Outside Passes","String")
F.Data.DataTable.AddColumn("dtCSV","Top Opers","String")
F.Data.DataTable.AddColumn("dtCSV","Bottom Opers","String")
F.Data.DataTable.AddColumn("dtCSV","Chord Height","String")
F.Data.DataTable.AddColumn("dtCSV","ItemNum1","String")
F.Data.DataTable.AddColumn("dtCSV","BatchNum","String")
F.Data.DataTable.AddColumn("dtCSV","Answer Table","String")
F.Data.DataTable.AddColumn("dtCSV","WOBC1","String")
F.Data.DataTable.AddColumn("dtCSV","WOText1","String")
F.Data.DataTable.AddColumn("dtCSV","WOBC2","String")
F.Data.DataTable.AddColumn("dtCSV","WOText2","String")
F.Data.DataTable.AddColumn("dtCSV","WOBC3","String")
F.Data.DataTable.AddColumn("dtCSV","WOText3","String")
F.Data.DataTable.AddColumn("dtCSV","WOBC4","String")
F.Data.DataTable.AddColumn("dtCSV","WOText4","String")
F.Data.DataTable.AddColumn("dtCSV","WOBC5","String")
F.Data.DataTable.AddColumn("dtCSV","WOText5","String")
F.Data.DataTable.AddColumn("dtCSV","WOBC6","String")
F.Data.DataTable.AddColumn("dtCSV","WOText6","String")
F.Data.DataTable.AddColumn("dtCSV","WOBC7","String")
F.Data.DataTable.AddColumn("dtCSV","WOText7","String")
F.Data.DataTable.AddColumn("dtCSV","WOBC8","String")
F.Data.DataTable.AddColumn("dtCSV","WOText8","String")
F.Data.DataTable.AddColumn("dtCSV","WOBC9","String")
F.Data.DataTable.AddColumn("dtCSV","WOText9","String")
F.Data.DataTable.AddColumn("dtCSV","SerialNum","String")
F.Data.DataTable.AddColumn("dtCSV","DrillBarCode","String")
F.Data.DataTable.AddColumn("dtCSV","WONum","String")
F.Data.DataTable.AddColumn("dtCSV","SalesOrderNum","String")
F.Data.DataTable.AddColumn("dtCSV","CustName","String")
F.Data.DataTable.AddColumn("dtCSV","QtyOrd","String")
F.Data.DataTable.AddColumn("dtCSV","DueDate","String")
F.Data.DataTable.AddColumn("dtCSV","WXL","String")
F.Data.DataTable.AddColumn("dtCSV","Description","String")
F.Data.DataTable.AddColumn("dtCSV","Notes","String")
F.Data.DataTable.AddColumn("dtCSV","PO","String")
F.Data.DataTable.AddColumn("dtCSV","PartCode","String")
F.Data.DataTable.AddColumn("dtCSV","ZPartNum","String")
F.Data.DataTable.AddColumn("dtCSV","RUN_ID","String")
F.Data.DataTable.AddColumn("dtCSV","LOG_ID","String")
F.Data.DataTable.AddColumn("dtCSV","BIRUNID","String")
F.Data.DataTable.AddColumn("dtCSV","REPORT_ID","String")
F.Data.DataTable.AddColumn("dtCSV","REPORT_SEQ","String")
F.Data.DataTable.AddColumn("dtCSV","USER","String")
F.Data.DataTable.AddColumn("dtCSV","COCODE","String")
F.Data.DataTable.AddColumn("dtCSV","Finish","String")

F.Data.DataView.Create("dtCSV","dvCSV")

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("CreateDtCSV_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
		F.ODBC.Connection!con.Close
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.End
Function.Intrinsic.Control.EndIf
Program.Sub.CreateDtCSV.End

Program.Sub.PopulatedtCSV.Start
F.Intrinsic.Control.SetErrorHandler("PopulatedtCSV_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.bExists.Declare
V.Local.fDoorArea.Declare
V.Local.fDoorHeight.Declare
V.Local.fDoorWidth.Declare
V.Local.fLengthMM.Declare
V.Local.fQuantity.Declare
V.Local.fThickness.Declare
V.Local.fThicknessMM.Declare
V.Local.fWidthMM.Declare
V.Local.iBIRRUNID.Declare
V.Local.iCount.Declare
V.Local.iFor.Declare
V.Local.iLength.Declare
V.Local.iLengthMM.Declare
V.Local.iLOG_ID.Declare
V.Local.iREPORT_ID.Declare
V.Local.iREPORT_SEQ.Declare
V.Local.iRUN_ID.Declare
V.Local.iSerial.Declare
V.Local.iSuffix.Declare
V.Local.iThicknessMM.Declare
V.Local.iWidthMM.Declare
V.Local.sAnswerTable.Declare
V.Local.sBatchNum.Declare
V.Local.sBottomOpers.Declare
V.Local.sBottomHorizMullionOffset.Declare
V.Local.sChannelPasses.Declare
V.Local.sChannelSpacing.Declare
V.Local.sChordHeight.Declare
V.Local.sCSV.Declare
V.Local.sCustName.Declare
V.Local.sData.Declare
V.Local.sDCLength.Declare
V.Local.sDCThickness.Declare
V.Local.sDCWidth.Declare
V.Local.sDescription.Declare
V.Local.sDrillBarCode.Declare
V.Local.sDrillCode.Declare
V.Local.sDueDate.Declare
V.Local.sFields.Declare
V.Local.sFile.Declare
V.Local.sFluteCount.Declare
V.Local.sGlobalSettings.Declare
V.Local.sHorizontalMullionOffset.Declare
V.Local.sItemNum1.Declare
V.Local.sLeftOpers.Declare
V.Local.sLine.Declare
V.Local.sMaterial.Declare
V.Local.sNotes.Declare
V.Local.sOutsidePasses.Declare
V.Local.sPartCode.Declare
V.Local.sPO.Declare
V.Local.sPocketDescription.Declare
V.Local.sPrefix.Declare
V.Local.sProfileDescription.Declare
V.Local.sQtyOrd.Declare
V.Local.sRailOffset.Declare
V.Local.sRightOpers.Declare
V.Local.sRoughOutsidePasses.Declare
V.Local.sRow.Declare
V.Local.sSalesOrderNum.Declare
V.Local.sSel.Declare
V.Local.sSerialNum.Declare
V.Local.sSide.Declare
V.Local.sSQL.Declare
V.Local.sStraightSide.Declare
V.Local.sStraightSideEdge.Declare
V.Local.sStyle.Declare
V.Local.sStyleOffset.Declare
V.Local.sTBSEdge.Declare
V.Local.sTopBottomOpers.Declare
V.Local.sTopOpers.Declare
V.Local.sVChannelPasses.Declare
V.Local.sWOBC1.Declare
V.Local.sWOBC2.Declare
V.Local.sWOBC3.Declare
V.Local.sWOBC4.Declare
V.Local.sWOBC5.Declare
V.Local.sWOBC6.Declare
V.Local.sWOBC7.Declare
V.Local.sWOBC8.Declare
V.Local.sWOBC9.Declare
V.Local.sWONum.Declare
V.Local.sWoodgrain.Declare
V.Local.sWOText1.Declare
V.Local.sWOText2.Declare
V.Local.sWOText3.Declare
V.Local.sWOText4.Declare
V.Local.sWOText5.Declare
V.Local.sWOText6.Declare
V.Local.sWOText7.Declare
V.Local.sWOText8.Declare
V.Local.sWOText9.Declare
V.Local.sWXL.Declare
V.Local.sZPartNum.Declare

'Set the batch number
V.Local.sBatchNum.Set("")

V.Local.sArray.Declare
V.Local.sSplit.Declare

'LOAD CONFIG FILE TO DTCONFIG
F.Intrinsic.Control.If(V.DataTable.dtConfig.Exists,=,True)
	F.Data.DataTable.DeleteRow("dtConfig")
	F.Data.DataTable.Close("dtConfig")
F.Intrinsic.Control.EndIf
F.Intrinsic.String.Concat(V.Caller.FilesDir,"\GCG_5364.cfg",V.Local.sFile)
F.Intrinsic.File.Exists(V.Local.sFile,V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists,=,False)
	F.Intrinsic.UI.Msgbox("Configuration file is missing")
	F.Intrinsic.Control.CallSub(unload)
F.Intrinsic.Control.EndIf
F.Data.DataTable.Create("dtConfig",True)
F.Data.DataTable.AddColumn("dtConfig","WC","String")
F.Data.DataTable.AddColumn("dtConfig","IO","String")
F.Data.DataTable.AddColumn("dtConfig","Type","String")
F.Data.DataTable.AddColumn("dtConfig","Folder","String")
F.Intrinsic.File.File2String(V.Local.sFile,V.Local.sArray)
F.Intrinsic.String.Split(V.Local.sArray,V.Ambient.NewLine,V.Local.sArray)
F.Intrinsic.Control.For(V.Local.iFor,0,V.Local.sArray.UBound,1)
	F.Intrinsic.Control.If(V.Local.sArray(V.Local.iFor).Left2,=,"//")
	F.Intrinsic.Control.ElseIf(V.Local.sArray(V.Local.iFor).Trim,=,"")
	F.Intrinsic.Control.Else
		F.Intrinsic.String.Split(V.Local.sArray(V.Local.iFor),"|",V.Local.sSplit)
		F.Data.DataTable.AddRow("dtConfig","WC",V.Local.sSplit(0),"IO",V.Local.sSplit(1),"Type",V.Local.sSplit(2),"Folder",V.Local.sSplit(3))
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.iFor)


'Set the report ID
F.Global.BI.GetIDFromName("JBC_Part.lab",V.Local.iREPORT_ID)
'Set the report Sequence
V.Local.iREPORT_SEQ.Set("0")
'Set the Run ID
F.Global.BI.GetRunID(V.Local.iRUN_ID)
'Set the BI Run ID
V.Local.iBIRRUNID.Set(V.Local.iRUN_ID)
'Set the Log ID
F.Global.BI.StartLogging(V.Local.iBIRRUNID,V.Local.iREPORT_ID,V.Local.iREPORT_SEQ,"",V.Local.iLOG_ID)


F.Intrinsic.Control.If(V.DataTable.dtMain.Exists,=,True)
	F.Data.DataTable.Close("dtMain")
F.Intrinsic.Control.EndIf

F.Intrinsic.String.Build("select ORD.PL,MATL,FINISH,WIDTH,LENGTH,ORD.QTY_ORDER,WGRAIN,DRILL_CODE,ORD.NOTES,PART_CODE,ORDER_NO,ORD.RECORD_NO,JOB,Ord.DATE_PROMISE,Name_CUSTOMER from GCG_5364_OE_LINES ORD Join job_header WO on ORD.ORDER_NO = WO.sales_order and left(ORD.RECORD_NO,3) = WO.sales_order_line join v_customer_master Mast on Wo.customer = Mast.customer where WO.JOB + WO.Suffix in ({0}) and ORD.PL = 'MM'",V.Args.WOLIST,V.Local.sSQL)

F.Data.DataTable.CreateFromSQL("dtMain","con",V.Local.sSQL)

'Loop Through dtMain, add values to dtCSV for lines with a BATCH_CHECK = True
F.Intrinsic.Control.For(V.Local.iFor,0,V.DataTable.dtMain.RowCount--,1)
	F.Intrinsic.UI.ChangeWaitStatus("Building CSV File",V.Local.iFor,0,V.DataTable.dtMain.RowCount--)
	F.Intrinsic.Control.If(V.DataTable.dtMain(V.Local.iFor).PL!FieldVal,=,"MM")

		'Set Material equal to the material in dtMain
		V.Local.sMaterial.Set(V.DataTable.dtMain(V.Local.iFor).MATL!FieldValTrim)

		'Get thickness from the inventory master for the finish code and store in fThickness
		F.Intrinsic.String.Build("select * from V_INVENTORY_MST3 where PART = '{0}'",V.DataTable.dtMain(V.Local.iFor).FINISH!FieldValTrim,V.Local.sSQL)
		F.ODBC.Connection!con.OpenLocalRecordsetRO("rstSel",V.Local.sSQL)
		F.Intrinsic.Control.If(V.ODBC.con!rstSel.EOF,=,False)
			V.Local.fThickness.Set(V.ODBC.con!rstSel.FieldValFloat!THICKNESS)
		F.Intrinsic.Control.Else
			V.Local.fThickness.Set(0)
		F.Intrinsic.Control.EndIf
		F.ODBC.con!rstSel.Close
		'Set molding width equal to the value in dtMain less thickness
		F.Intrinsic.Math.Sub(V.DataTable.dtMain(V.Local.iFor).WIDTH!FieldValFloat,V.Local.fThickness,V.Local.fDoorWidth)

		'Set molding height equal to the value in dtMain less thickness
		F.Intrinsic.Math.Sub(V.DataTable.dtMain(V.Local.iFor).LENGTH!FieldValFloat,V.Local.fThickness,V.Local.fDoorHeight)

		'Set Quantity equal to the value in dtMain
		V.Local.fQuantity.Set(V.DataTable.dtMain(V.Local.iFor).QTY_ORDER!FieldVal)

		'Set Woodgrain, Drill Code, QtyOrd, DueDate, WXL, Notes, and PartCode based on the value in GAB_4483_OE_LINES
		F.Intrinsic.Control.If(V.DataTable.dtMain(V.Local.iFor).WGRAIN!FieldVal,=,True)
			V.Local.sWoodgrain.Set(1)
		F.Intrinsic.Control.Else
			V.Local.sWoodgrain.Set(0)
		F.Intrinsic.Control.EndIf
		'Drill barcode is 18 characters
		F.Intrinsic.Control.If(V.DataTable.dtMain(V.Local.iFor).DRILL_CODE!FieldValTrim,<>,"")
			'First 5 - drill code
			'Second 5 - Width in mm with one implied decimal place
			'Third 5 - Length in mm with one implied decimal place
			'Last 3 - Thickness in mm with one implied decimal place
			F.Intrinsic.String.LPad(V.DataTable.dtMain(V.Local.iFor).DRILL_CODE!FieldValTrim,"0",5,V.Local.sDrillCode)
			F.Intrinsic.Math.Mult(V.DataTable.dtMain(V.Local.iFor).WIDTH!FieldValFloat,10,25.4,V.Local.fWidthMM)
			F.Intrinsic.Math.Floor(V.Local.fWidthMM,V.Local.iWidthMM)
			F.Intrinsic.String.Format(V.Local.iWidthMM,"00000",V.Local.sDCWidth)
			F.Intrinsic.Math.Mult(V.DataTable.dtMain(V.Local.iFor).LENGTH!FieldValFloat,10,25.4,V.Local.fLengthMM)
			F.Intrinsic.Math.Floor(V.Local.fLengthMM,V.Local.iLengthMM)
			F.Intrinsic.String.Format(V.Local.iLengthMM,"00000",V.Local.sDCLength)
			F.Intrinsic.Math.Mult(V.Local.fThickness,10,25.4,V.Local.fThicknessMM)
			F.Intrinsic.Math.Floor(V.Local.fThicknessMM,V.Local.iThicknessMM)
			F.Intrinsic.String.Format(V.Local.iThicknessMM,"000",V.Local.sDCThickness)
			F.Intrinsic.String.Concat(V.Local.sDrillCode,V.Local.sDCWidth,V.Local.sDCLength,V.Local.sDCThickness,V.Local.sDrillBarCode)
		F.Intrinsic.Control.Else
			V.Local.sDrillBarCode.Set("")
		F.Intrinsic.Control.EndIf
		F.Intrinsic.String.Format(V.DataTable.dtMain(V.Local.iFor).QTY_ORDER!FieldValFloat,"0",V.Local.sQtyOrd)
		F.Intrinsic.String.Format(V.DataTable.dtMain(V.Local.iFor).DATE_PROMISE!FieldVal,"MM/DD/YYYY",V.Local.sDueDate)
		F.Intrinsic.String.Build("{0} X {1}",V.DataTable.dtMain(V.Local.iFor).WIDTH!FieldValFloat,V.DataTable.dtMain(V.Local.iFor).LENGTH!FieldValFloat,V.Local.sWXL)
		V.Local.sNotes.Set(V.DataTable.dtMain(V.Local.iFor).NOTES!FieldValTrim)
		V.Local.sPartCode.Set(V.DataTable.dtMain(V.Local.iFor).PART_CODE!FieldValTrim)

		'Set Style equal to USER36
		'Set Profile Description equal to USER37
		'Set Global Settings equal to USER38
		'These INV Extra fields are based on the part code
		'Outside Passes is developed from door area
		'Door area is compared against USER31 (SmallSqInch) and USER32 (LargeSqlInch)
		'If no values are in those fields use USER34 (Medium Outside Passes)
		'If USER33 (Small Outside Passes) is blank then use USER34
		'If USER35 (Large Outside Passes) is blank then use USER34
		F.Intrinsic.String.Build("select * from INV_EXTRA where PART = '{0}'",V.DataTable.dtMain(V.Local.iFor).PART_CODE!FieldValTrim,V.Local.sSQL)
		F.ODBC.Connection!con.OpenLocalRecordsetRO("rstSel",V.Local.sSQL)
		F.Intrinsic.Control.If(V.ODBC.con!rstSel.EOF,=,False)
			V.Local.sStyle.Set(V.ODBC.con!rstSel.FieldValTrim!USER36)
			V.Local.sProfileDescription.Set(V.ODBC.con!rstSel.FieldValTrim!USER37)
			V.Local.sGlobalSettings.Set(V.ODBC.con!rstSel.FieldValTrim!USER38)
			'Set door area
			F.Intrinsic.Math.Mult(V.Local.fDoorHeight,V.Local.fDoorWidth,V.Local.fDoorArea)
			F.Intrinsic.Control.If(V.ODBC.con!rstSel.FieldValTrim!USER31,<>,"")
			F.Intrinsic.Control.AndIf(V.ODBC.con!rstSel.FieldValTrim!USER32,<>,"")
				'Compare door area
				F.Intrinsic.Control.If(V.Local.fDoorArea,<=,V.ODBC.con!rstSel.FieldValFloat!USER31)
					'Use Small Outside Passes if it isn't blank, otherwise use Medium Outside Passes
					F.Intrinsic.Control.If(V.ODBC.con!rstSel.FieldValTrim!USER33,<>,"")
						V.Local.sOutsidePasses.Set(V.ODBC.con!rstSel.FieldValTrim!USER33)
					F.Intrinsic.Control.ElseIf(V.ODBC.con!rstSel.FieldValTrim!USER34,<>,"")
						V.Local.sOutsidePasses.Set(V.ODBC.con!rstSel.FieldValTrim!USER34)
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.ElseIf(V.Local.fDoorArea,>=,V.ODBC.con!rstSel.FieldValFloat!USER32)
					'Use Large Outside Passes if it isn't blank, otherwise use Medium Outside Passes
					F.Intrinsic.Control.If(V.ODBC.con!rstSel.FieldValTrim!USER35,<>,"")
						V.Local.sOutsidePasses.Set(V.ODBC.con!rstSel.FieldValTrim!USER35)
					F.Intrinsic.Control.ElseIf(V.ODBC.con!rstSel.FieldValTrim!USER34,<>,"")
						V.Local.sOutsidePasses.Set(V.ODBC.con!rstSel.FieldValTrim!USER34)
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.Else
					'Use Medium Outside Passes if it isn't blank
					F.Intrinsic.Control.If(V.ODBC.con!rstSel.FieldValTrim!USER34,<>,"")
						V.Local.sOutsidePasses.Set(V.ODBC.con!rstSel.FieldValTrim!USER34)
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Else
				'Use Medium Outside Passes if it isn't blank
				F.Intrinsic.Control.If(V.ODBC.con!rstSel.FieldValTrim!USER34,<>,"")
					V.Local.sOutsidePasses.Set(V.ODBC.con!rstSel.FieldValTrim!USER34)
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf
			'USER39	Horizontal_Mullion_Offset
			V.Local.sHorizontalMullionOffset.Set(V.ODBC.con!rstSel.FieldValTrim!USER39)
			'USER40	Straight_Side
			V.Local.sStraightSide.Set(V.ODBC.con!rstSel.FieldValTrim!USER40)
			'USER41	T_B_S_Edge
			V.Local.sTBSEdge.Set(V.ODBC.con!rstSel.FieldValTrim!USER41)
			'USER42	Straight_Side_Edge
			V.Local.sStraightSideEdge.Set(V.ODBC.con!rstSel.FieldValTrim!USER42)
			'USER43	Flute_Count
			V.Local.sFluteCount.Set(V.ODBC.con!rstSel.FieldValTrim!USER43)
			'USER44	Channel_Passes
			V.Local.sChannelPasses.Set(V.ODBC.con!rstSel.FieldValTrim!USER44)
			'USER45	Pocket_Description
			V.Local.sPocketDescription.Set(V.ODBC.con!rstSel.FieldValTrim!USER45)
			'USER46	Channel_Spacing
			V.Local.sChannelSpacing.Set(V.ODBC.con!rstSel.FieldValTrim!USER46)
			'USER47	Rail_Offset
			V.Local.sRailOffset.Set(V.ODBC.con!rstSel.FieldValTrim!USER47)
			'USER48	Style_Offset
			V.Local.sStyleOffset.Set(V.ODBC.con!rstSel.FieldValTrim!USER48)
			'USER49	VChannel_Passes
			V.Local.sVChannelPasses.Set(V.ODBC.con!rstSel.FieldValTrim!USER49)
			'USER50	BottomHoriz_MullionOffset
			V.Local.sBottomHorizMullionOffset.Set(V.ODBC.con!rstSel.FieldValTrim!USER50)
			'USER51	Left_Opers
			V.Local.sLeftOpers.Set(V.ODBC.con!rstSel.FieldValTrim!USER51)
			'USER52	Right_Opers
			V.Local.sRightOpers.Set(V.ODBC.con!rstSel.FieldValTrim!USER52)
			'USER53	Top_Bottom_Opers
			V.Local.sTopBottomOpers.Set(V.ODBC.con!rstSel.FieldValTrim!USER53)
			'USER55 Side
			V.Local.sSide.Set(V.ODBC.con!rstSel.FieldValTrim!USER55)
			'USER56 Rough_Outside_Passes
			V.Local.sRoughOutsidePasses.Set(V.ODBC.con!rstSel.FieldValTrim!USER56)
			'USER57 Top_Opers
			V.Local.sTopOpers.Set(V.ODBC.con!rstSel.FieldValTrim!USER57)
			'USER58 Chord_Height
			V.Local.sChordHeight.Set(V.ODBC.con!rstSel.FieldValTrim!USER58)
		F.Intrinsic.Control.EndIf
		F.ODBC.con!rstSel.Close

		F.Intrinsic.String.Build("{0}-{1}",V.DataTable.dtMain(V.Local.iFor).ORDER_NO!FieldValTrim,V.DataTable.dtMain(V.Local.iFor).RECORD_NO!FieldValTrim,V.Local.sItemNum1)
		'Set Answer Table to "XX_" + ItemNum1
		F.Intrinsic.String.Concat("XX_",V.Local.sItemNum1,V.Local.sAnswerTable)

		' Set values for WOBC1, WOText1, WOBC2, WOText2, WOBC3, WOText3, WOBC4, WOText4, WOBC5, WOText5, WOBC6, 
		' WOText6, WOBC7, WOText7, WOBC8, WOText8, WOBC9, and WOText9
		V.Local.sWOBC1.Set("")
		V.Local.sWOText1.Set("")
		V.Local.sWOBC2.Set("")
		V.Local.sWOText2.Set("")
		V.Local.sWOBC3.Set("")
		V.Local.sWOText3.Set("")
		V.Local.sWOBC4.Set("")
		V.Local.sWOText4.Set("")
		V.Local.sWOBC5.Set("")
		V.Local.sWOText5.Set("")
		V.Local.sWOBC6.Set("")
		V.Local.sWOText6.Set("")
		V.Local.sWOBC7.Set("")
		V.Local.sWOText7.Set("")
		V.Local.sWOBC8.Set("")
		V.Local.sWOText8.Set("")
		V.Local.sWOBC9.Set("")
		V.Local.sWOText9.Set("")
		V.Local.iCount.Set(1)
		F.Intrinsic.String.Build("select ('$%' + A.JOB +(CASE WHEN A.SUFFIX = '' THEN '   ' ELSE A.SUFFIX END) + A.SEQ) as WOBC, (CASE WHEN A.LMO = 'L' THEN (RTRIM(A.PART) + (CASE WHEN isnull(C.SAR,'True') = 'True' THEN '' ELSE '(' + rtrim(C.SAR) + ')' END)+ ' ' + RTRIM(A.DESCRIPTION) + ' ' + (CASE WHEN ISNULL(B.TEXT,'TRUE') = 'TRUE' THEN '' ELSE B.TEXT END)) ELSE A.DESCRIPTION END) as WOText from V_JOB_OPERATIONS A left outer join V_WO_SEQ_COMMENTS B on A.JOB = B.WO and A.SUFFIX = B.WO_SUFFIX and A.SEQ = B.WO_SEQ left outer join APSV3_UBDETAIL C on A.JOB = C.JOB and A.SUFFIX = C.SFX and A.SEQ = C.SEQ WHERE A.JOB = '{0}' and A.SUFFIX = '{1}' and A.SEQ < '990000' AND A.LMO IN ('L','M') order by A.SEQ",V.DataTable.dtMain(V.Local.iFor).JOB!FieldValTrim,"",V.Local.sSQL)
		F.ODBC.Connection!con.OpenLocalRecordsetRO("rstSel",V.Local.sSQL)
		F.Intrinsic.Control.DoUntil(V.ODBC.con!rstSel.EOF,=,True)
			V.Local.sWOBC[V.Local.iCount].Set(V.ODBC.con!rstSel.FieldValTrim!WOBC)
			V.Local.sWOText[V.Local.iCount].Set(V.ODBC.con!rstSel.FieldValTrim!WOText)
			F.Intrinsic.String.Replace(V.Local.sWOText[V.Local.iCount],V.Ambient.NewLine,"",V.Local.sWOText[V.Local.iCount])
			V.Local.iCount.Set(V.Local.iCount.++)
			F.ODBC.con!rstSel.MoveNext
		F.Intrinsic.Control.Loop
		F.ODBC.con!rstSel.Close

		' Set values for SerialNum, WONum, SalesOrderNum, and CustName
		V.Local.iSerial.Set(1)
		F.Intrinsic.String.Build("{0}-{1}0-{2}",V.DataTable.dtMain(V.Local.iFor).ORDER_NO!FieldValTrim,V.DataTable.dtMain(V.Local.iFor).RECORD_NO!FieldValTrim,V.Local.iSerial,V.Local.sSerialNum)
		F.Intrinsic.String.RPad(V.DataTable.dtMain(V.Local.iFor).Job!FieldValTrim," ",6,V.Local.sWONum)
		F.Intrinsic.String.Concat(V.Local.sWONum,"",V.Local.sWONum)
		F.Intrinsic.String.Trim(V.Local.sWONum,V.Local.sWONum)
		V.Local.sSalesOrderNum.Set(V.DataTable.dtMain(V.Local.iFor).ORDER_NO!FieldValTrim)
		'where is the customer name is passed values?
		'leaving this one in because they will probably want to switch back later from customer name to ship to name
		V.Local.sCustName.Set(V.DataTable.dtMain(V.Local.iFor).Name_CUSTOMER!FieldValTrim)

		' Set values for Description, ZPartNum, and PO
		V.Local.sLine.Set(V.DataTable.dtMain(V.Local.iFor).RECORD_NO!FieldValTrim)
		F.Intrinsic.String.Build("select C.DESCRIPTION, A.PART, B.CUSTOMER_PO from V_ORDER_LINES A left outer join V_ORDER_HEADER B on A.ORDER_NO = B.ORDER_NO left outer join GCG_5364_OE_LINES C on A.ORDER_NO = C.ORDER_NO and A.RECORD_NO = C.Record_no where A.ORDER_NO = '{0}' and A.RECORD_NO = '{1}'",V.DataTable.dtMain(V.Local.iFor).ORDER_NO!FieldValTrim,V.Local.sLine,V.Local.sSQL)

		F.ODBC.Connection!con.OpenLocalRecordsetRO("rstSel",V.Local.sSQL)
		F.Intrinsic.Control.If(V.ODBC.con!rstSel.EOF,=,False)
			V.Local.sDescription.Set(V.ODBC.con!rstSel.FieldValTrim!DESCRIPTION)
			V.Local.sPO.Set(V.ODBC.con!rstSel.FieldValTrim!CUSTOMER_PO)
		F.Intrinsic.Control.Else
			V.Local.sDescription.Set("")
			V.Local.sZPartNum.Set("")
			V.Local.sPO.Set("")
		F.Intrinsic.Control.EndIf
		F.ODBC.con!rstSel.Close

		'Add the row to the data table
		F.Data.DataTable.AddRow("dtCSV","Material",V.Local.sMaterial,"Door Width",V.Local.fDoorWidth,"Door Height",V.Local.fDoorHeight,"Quantity",1,"Wood Grain",V.Local.sWoodgrain,"Outside Passes",V.Local.sOutsidePasses,"Style",V.Local.sStyle,"Profile Description",V.Local.sProfileDescription,"Global Settings",V.Local.sGlobalSettings,"Horizontal Mullion Offset",V.Local.sHorizontalMullionOffset,"Straight Side",V.Local.sStraightSide,"T B S Edge",V.Local.sTBSEdge,"Straight Side Edge",V.Local.sStraightSideEdge,"Flute Count",V.Local.sFluteCount,"Channel Passes",V.Local.sChannelPasses,"Pocket Description",V.Local.sPocketDescription,"Channel Spacing",V.Local.sChannelSpacing,"Rail Offset",V.Local.sRailOffset,"Style Offset",V.Local.sStyleOffset,"VChannel Passes",V.Local.sVChannelPasses,"BottomHoriz MullionOffset",V.Local.sBottomHorizMullionOffset,"Left Opers",V.Local.sLeftOpers,"Right Opers",V.Local.sRightOpers,"Side",V.Local.sSide,"Top Bottom Opers",V.Local.sTopBottomOpers,"Rough Outside Passes",V.Local.sRoughOutsidePasses,"Top Opers",V.Local.sTopOpers,"Bottom Opers",V.Local.sBottomOpers,"Chord Height",V.Local.sChordHeight,"BatchNum",V.Local.sBatchNum,"Answer Table",V.Local.sAnswerTable,"WOBC1",V.Local.sWOBC1,"WOText1",V.Local.sWOText1,"WOBC2",V.Local.sWOBC2,"WOText2",V.Local.sWOText2,"WOBC3",V.Local.sWOBC3,"WOText3",V.Local.sWOText3,"WOBC4",V.Local.sWOBC4,"WOText4",V.Local.sWOText4,"WOBC5",V.Local.sWOBC5,"WOText5",V.Local.sWOText5,"WOBC6",V.Local.sWOBC6,"WOText6",V.Local.sWOText6,"WOBC7",V.Local.sWOBC7,"WOText7",V.Local.sWOText7,"WOBC8",V.Local.sWOBC8,"WOText8",V.Local.sWOText8,"WOBC9",V.Local.sWOBC9,"WOText9",V.Local.sWOText9,"SerialNum",V.Local.sSerialNum,"DrillBarCode",V.Local.sDrillBarCode,"WONum",V.Local.sWONum,"SalesOrderNum",V.Local.sSalesOrderNum,"CustName",V.Local.sCustName,"QtyOrd",V.Local.sQtyOrd,"DueDate",V.Local.sDueDate,"WXL",V.Local.sWXL,"Description",V.Local.sDescription,"Notes",V.Local.sNotes,"PO",V.Local.sPO,"PartCode",V.Local.sPartCode,"ZPartNum",V.Local.sZPartNum,"RUN_ID",V.Local.iRUN_ID,"LOG_ID",V.Local.iLOG_ID,"BIRUNID",V.Local.iBIRRUNID,"REPORT_ID",V.Local.iREPORT_ID,"REPORT_SEQ",V.Local.iREPORT_SEQ,"USER",V.Caller.User,"COCODE",V.Caller.CompanyCode,"Finish",V.DataTable.dtMain(V.Local.iFor).Finish!FieldValTrim)
		F.Intrinsic.String.Build("{0}-{1}-{2}",V.DataTable.dtMain(V.Local.iFor).ORDER_NO!FieldValTrim,V.DataTable.dtMain(V.Local.iFor).RECORD_NO!FieldValTrim,V.Local.iSerial.++,V.Local.sSerialNum)
		V.Local.sHorizontalMullionOffset.Set("")
		V.Local.sStraightSide.Set("")
		V.Local.sTBSEdge.Set("")
		V.Local.sStraightSideEdge.Set("")
		V.Local.sFluteCount.Set("")
		V.Local.sChannelPasses.Set("")
		V.Local.sPocketDescription.Set("")
		V.Local.sChannelSpacing.Set("")
		V.Local.sRailOffset.Set("")
		V.Local.sStyleOffset.Set("")
		V.Local.sVChannelPasses.Set("")
		V.Local.sBottomHorizMullionOffset.Set("")
		V.Local.sLeftOpers.Set("")
		V.Local.sRightOpers.Set("")
		V.Local.sTopBottomOpers.Set("")
		V.Local.sSide.Set("")
		V.Local.sRoughOutsidePasses.Set("")
		V.Local.sTopOpers.Set("")
		V.Local.sChordHeight.Set("")
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.iFor)
F.Data.DataTable.Close("dtMain")

'Build the CSV file name and path
'dtConfig schema is WC, IO, Type, Folder
F.Intrinsic.String.Build("WC = '{0}' and IO = 'OUTPUT' and TYPE = 'CSV'","MOLDING",V.Local.sSel)
F.Data.DataTable.Select("dtConfig",V.Local.sSel,V.Local.sRow)
F.Intrinsic.Control.If(V.Local.sRow,<>,"***NORETURN***")
	F.Intrinsic.String.Concat(V.DataTable.dtConfig(V.Local.sRow).Folder!FieldValTrim,"molding.csv",V.Local.sFile)
F.Intrinsic.Control.Else
	F.Intrinsic.UI.Msgbox("No Configuration Exists For Moldings")
	F.Intrinsic.Control.CallSub(f_main_unload)
F.Intrinsic.Control.EndIf

F.Data.DataTable.Close("dtConfig")

'Output the data table to the file
V.Local.sFields.Set(V.DataTable.dtCSV.FieldNames)
F.Data.DataView.ToString("dtCSV","dvCSV",V.Local.sFields,"*!*","|$|",V.Local.sData)
F.Intrinsic.File.Exists(V.Local.sFile,V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists,=,False)
	V.Local.sFields.Set(V.DataTable.dtCSV.FieldNames)
	F.Intrinsic.String.Concat(V.Local.sFields,"|$|",V.Local.sData,V.Local.sData)
F.Intrinsic.Control.EndIf
F.Intrinsic.String.Replace(V.Local.sData,"|$|",V.Ambient.NewLine,V.Local.sData)
F.Intrinsic.String.Replace(V.Local.sData,",","",V.Local.sData)
F.Intrinsic.String.Replace(V.Local.sData,"*!*",",",V.Local.sCSV)
F.Intrinsic.Control.If(V.Local.bExists,=,True)
	F.Intrinsic.File.Append2FileNewLine(V.Local.sFile,V.Local.sCSV)
F.Intrinsic.Control.Else
	F.Intrinsic.File.String2File(V.Local.sFile,V.Local.sCSV)
F.Intrinsic.Control.EndIf

F.Global.BI.StopLogging(V.Local.iLOG_ID)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("PopulatedtCSV_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
		F.ODBC.Connection!con.Close
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.End
Function.Intrinsic.Control.EndIf
Program.Sub.PopulatedtCSV.End

Program.Sub.ValidateWoodgrain.Start
F.Intrinsic.Control.SetErrorHandler("ValidateWoodgrain_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.iRow.Declare
V.Local.sSQL.Declare

V.Local.iRow.Set(V.Args.iRowID)

'See if part code and material code are populated
F.Intrinsic.Control.If(V.DataTable.dtMain(V.Local.iRow).PART_CODE!FieldValtrim,<>,"")
F.Intrinsic.Control.AndIf(V.DataTable.dtMain(V.Local.iRow).MATL!FieldValTrim,<>,"")
	'They are so we need to see if the extra inventory user 2 is true or false for the material
	F.Intrinsic.String.Build("select IF(UPPER(USER2) = '1',convert('1',SQL_Bit),convert('0',SQL_Bit)) as 'USER2' from INV_EXTRA where PART = '{0}'",V.DataTable.dtMain(V.Local.iRow).MATL!FieldValTrim,V.Local.sSQL)
	F.ODBC.Connection!con.OpenLocalRecordsetRO("rstSel",V.Local.sSQL)
	F.Intrinsic.Control.If(V.ODBC.con!rstSel.EOF,=,False)
	F.Intrinsic.Control.AndIf(V.ODBC.con!rstSel.FieldVal!USER2,=,True)
		'See if the part code is grained
		F.ODBC.con!rstSel.Close
		F.Intrinsic.String.Build("select IF(UPPER(USER2) = '1',convert('1',SQL_Bit),convert('0',SQL_Bit)) as 'USER2' from INV_EXTRA where PART = '{0}'",V.DataTable.dtMain(V.Local.iRow).PART_CODE!FieldValTrim,V.Local.sSQL)
		F.ODBC.Connection!con.OpenLocalRecordsetRO("rstSel",V.Local.sSQL)
		F.Intrinsic.Control.If(V.ODBC.con!rstSel.EOF,=,False)
		F.Intrinsic.Control.AndIf(V.ODBC.con!rstSel.FieldVal!USER2,=,True)
			F.Data.DataTable.SetValue("dtMain",V.Args.iRowID,"WGRAIN",True)
		F.Intrinsic.Control.Else
			F.Data.DataTable.SetValue("dtMain",V.Args.iRowID,"WGRAIN",False)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Else	
		F.Data.DataTable.SetValue("dtMain",V.Args.iRowID,"WGRAIN",False)
	F.Intrinsic.Control.EndIf
	F.ODBC.con!rstSel.Close
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("ValidateWoodgrain_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
		F.ODBC.Connection!con.Close
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.End
Function.Intrinsic.Control.EndIf
Program.Sub.ValidateWoodgrain.End

Program.Sub.LoadData.Start
F.Intrinsic.Control.SetErrorHandler("LoadData_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)

	F.Intrinsic.UI.InvokeWaitDialog("Loading Order Entry Form","OrderEntry")

	F.Intrinsic.UI.ChangeWaitStatus("Setting Anchors",20,0,100)
	F.Intrinsic.Control.CallSub(setanchors)
	F.Intrinsic.UI.ChangeWaitStatus("Loading Options",30,0,100)
	F.Intrinsic.Control.CallSub(loadoptions)
	F.Intrinsic.UI.ChangeWaitStatus("Loading Data Table",40,0,100)
	F.Intrinsic.Control.CallSub(loaddatatable)
	F.Intrinsic.UI.ChangeWaitStatus("Loading Grid",90,0,100)
	F.Intrinsic.Control.CallSub(loadgrid)
	
	F.Intrinsic.Control.CallSub(Assign_PartDet,"Load","Y")
	F.Intrinsic.UI.CloseWaitDialog

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("LoadData_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
		F.ODBC.Connection!con.Close
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.End
Function.Intrinsic.Control.EndIf
Program.Sub.LoadData.End

Program.Sub.DataRowChanged.Start
F.Intrinsic.Control.SetErrorHandler("DataRowChanged_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)

V.Global.bPrice.set(True)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("DataRowChanged_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
		F.ODBC.Connection!con.Close
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.End
Function.Intrinsic.Control.EndIf
Program.Sub.DataRowChanged.End

Program.Sub.Assign_PartDet.Start
F.Intrinsic.Control.SetErrorHandler("Assign_PartDet_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.bExport.Declare
V.Local.bState.Declare
V.Local.bWoodGrain.Declare
V.Local.fLength.Declare
V.Local.fWidth.Declare
V.Local.iColumn.Declare
V.Local.sRet.Declare
V.Local.sSQL.Declare
V.Local.iColPart.Declare
V.Local.sPart.Declare
V.Local.iFor.Declare
V.Local.iForIndex.Declare
V.Local.bLoad.Declare(Boolean,False)

F.Intrinsic.UI.InvokeWaitDialog("Assign_PartDet","Order Entry")

f.Data.DataView.Create("dtMain","dvTemp",22,"MATL is null","")

F.Intrinsic.Control.For(V.Local.iFor,0,V.DataView.dtMain!dvTemp.RowCount--,1)

	V.Local.sPart.Set(V.DataView.dtMain!dvTemp(V.Local.iFor).PART_CODE!FieldVal)

'	F.Intrinsic.String.Build("select * from V_INVENTORY_ALL where CODE_SORT = 'PART' and PART = '{0}'",V.Local.sPart.Trim,V.Local.sSQL)
	F.Intrinsic.String.Build("select * from V_INVENTORY_ALL where PART = '{0}' and UCASE(CODE_SORT) IN (Select UCase(Sort_Code) From GCG_5364_SORT_MAINT Where UCASE(Status) = 'DOOR')",V.Local.sPart.Trim,V.Local.sSQL)
	F.ODBC.Connection!con.OpenLocalRecordsetRO("rstSel",V.Local.sSQL)
	F.Intrinsic.Control.If(V.ODBC.con!rstSel.EOF,=,False)
		F.Data.Dataview.SetValue("dtMain","dvTemp",V.Local.iFor,"PL",V.ODBC.con!rstSel.FieldValTrim!PRODUCT_LINE)
		F.Intrinsic.Math.Mult(V.ODBC.con!rstSel.FieldValFloat!LENGTH,12,V.Local.fLength)
		F.Intrinsic.Math.Mult(V.ODBC.con!rstSel.FieldValFloat!WIDTH,12,V.Local.fWidth)
	F.Intrinsic.Control.EndIf
	F.ODBC.con!rstSel.Close
		
	F.Intrinsic.String.Build("select IF(UPPER(USER2) = '1',convert('1',SQL_Bit),convert('0',SQL_Bit)) as 'USER2', IF(UPPER(USER3) = 'TRUE',convert('1',SQL_Bit),convert('0',SQL_Bit)) as 'USER3', USER4 from INV_EXTRA where PART = '{0}'",V.Local.sPart.Trim,V.Local.sSQL)
	F.ODBC.Connection!con.OpenLocalRecordsetRO("rstSel",V.Local.sSQL)
	F.Intrinsic.Control.If(V.ODBC.con!rstSel.EOF,=,False)
		F.Data.Dataview.SetValue("dtMain","dvTemp",V.Local.iFor,"WGRAIN",V.ODBC.con!rstSel.FieldValTrim!USER2)
		F.Data.Dataview.SetValue("dtMain","dvTemp",V.Local.iFor,"EXPORT",V.ODBC.con!rstSel.FieldValTrim!USER3)
		F.Data.Dataview.SetValue("dtMain","dvTemp",V.Local.iFor,"MCCODE",V.ODBC.con!rstSel.FieldValTrim!USER4)
	F.Intrinsic.Control.EndIf
	F.ODBC.con!rstSel.Close

	F.Intrinsic.String.Build("select IF(TAX_EXEMPT_FLG = 'Y',convert('0',SQL_BIT),convert('1',SQL_BIT)) as TAXABLE from INVENTORY_MST3 where PART = '{0}'",V.Local.sPart.Trim,V.Local.sSQL)
	F.ODBC.Connection!con.OpenLocalRecordsetRO("rstSel",V.Local.sSQL)
	F.Intrinsic.Control.If(V.ODBC.con!rstSel.EOF,=,False)
		F.Data.Dataview.SetValue("dtMain","dvTemp",V.Local.iFor,"TAXABLE",V.ODBC.con!rstSel.FieldVal!TAXABLE)
	F.Intrinsic.Control.EndIf
	F.ODBC.con!rstSel.Close

	F.Intrinsic.String.Build("select AMT_PRICE from V_INVENTORY_ALL where PART = '{0}'",V.Local.sPart.Trim,V.Local.sSQL)
	F.ODBC.Connection!con.OpenLocalRecordsetRO("rstSel",V.Local.sSQL)
	F.Intrinsic.Control.If(V.ODBC.con!rstSel.EOF,=,False)
		F.Data.Dataview.SetValue("dtMain","dvTemp",V.Local.iFor,"PRICE_PART",V.ODBC.con!rstSel.FieldValFloat!AMT_PRICE)
	F.Intrinsic.Control.EndIf
	F.ODBC.con!rstSel.Close

	'MM product line is moldings
	F.Intrinsic.Control.If(V.DataView.dtMain!dvTemp(V.Local.iFor).PL!FieldValTrim,=,"MM")
		'Set the length and width
		F.Data.Dataview.SetValue("dtMain","dvTemp",V.Local.iFor,"ACTLENGTH",V.Local.fLength,"ACTWIDTH",V.Local.fWidth)
		F.Data.Dataview.SetValue("dtMain","dvTemp",V.Local.iFor,"LENGTH",V.Local.fLength,"WIDTH",V.Local.fWidth)
		V.Local.bState.Set(True)
	F.Intrinsic.Control.Else
		V.Local.bState.Set(False)
	F.Intrinsic.Control.EndIf

	'Set the length and width cells to locked or unlocked
	gui.f_Main.GsGcMain.GetColumnIndexByName("gvMain","ACTLENGTH",V.Local.iColumn)
	gui.f_Main.GsGcMain.SetCellProperty("gvMain",V.Local.iColumn,V.Local.iFor,"Locked",V.Local.bState)
	gui.f_Main.GsGcMain.GetColumnIndexByName("gvMain","ACTWIDTH",V.Local.iColumn)
	gui.f_Main.GsGcMain.SetCellProperty("gvMain",V.Local.iColumn,V.Local.iFor,"Locked",V.Local.bState)
	
	V.Local.iForIndex.Set(Variable.DataView.dtMain!dvTemp(V.Local.iFor).DataTableIndex)
	F.Intrinsic.Control.CallSub(setallcalculations,"iRowID",V.Local.iForIndex)
	F.Intrinsic.Control.CallSub(validatewoodgrain,"iRowID",V.Local.iForIndex)

'	F.Intrinsic.Control.CallSub(setinsert,"iRowID",V.Local.iFor)

	F.Intrinsic.Control.CallSub(setextension,"iRowID",V.Local.iForIndex)
F.Intrinsic.Control.Next(V.Local.iFor)

f.Data.DataView.close("dtMain","dvTemp")

F.Intrinsic.Variable.ArgExists("Load",V.Local.bLoad)
F.Intrinsic.Control.If(V.Local.bLoad)
F.Intrinsic.String.Build("Select A.Record_No From GCG_5364_OE_LINES A Join V_Order_Lines B on A.Order_No = B.Order_No and A.Record_No = B.Record_No Where (A.Part <> B.Part or A.Qty_Order <> B.Qty_Ordered) and A.Order_no = '{0}'",V.DataTable.dtMain(V.DataTable.dtMain.RowCount--).Order_No!FieldValTrim,V.Local.sSQL)
F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL,V.Local.sRet)
	F.Intrinsic.Control.If(V.Local.sRet.Trim,<>,"")
		F.Intrinsic.String.Replace(V.Local.sRet,"*!*",",",V.Local.sRet)
		F.Intrinsic.String.Build("Record_No In('{0}')",V.Local.sRet,V.Local.sRet)
		F.Data.DataView.Create("dtMain","dvTemp",22,V.Local.sRet,"")
		F.Intrinsic.Control.For(V.Local.iFor,0,V.DataView.dtMain!dvTemp.RowCount--,1)
			V.Local.sPart.Set(V.DataView.dtMain!dvTemp(V.Local.iFor).PART_CODE!FieldVal)
			F.Data.DataView.SetValue("dtMain","dvTemp",V.Local.iFor,"MANUAL_PRICE",False)
		'	F.Intrinsic.String.Build("select * from V_INVENTORY_ALL where CODE_SORT = 'PART' and PART = '{0}'",V.Local.sPart.Trim,V.Local.sSQL)
			F.Intrinsic.String.Build("select * from V_INVENTORY_ALL where PART = '{0}' and UCASE(CODE_SORT) IN (Select UCase(Sort_Code) From GCG_5364_SORT_MAINT Where UCASE(Status) = 'DOOR')",V.Local.sPart.Trim,V.Local.sSQL)
			F.ODBC.Connection!con.OpenLocalRecordsetRO("rstSel",V.Local.sSQL)
			F.Intrinsic.Control.If(V.ODBC.con!rstSel.EOF,=,False)
				F.Data.Dataview.SetValue("dtMain","dvTemp",V.Local.iFor,"PL",V.ODBC.con!rstSel.FieldValTrim!PRODUCT_LINE)
				F.Intrinsic.Math.Mult(V.ODBC.con!rstSel.FieldValFloat!LENGTH,12,V.Local.fLength)
				F.Intrinsic.Math.Mult(V.ODBC.con!rstSel.FieldValFloat!WIDTH,12,V.Local.fWidth)
			F.Intrinsic.Control.EndIf
			F.ODBC.con!rstSel.Close
				
			F.Intrinsic.String.Build("select IF(UPPER(USER2) = '1',convert('1',SQL_Bit),convert('0',SQL_Bit)) as 'USER2', IF(UPPER(USER3) = 'TRUE',convert('1',SQL_Bit),convert('0',SQL_Bit)) as 'USER3', USER4 from INV_EXTRA where PART = '{0}'",V.Local.sPart.Trim,V.Local.sSQL)
			F.ODBC.Connection!con.OpenLocalRecordsetRO("rstSel",V.Local.sSQL)
			F.Intrinsic.Control.If(V.ODBC.con!rstSel.EOF,=,False)
				F.Data.Dataview.SetValue("dtMain","dvTemp",V.Local.iFor,"WGRAIN",V.ODBC.con!rstSel.FieldValTrim!USER2)
				F.Data.Dataview.SetValue("dtMain","dvTemp",V.Local.iFor,"EXPORT",V.ODBC.con!rstSel.FieldValTrim!USER3)
				F.Data.Dataview.SetValue("dtMain","dvTemp",V.Local.iFor,"MCCODE",V.ODBC.con!rstSel.FieldValTrim!USER4)
			F.Intrinsic.Control.EndIf
			F.ODBC.con!rstSel.Close
		
			F.Intrinsic.String.Build("select IF(TAX_EXEMPT_FLG = 'Y',convert('0',SQL_BIT),convert('1',SQL_BIT)) as TAXABLE from INVENTORY_MST3 where PART = '{0}'",V.Local.sPart.Trim,V.Local.sSQL)
			F.ODBC.Connection!con.OpenLocalRecordsetRO("rstSel",V.Local.sSQL)
			F.Intrinsic.Control.If(V.ODBC.con!rstSel.EOF,=,False)
				F.Data.Dataview.SetValue("dtMain","dvTemp",V.Local.iFor,"TAXABLE",V.ODBC.con!rstSel.FieldVal!TAXABLE)
			F.Intrinsic.Control.EndIf
			F.ODBC.con!rstSel.Close
		
			F.Intrinsic.String.Build("select AMT_PRICE from V_INVENTORY_ALL where PART = '{0}'",V.Local.sPart.Trim,V.Local.sSQL)
			F.ODBC.Connection!con.OpenLocalRecordsetRO("rstSel",V.Local.sSQL)
			F.Intrinsic.Control.If(V.ODBC.con!rstSel.EOF,=,False)
				F.Data.Dataview.SetValue("dtMain","dvTemp",V.Local.iFor,"PRICE_PART",V.ODBC.con!rstSel.FieldValFloat!AMT_PRICE)
			F.Intrinsic.Control.EndIf
			F.ODBC.con!rstSel.Close
		
			'MM product line is moldings
			F.Intrinsic.Control.If(V.DataView.dtMain!dvTemp(V.Local.iFor).PL!FieldValTrim,=,"MM")
				'Set the length and width
				F.Data.Dataview.SetValue("dtMain","dvTemp",V.Local.iFor,"ACTLENGTH",V.Local.fLength,"ACTWIDTH",V.Local.fWidth)
				F.Data.Dataview.SetValue("dtMain","dvTemp",V.Local.iFor,"LENGTH",V.Local.fLength,"WIDTH",V.Local.fWidth)
				V.Local.bState.Set(True)
			F.Intrinsic.Control.Else
				V.Local.bState.Set(False)
			F.Intrinsic.Control.EndIf
		
			'Set the length and width cells to locked or unlocked
			gui.f_Main.GsGcMain.GetColumnIndexByName("gvMain","ACTLENGTH",V.Local.iColumn)
			gui.f_Main.GsGcMain.SetCellProperty("gvMain",V.Local.iColumn,V.Local.iFor,"Locked",V.Local.bState)
			gui.f_Main.GsGcMain.GetColumnIndexByName("gvMain","ACTWIDTH",V.Local.iColumn)
			gui.f_Main.GsGcMain.SetCellProperty("gvMain",V.Local.iColumn,V.Local.iFor,"Locked",V.Local.bState)
			
			V.Local.iForIndex.Set(Variable.DataView.dtMain!dvTemp(V.Local.iFor).DataTableIndex)
			F.Intrinsic.Control.CallSub(setallcalculations,"iRowID",V.Local.iForIndex)
			F.Intrinsic.Control.CallSub(validatewoodgrain,"iRowID",V.Local.iForIndex)
		
		'	F.Intrinsic.Control.CallSub(setinsert,"iRowID",V.Local.iFor)
		
			F.Intrinsic.Control.CallSub(setextension,"iRowID",V.Local.iForIndex)
		F.Intrinsic.Control.Next(V.Local.iFor)
		f.Data.DataView.close("dtMain","dvTemp")
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf
F.Intrinsic.UI.CloseWaitDialog
	
F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("Assign_PartDet_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	F.Intrinsic.UI.CloseWaitDialog
	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
		F.ODBC.Connection!con.Close
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.End
Function.Intrinsic.Control.EndIf

Program.Sub.Assign_PartDet.End

Program.Sub.Assign_Mat2Grid.Start
F.Intrinsic.Control.SetErrorHandler("Assign_Mat2Grid_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.iFor.Declare
V.Local.iColMatl.Declare
V.Local.sMatl.Declare
V.Local.iColPrice.Declare
V.Local.fPrice.Declare
V.Local.iColWt.Declare
V.Local.fWt.Declare
V.Local.lStart.Declare
V.Local.sFinish.Declare
V.Local.sDRILLCODE.Declare
V.Local.fDRILLPrice.Declare
V.Local.sNotes.Declare
V.Local.sBatchNotes.Declare
V.Local.bExport.Declare
V.Local.sTemp.Declare
V.Local.sSql.Declare
V.Local.bCalc.Declare(Boolean,False)
V.Local.fPriceSF.Declare
V.Local.bDoor.Declare
V.Local.sExport.Declare

F.Intrinsic.UI.InvokeWaitDialog("Assign_Mat2Grid","Order Entry")
	
V.Local.sMatl.Set(V.DataTable.dtMain(V.Args.iRowID).MATL!FieldVal)
V.Local.fPrice.Set(V.DataTable.dtMain(V.Args.iRowID).PRICE_MATL!FieldVal)
V.Local.fWt.Set(V.DataTable.dtMain(V.Args.iRowID).WEIGHT_MATL!FieldVal)

V.Local.bExport.Set(V.DataTable.dtMain(V.Args.iRowID).Export!FieldVal)
V.Local.sFinish.Set(V.DataTable.dtMain(V.Args.iRowID).Finish!FieldVal)
V.Local.sDRILLCODE.Set(V.DataTable.dtMain(V.Args.iRowID).DRILL_CODE!FieldVal)
V.Local.fDRILLPrice.Set(V.DataTable.dtMain(V.Args.iRowID).DRILL_PRICE!FieldVal)
V.Local.sNotes.Set(V.DataTable.dtMain(V.Args.iRowID).NOTES!FieldVal)
V.Local.sBatchNotes.Set(V.DataTable.dtMain(V.Args.iRowID).Batch_NOTES!FieldVal)

f.Intrinsic.Math.Add(V.Args.iRowID,1,V.Local.lStart)

F.Intrinsic.Control.For(V.Local.iFor,V.Local.lStart,V.DataTable.dtMain.RowCount--,1)
	V.Local.sTemp.Set(V.DataTable.dtMain(V.Local.iFor).MATL!FieldVal)
	
	F.Intrinsic.String.Build("select * from V_INVENTORY_ALL where PART = '{0}' and UCASE(CODE_SORT) IN (Select UCase(Sort_Code) From GCG_5364_SORT_MAINT Where UCASE(Status) = 'DOOR' OR UCASE(Status) like 'NON-DOOR%')",V.DataTable.dtMain(V.Local.iFor).PART_CODE!FieldValTrim,V.Local.sSQL)
	F.ODBC.Connection!con.OpenLocalRecordsetRO("rstSel",V.Local.sSQL)
	F.Intrinsic.Control.If(V.ODBC.con!rstSel.EOF,=,False)
		V.Local.bCalc.Set(True)
	F.Intrinsic.Control.Else
		V.Local.bCalc.Set(False)
	F.Intrinsic.Control.EndIf
	
	F.ODBC.con!rstSel.Close
	
	F.Intrinsic.String.Build("select * from V_INVENTORY_ALL where PART = '{0}' and UCASE(CODE_SORT) IN (Select UCase(Sort_Code) From GCG_5364_SORT_MAINT Where UCASE(Status) = 'DOOR')",V.DataTable.dtMain(V.Local.iFor).PART_CODE!FieldValTrim,V.Local.sSQL)
	F.ODBC.Connection!con.OpenLocalRecordsetRO("rstSel",V.Local.sSQL)
	F.Intrinsic.Control.If(V.ODBC.con!rstSel.EOF,=,False)
		V.Local.bDoor.Set(True)
	F.Intrinsic.Control.Else
		V.Local.bDoor.Set(False)
	F.Intrinsic.Control.EndIf
	
	F.ODBC.con!rstSel.Close
	
	f.Intrinsic.Control.If(V.Local.sTemp.trim,=,"")
		F.Intrinsic.Control.If(V.Local.bDoor)
			F.Data.DataTable.SetValue("dtMain",V.Local.iFor,"MATL",V.Local.sMatl)
			F.Data.DataTable.SetValue("dtMain",V.Local.iFor,"MATL_DESC",V.DataTable.dtMain(V.Args.iRowID).MATL_DESC!FieldValTrim)
			F.Data.DataTable.SetValue("dtMain",V.Local.iFor,"PRICE_MATL",V.Local.fPrice)
			F.Data.DataTable.SetValue("dtMain",V.Local.iFor,"WEIGHT_MATL",V.Local.fWt)
'			F.Data.DataTable.SetValue("dtMain",V.Local.iFor,"DRILL_PRICE",V.Local.fDRILLPrice)
'			F.Data.DataTable.SetValue("dtMain",V.Local.iFor,"DRILL_CODE",V.Local.sDRILLCODE)
		F.Intrinsic.Control.EndIf
		
		F.Intrinsic.Control.If(V.Local.bDoor,=,True,"OR",V.Local.bCalc,=,True)
			F.Intrinsic.String.Build("Select Top 1 ucase(User3) From Inv_Extra Where Part = '{0}'",V.DataTable.dtMain(V.Local.iFor).PART_CODE!FieldValTrim,V.Local.sSQL)
			F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSql,V.Local.sExport)
			F.Intrinsic.Control.If(V.Local.sExport.Trim,=,"TRUE")
				F.Data.DataTable.SetValue("dtMain",V.Local.iFor,"Export",True)
			F.Intrinsic.Control.Else
				F.Data.DataTable.SetValue("dtMain",V.Local.iFor,"Export",False)
			F.Intrinsic.Control.EndIf
'			F.Data.DataTable.SetValue("dtMain",V.Local.iFor,"Export",V.Local.bExport)
			F.Data.DataTable.SetValue("dtMain",V.Local.iFor,"Finish",V.Local.sFinish)
			F.Data.DataTable.SetValue("dtMain",V.Local.iFor,"FIN_DESC",V.DataTable.dtMain(V.Args.iRowID).FIN_DESC!FieldValTrim)
'			F.Data.DataTable.SetValue("dtMain",V.Local.iFor,"NOTES",V.Local.sNotes)
'			F.Data.DataTable.SetValue("dtMain",V.Local.iFor,"Batch_Notes",V.Local.sBatchNotes)
		F.Intrinsic.Control.EndIf
		
		F.Intrinsic.Control.If(V.Local.bCalc)
			F.Intrinsic.Control.CallSub(GsGcMain_CellValueChanged,"Column","FINISH","RowIndex",V.Local.iFor)
		F.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Else
		f.Intrinsic.Control.ExitFor(V.Local.iFor)
	f.Intrinsic.Control.endif
	
	F.Intrinsic.Control.If(V.Local.bCalc)
		F.Intrinsic.Control.CallSub(setallcalculations,"iRowID",V.Local.iFor)
		F.Intrinsic.Control.CallSub(validatewoodgrain,"iRowID",V.Local.iFor)

		F.Intrinsic.Control.CallSub(setextension,"iRowID",V.Local.iFor)
	F.Intrinsic.Control.EndIf
	
F.Intrinsic.Control.Next(V.Local.iFor)

F.Intrinsic.UI.CloseWaitDialog

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("Assign_Mat2Grid_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	F.Intrinsic.UI.CloseWaitDialog
	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
		F.ODBC.Connection!con.Close
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.End
Function.Intrinsic.Control.EndIf
Program.Sub.Assign_Mat2Grid.End

Program.Sub.upd_Callwrapper.Start
F.Intrinsic.Control.SetErrorHandler("upd_Callwrapper_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.sSQL.Declare(String)
V.Local.sOrderno.Declare(String)
V.Local.sLno.Declare(String)
V.Local.sCost.Declare(String)
V.Local.sprice_SF.Declare(String)
V.Local.sUPLTXT.Declare(String)

'	Variable.Passed.000001  QTY
'	Variable.Passed.000005  orderno   lpad to 7
'	Variable.Passed.000013  lineno    lpad 3 rpad 1

F.Intrinsic.UI.InvokeWaitDialog("Processing Order Data","Order Entry")

f.Intrinsic.String.LPad(Variable.Passed.000005,"0",7,V.Local.sOrderno)
f.Intrinsic.String.LPad(Variable.Passed.000013,"0",3,V.Local.sLno)
f.Intrinsic.String.RPad(V.Local.sLno,"0",4,V.Local.sLno)
f.Intrinsic.String.Build("select  Cost,price_SF from GCG_5364_OE_LINES where order_no ='{0}' and record_no = '{1}'",V.Local.sOrderno,V.Local.sLno,V.Local.sSQL)
F.ODBC.Connection!con.OpenLocalRecordsetRO("rstLine",V.Local.sSQL)
F.Intrinsic.Control.if(V.ODBC.con!rstLine.EOF,=,False)
	
	f.Intrinsic.String.Build("update GCG_5364_OE_LINES set QTY_Order = {0}, Extension = {0} * {1} where order_no = '{2}'  and record_no = '{3}'",Variable.Passed.000001,V.ODBC.con!rstLine.FieldVal!Cost,V.Local.sOrderno,V.Local.sLno,V.Local.sSQL)
	F.ODBC.Connection!Con.Execute(V.Local.sSQL)
	
	'sell price
	f.Intrinsic.String.Format(V.ODBC.con!rstLine.FieldVal!Cost,"0000000000.000000",V.Local.sCost)
	'cost
	f.Intrinsic.String.Format(V.ODBC.con!rstLine.FieldVal!price_SF,"0000000000.000000",V.Local.sprice_SF)
	f.Intrinsic.String.Replace(v.Local.sCost,".","",v.Local.sCost)
	f.Intrinsic.String.Replace(v.Local.sprice_SF,".","",v.Local.sprice_SF)
	
	f.Intrinsic.String.Left(V.Local.sLno,3,V.Local.sLno)
	
	f.Intrinsic.String.Build("L,{0},{1},{2},{2},{2},{3},{4}",V.Local.sOrderno,V.Local.sLno,"",V.Local.sCost,V.Local.sprice_SF,V.Local.sUPLTXT)
	
F.Intrinsic.Control.endif	
F.ODBC.con!rstLine.Close

f.Intrinsic.Control.CallSub(Upload_Data,"sData",V.Local.sUPLTXT)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("upd_Callwrapper_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	F.Intrinsic.UI.CloseWaitDialog
	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
		F.ODBC.Connection!con.Close
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.End
Function.Intrinsic.Control.EndIf
Program.Sub.upd_Callwrapper.End

Program.Sub.Upload_Data.Start
F.Intrinsic.Control.SetErrorHandler("Upload_Data_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.sReturnCode.Declare
V.Local.sFiledir.Declare

'Sales.UpdateOrderHeaderAndLinesByFile, and the properties are company, calling program, screenless and input file name
F.Intrinsic.String.Concat(V.Caller.FilesDir,"\","SOUPDLINES.TXT",V.Local.sFiledir)
F.Intrinsic.File.String2File(V.Local.sFiledir,v.Args.sData)

F.Global.Callwrapper.New("Test","Sales.UpdateOrderHeaderAndLinesByFile")
F.Global.Callwrapper.SetProperty("Test","Screenless",1)
F.Global.Callwrapper.SetProperty("Test","InputFileName","SOUPDLINES.TXT")
F.Global.CallWrapper.Run("Test")

F.Intrinsic.Control.Try
	F.Global.CallWrapper.GetProperty("Test","Status",V.Local.sReturnCode)
	f.Intrinsic.Control.If(V.Local.sReturnCode,<>,"Success")
		F.Intrinsic.UI.Msgbox("Line update Callwrapper failed")
	F.Intrinsic.Control.Else
	'	v.Passed.REFRESHGRID.Set(1)
	f.Intrinsic.Control.EndIf 
F.Intrinsic.Control.Catch

F.Intrinsic.Control.EndTry

V.Global.bPrice.Set(False)

f.Intrinsic.Control.CallSub(f_Main_UnLoad)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("Upload_Data_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	F.Intrinsic.UI.CloseWaitDialog
	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
		F.ODBC.Connection!con.Close
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.End
f.Intrinsic.Control.EndIf 
Program.Sub.Upload_Data.End

Program.Sub.GET_WC.Start
F.Intrinsic.Control.SetErrorHandler("GET_WC_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.sSQL.Declare
V.Local.sorgrt.Declare
V.Local.iFor.Declare

'get first labor step
V.Local.sSQL.Set("select distinct ROUTER_LINE.router,PART_WC_OUTSIDE,line_Router,0 as line from job_header join ROUTER_LINE on ROUTER_LINE.router = job_header.router")
F.Intrinsic.String.Build(" {0} where  job + suffix in ({1})  and lmo = 'L' order by ROUTER_LINE.router,LINE_ROUTER",V.Local.sSQL,v.Args.WoList,V.Local.sSQL)

F.Data.DataTable.CreateFromSQL("dtRT","con",V.Local.sSQL,false)
'Eliminate duplicate
F.Intrinsic.Control.For(V.Local.iFor,0,V.DataTable.dtRT.RowCount--,1)
	f.Intrinsic.Control.If(V.Local.sorgrt,<>,V.DataTable.dtRT(V.Local.iFor).router!FieldValTrim)
		F.Data.DataTable.SetValue("dtRT",V.Local.iFor,"line",1)
		V.Local.sorgrt.Set(V.DataTable.dtRT(V.Local.iFor).router!FieldValTrim)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.iFor)

f.Data.DataView.Create("dtRT","dvRT",22,"line=1","")

Function.Data.Dictionary.CreateFromDataView("DICRT","dtRT","dvRT","router","PART_WC_OUTSIDE",4)
F.Data.DataTable.FillFromDictionary("DtREL","DICRT","router","WC")
F.Data.DataTable.FillFromDictionary("dtFSH_C","DICRT","router","WC")

f.Data.Dictionary.Close("DICRT")

Function.Data.Dictionary.CreateFromDataView("DICRT","dtRT","dvRT","router","line_Router",4)
F.Data.DataTable.FillFromDictionary("DtREL","DICRT","router","RtSeq")
f.Data.Dictionary.Close("DICRT")

Function.Data.DataView.ToDataTableDistinct("DtREL","DDet","dtFSH_P","matl*!*WC",true)
F.Data.DataView.Create("dtFSH_P","DDet")


f.Data.Dataview.Close("dtRT","dvRT")
f.Data.DataTable.Close("dtRT")

Function.Data.DataView.ToDataTable("dtFSH_C","DVDet","dtFSH_P$dtFSH_C",true)
F.Data.DataView.Create("dtFSH_P$dtFSH_C","DVDet")

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("GET_WC_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	F.Intrinsic.UI.CloseWaitDialog
	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
		F.ODBC.Connection!con.Close
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.End
f.Intrinsic.Control.EndIf 
Program.Sub.GET_WC.End

Program.Sub.cmdCreateFlex_Click.Start
F.Intrinsic.Control.SetErrorHandler("cmdCreateFlex_Click_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.sSQL.Declare
V.Local.iFor.Declare
V.Local.sFilter.Declare
V.Local.sRet.Declare

f.Intrinsic.UI.InvokeWaitDialog("Creating FlexSchedule")

Function.Data.DataView.ToDataTableDistinct("dtFSH_P$dtFSH_C","DVDet","DtRouter","router",true)

f.Data.DataView.Create("DtRouter","DVSTemp")
Function.Data.DataView.ToString("DtRouter", "DVSTemp", "router", "*!*", ",", V.Local.sRet)

f.Intrinsic.String.Split(V.Local.sRet,",",V.Local.sRet)
F.Intrinsic.Control.For(v.Local.ifor,0,V.Local.sRet.UBound,1)
	f.Intrinsic.String.Build("'{0}'",V.Local.sRet(v.Local.ifor),V.Local.sRet(v.Local.ifor))
f.Intrinsic.Control.Next(v.Local.ifor)
f.Intrinsic.String.Join(V.Local.sRet,",",V.Local.sRet)

 
f.Data.DataTable.AddColumn("DtRouter","RtSeq","string")
f.Intrinsic.String.Build("select router,line_Router from ROUTER_LINE  where router in ({0}) and lmo = 'L' and part_wc_outside = '*NBR'",V.Local.sRet,V.Local.sSQL)
Function.Data.Dictionary.CreateFromSQL("DICTemp","con",V.Local.sSQL)
F.Data.DataTable.FillFromDictionary("DtRouter","DICTemp","router","RtSeq")

f.Data.DataTable.AddColumn("dtFSH_P$dtFSH_C","mseq","string")
f.Data.DataTable.AddColumn("dtFSH_P$dtFSH_C","lseq","string")

'loop router and get seq to get matl seq
F.Intrinsic.Control.For(V.Local.iFor,0,V.DataTable.DtRouter.RowCount--,1)

	V.Local.sSQL.Set("select top 1 LINE_ROUTER from router_line  ")
	F.Intrinsic.String.Build(" {0} where  router = '{1}' and LINE_ROUTER < '{2}' and lmo ='M'  order by LINE_ROUTER",V.Local.sSQL,V.DataTable.DtRouter(V.Local.iFor).router!FieldValTrim,V.DataTable.DtRouter(V.Local.iFor).RtSeq!FieldValTrim,V.Local.sSQL)
	F.Data.DataTable.CreateFromSQL("dtMatRT","con",V.Local.sSQL,false)
	
	f.Intrinsic.String.Build("router='{0}'",V.DataTable.DtRouter(V.Local.iFor).router!FieldValTrim,V.Local.sFilter)
	f.Data.DataView.SetFilter("dtFSH_P","DVDet",V.Local.sFilter)
	
	'update matseq
	f.Data.DataView.SetValue("dtFSH_P$dtFSH_C","DVDet",-1,"mseq",V.DataTable.dtMatRT(0).LINE_ROUTER!FieldValTrim,"lseq",V.DataTable.DtRouter(V.Local.iFor).RtSeq!FieldValTrim)
	
	f.Data.DataTable.Close("dtMatRT")
F.Intrinsic.Control.Next(V.Local.iFor)


V.Local.sScheduleNumber.Declare
V.Local.sIncrement.Declare
V.Local.sDate.Declare

F.Intrinsic.String.Format(V.Ambient.Date,"MMDDYY",V.Local.sDate)

f.Data.DataTable.AddColumn("dtFSH_P$dtFSH_C","SchedNumber","string")
f.Data.DataTable.AddColumn("dtFSH_P$dtFSH_C","SchedIncrement","string")
f.Data.DataTable.AddColumn("dtFSH_P$dtFSH_C","SchedDate","date")

F.Intrinsic.Control.For(V.Local.iFor,0,V.DataTable.dtFSH_P.RowCount--,1)

	f.Intrinsic.String.Build("matl='{0}'",V.DataTable.dtFSH_P(V.Local.iFor).matl!FieldValTrim,V.Local.sFilter)
	f.Data.DataView.SetFilter("dtFSH_P$dtFSH_C","DVDet",V.Local.sFilter)

	F.Data.DataTable.AddRow("6000","SchedNumber",V.Local.sScheduleNumber,"SchedIncrement",V.Local.sIncrement,"MatWO",V.Local.sJob,"MatSuff",V.Local.sSuffix,"MatSeq",V.Local.sMSeq,"LabWO",V.Local.sJob,"LabSuff",V.Local.sSuffix,"LabSeq",V.Local.sSeq,"LabWOPart",V.Local.sPart,"LabWorkCenter",V.Local.sWorkCenter,"SchedFromDate",V.Local.sDate,"SchedToDate",V.Local.sDate,"SchedFromDueDate",V.Local.sDate,"SchedToDueDate",V.Local.sDate)
	
	f.Data.DataView.SetValue("dtFSH_P$dtFSH_C","DVDet",-1,"SchedNumber",V.Local.sScheduleNumber,"SchedDate",V.Local.sDate)

F.Intrinsic.Control.Next(V.Local.iFor)

f.Data.Dataview.Close("dtFSH_P","DDet")
f.Data.Dataview.Close("dtFSH_P$dtFSH_C","DVDet")

f.Intrinsic.UI.CloseWaitDialog

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("cmdCreateFlex_Click_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	F.Intrinsic.UI.CloseWaitDialog
	Function.Intrinsic.String.Concat("Project: GCG_5364_Order_Entry.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
		F.ODBC.Connection!con.Close
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.End
f.Intrinsic.Control.EndIf 
Program.Sub.cmdCreateFlex_Click.End

Program.Sub.Comments.Start
${$0$}$4483 ORDER ENTRY$}$JTW$}$3/14/2017 10:30:53 AM$}$False
${$3$}$0$}$$}$0$}$-1$}$$}$12:00:00 AM$}$This program will display a custom order entry form that allows the user to enter product information in order to produce order lines, routers, and work orders.  It will generate a part number based on the properties entered and selected. Part dimensions are to the nearest hundredth.
Program.Sub.Comments.End
